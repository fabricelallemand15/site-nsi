{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue !","text":""},{"location":"mentions/","title":"Mentions l\u00e9gales","text":"<ul> <li>Site personnel de Fabrice LALLEMAND, Lyc\u00e9e Emile DUCLAUX, 16 avenue Henir MONDOR, 15000 AURILLAC, t\u00e9l\u00e9phone 04 71 48 22 22.</li> <li>Ce site est h\u00e9berg\u00e9 en Auvergne par o2switch.</li> <li>Politique de confidentialit\u00e9</li> </ul>"},{"location":"politique_conf/","title":"Politique de confidentialit\u00e9","text":""},{"location":"politique_conf/#qui-sommes-nous","title":"Qui sommes-nous ?","text":"<p>L'adresse de ce site web est : https://www.nsi.flallemand.fr.</p>"},{"location":"politique_conf/#cookies","title":"Cookies","text":"<p>Ce site, en ce qui concerne son fonctionnement propre, n'utilise pas de cookies.</p>"},{"location":"politique_conf/#contenu-integre-dautres-sites-web","title":"Contenu int\u00e9gr\u00e9 d'autres sites Web","text":"<p>Les articles de ce site peuvent inclure du contenu int\u00e9gr\u00e9 (par exemple des vid\u00e9os, des images, des articles, etc.). Le contenu int\u00e9gr\u00e9 provenant d'autres sites web se comporte exactement de la m\u00eame mani\u00e8re que si le visiteur avait visit\u00e9 l'autre site web.</p> <p>Ces sites web peuvent collecter des donn\u00e9es vous concernant, utiliser des cookies, int\u00e9grer un suivi suppl\u00e9mentaire par des tiers et surveiller votre interaction avec ce contenu int\u00e9gr\u00e9, y compris le suivi de votre interaction avec le contenu int\u00e9gr\u00e9 si vous avez un compte et \u00eates connect\u00e9 \u00e0 ce site web.</p>"},{"location":"politique_conf/#donnees-personnelles","title":"Donn\u00e9es personnelles","text":"<p>Ce site ne recueille aucune donn\u00e9e personnelle de ses visiteurs.</p> <p>Ce site participe et est conforme \u00e0 l'ensemble des Sp\u00e9cifications et Politiques du Transparency &amp; Consent Framework de l'IAB Europe. Il utilise la Consent Management Platform n\u00b092.</p> <p>Vous pouvez modifier vos choix \u00e0 tout moment en cliquant bas \u00e0 droite de l'\u00e9cran.</p>"},{"location":"tags-index/","title":"Tags","text":"<p>Liste des tags utilis\u00e9s sur ce site :</p>"},{"location":"corrections/exo_type_bac_recursivite_1_corr/","title":"Corrig\u00e9 de l'exercice 7 (type bac : r\u00e9cursivit\u00e9)","text":"<ol> <li> <p>Le code propos\u00e9 ne permet pas l'\u00e9change des \u00e9l\u00e9ments d'indices \\(i_1\\) et \\(i_2\\) car la premi\u00e8re ligne de la fonction <code>echange</code> \u00e9crase la valeur d'indice \\(i_2\\) et la remplace par l'\u00e9l\u00e9ment d'indice \\(i_1\\). \u00c0 l'issue de la deuxi\u00e8me ligne, les deux \u00e9l\u00e9ments d'indice \\(i_1\\) et \\(i_2\\) sont donc \u00e9gaux : ils ne sont pas \u00e9chang\u00e9s.</p> <p>Pour \u00e9changer les deux \u00e9l\u00e9ments, deux solutions : ou bien on passe par une variable interm\u00e9diaire pour conserver en m\u00e9moire la valeur initiale de l'\u00e9l\u00e9ment d'indice \\(i_2\\), ou bien on proc\u00e8de \u00e0 une double affectation.</p> \ud83d\udc0d Script Python<pre><code># Version avec variable interm\u00e9diaire\n\ndef echange(lst, i1, i2):\n    rec = lst[i2]\n    lst[i2] = lst[i1]\n    lst[i1] = rec\n\n# Version avec double affectation\n\ndef echange(lst, i1, i2):\n    lst[i1], lst[i2] = lst[i2], lst[i1]\n</code></pre> <p>Test de ces deux fonctions :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; liste = [1,2,3]\n&gt;&gt;&gt; echange(liste,0,2)\n&gt;&gt;&gt; liste\n[3, 2, 1]\n</code></pre> </li> <li> <p>D'apr\u00e8s la documentation <code>randint(0, 10)</code> renvoie un entier compris entre 0 inclus et 10 inclus. Les valeurs possibles sont donc 0, 1, 9 et 10.</p> </li> <li> <p>a. La fonction <code>melange</code> est une fonction r\u00e9cursive car elle s'appelle elle-m\u00eame (derni\u00e8re ligne). Dans l'hypoth\u00e8se o\u00f9, comme dit dans la question suivante, la variable <code>ind</code> est un entier initialement \u00e9gal au plus grand indice possible de la liste <code>lst</code>, chaque appel r\u00e9cursif est effectu\u00e9 en diminuant cet indice d'une unit\u00e9. On arrivera donc n\u00e9cessairement, apr\u00e8s un nombre fini d'appel \u00e0 une valeur de <code>ind</code> \u00e9gale \u00e0 0. Dans ce cas, la condition <code>ind &gt; 0</code> n'\u00e9tant plus v\u00e9rifi\u00e9e, la fonction <code>melange</code> se terminera sans rien faire : c'est le cas de base.</p> <p>b. La fonction est ex\u00e9cut\u00e9e avec <code>ind = n-1</code>. Le premier appel r\u00e9cursif est fait avec <code>ind = n - 2</code>, le second avec <code>ind = n - 3</code>, ... et le dernier avec <code>ind = 0</code>. Il y a donc \\(n-1\\) appels r\u00e9cursifs, sans compter l'appel initial.</p> <p>c. Nous avons initialement <code>lst = [0, 1, 2, 3, 4]</code> comme indiqu\u00e9 dans l'\u00e9nonc\u00e9. La premi\u00e8re valeur al\u00e9atoire renvoy\u00e9e est 2. Le dernier \u00e9l\u00e9ment de la liste est donc \u00e9chang\u00e9 avec l'\u00e9l\u00e9ment d'indice 2. On obtient donc <code>lst = [0, 1, 4, 3, 2]</code> : c'est bien ce qu'indique l'\u00e9nonc\u00e9.</p> <p>La deuxi\u00e8me valeur al\u00e9atoire est \u00e9gale \u00e0 1 et la fonction est appel\u00e9e avec <code>ind = 3</code>. On \u00e9change donc l'\u00e9l\u00e9ment d'indice trois avec celui d'indice un. D'o\u00f9 l'affichage <code>[0, 3, 4, 1, 2]</code>.</p> <p>La valeur suivante renvoy\u00e9e par <code>randint</code> est 2 et la fonction est appel\u00e9e avec <code>ind = 2</code>. On \u00e9change donc l'\u00e9l\u00e9ment d'indice deux avec celui d'indice deux. Rien ne change. D'o\u00f9 l'affichage <code>[0, 3, 4, 1, 2]</code>.</p> <p>La valeur suivante renvoy\u00e9e par <code>randint</code> est 0 et la fonction est appel\u00e9e avec <code>ind = 1</code>. On \u00e9change donc l'\u00e9l\u00e9ment d'indice z\u00e9ro avec celui d'indice un. D'o\u00f9 l'affichage <code>[3, 0, 4, 1, 2]</code> et le programme se termine.</p> <p>En r\u00e9sum\u00e9, l'affichage obtenu sera le suivant : </p> \ud83d\udc0d Console Python<pre><code>[0, 1, 2, 3, 4]\n[0, 1, 4, 3, 2]\n[0, 3, 4, 1, 2]\n[0, 3, 4, 1, 2]\n[3, 0, 4, 1, 2]\n</code></pre> <p>d. Version it\u00e9rative de l'algorithme utilisant une boucle <code>for</code> : </p> \ud83d\udc0d Script Python<pre><code>def melange(lst):\n    for ind in range(len(lst) - 1, -1, -1):\n        print(lst)\n        j = randint(0, ind)\n        echange(lst, ind, j)\n</code></pre> <p>Version avec une boucle <code>while</code> :</p> \ud83d\udc0d Script Python<pre><code>def melange(lst):\n    ind = len(lst) - 1\n    while ind &gt; 0:\n        print(lst)\n        j = randint(0, ind)\n        echange(lst, ind, j)\n        ind = ind - 1\n</code></pre> </li> </ol>"},{"location":"histoire/","title":"\u00c9v\u00e8nements clefs de l'histoire de l'informatique","text":""},{"location":"premiere/","title":"Premi\u00e8re NSI","text":""},{"location":"premiere/#programme-officiel","title":"Programme officiel","text":"<p>Fichier \u00e0 t\u00e9l\u00e9charger...</p>"},{"location":"premiere/01_langages/","title":"01-Langages et programmation","text":""},{"location":"premiere/01_langages/#programme","title":"Programme","text":"<p>Les langages de programmation Turing-complets sont caract\u00e9ris\u00e9s par un corpus de \u00ab constructions \u00e9l\u00e9mentaires \u00bb. Sans introduire cette terminologie, il s\u2019agit de montrer qu\u2019il existe de nombreux langages de programmation, diff\u00e9rents par leur style (imp\u00e9ratif, fonctionnel, objet, logique, \u00e9v\u00e9nementiel, etc.), ainsi que des langages formalis\u00e9s de description ou de requ\u00eates qui ne sont pas des langages de programmation.</p> <p>L\u2019importance de la sp\u00e9cification, de la documentation et des tests est \u00e0 pr\u00e9senter, ainsi que l\u2019int\u00e9r\u00eat de la modularisation qui permet la r\u00e9utilisation de programmes et la mise \u00e0 disposition de biblioth\u00e8ques. Pour les programmes simples \u00e9crits par les \u00e9l\u00e8ves, on peut se contenter d\u2019une sp\u00e9cification rapide mais pr\u00e9cise.</p> Contenus Capacit\u00e9s attendues Commentaires Constructions \u00e9l\u00e9mentaires Mettre en \u00e9vidence un corpus de constructions \u00e9l\u00e9mentaires. S\u00e9quences, affectation, conditionnelles, boucles born\u00e9es, boucles non born\u00e9es, appels de fonction. Diversit\u00e9 et unit\u00e9 des langages de programmation Rep\u00e9rer, dans un nouveau langage de programmation, les traits communs et les traits particuliers \u00e0 ce langage. Les mani\u00e8res dont un m\u00eame programme simple s\u2019\u00e9crit dans diff\u00e9rents langages sont compar\u00e9es. Sp\u00e9cification Prototyper une fonction. D\u00e9crire les pr\u00e9conditions sur les arguments. D\u00e9crire des postconditions sur les r\u00e9sultats. Des assertions peuvent \u00eatre utilis\u00e9es pour garantir des pr\u00e9conditions ou des postconditions. Mise au point de programmes Utiliser des jeux de tests. L\u2019importance de la qualit\u00e9 et du nombre des tests est mise en \u00e9vidence. Le succ\u00e8s d\u2019un jeu de tests ne garantit pas la correction d\u2019un programme. Utilisation de biblioth\u00e8ques Utiliser la documentation d\u2019une biblioth\u00e8que. Aucune connaissance exhaustive d\u2019une biblioth\u00e8que particuli\u00e8re n\u2019est exigible."},{"location":"premiere/01_langages/#choix-pedagogiques","title":"Choix p\u00e9dagogiques","text":"<p>Dans cette s\u00e9quence, nous \u00e9tudierons principalement le corpus des instructions \u00e9l\u00e9mentaires du langage Python et nous utiliserons ce langage pour aborder les notions de sp\u00e9cifications, jeux de tests et de biblioth\u00e8que.</p> <p>Dans un deuxi\u00e8me temps, nous ouvrirons notre \u00e9tude \u00e0 d'autres langages de programmation pour effectuer des comparaisons simples. </p>"},{"location":"premiere/01_langages/1_bases/essentiel/","title":"L'essentiel","text":"<p>Python est un langage de programmation cr\u00e9\u00e9 en 1989.</p>"},{"location":"premiere/01_langages/1_bases/essentiel/#variables-et-affectation","title":"Variables et affectation","text":"<p>On affecte une valeur \u00e0 une variable avec le signe <code>=</code>. Les noms de variables doivent \u00eatre bien choisis, auto descriptifs. Ils ne doivent pas commencer par un chiffre.</p> <p>Le typage est dynamique : inutile de d\u00e9clarer le type d'une variable avant de l'affecter.</p> <p>Types standard : entiers : <code>int</code> ; flottants : <code>float</code> ; cha\u00eenes de caract\u00e8res : <code>str</code>.</p> <p>Pour suivre l'\u00e9volution de l'\u00e9tat des variables, il est souvent utile de dresser un tableau d'\u00e9tat des variables. On peut aussi utiliser le mode de d\u00e9bogage pas \u00e0 pas de l'IDE utilis\u00e9.</p>"},{"location":"premiere/01_langages/1_bases/essentiel/#operations-sur-les-chaines-de-caracteres","title":"Op\u00e9rations sur les cha\u00eenes de caract\u00e8res","text":"<p>Le signe <code>+</code> entre deux cha\u00eenes correspond \u00e0 l'op\u00e9ration de concat\u00e9nation (mise bout \u00e0 bout).</p> <p>Les <code>fstrings</code> sont pratiquent pour ins\u00e9rer la valeur d'une variable dans une cha\u00eene de caract\u00e8re : <code>f\"Bonjour {nom}\"</code>.</p> <p>La fonction <code>input</code> permet une entr\u00e9e de l'utilisateur : elle renvoie toujours un r\u00e9sultat du type <code>str</code>.</p>"},{"location":"premiere/01_langages/1_bases/essentiel/#booleens","title":"Bool\u00e9ens","text":"<p>Deux valeurs : <code>True</code> ou <code>False</code> ; des op\u00e9rateurs logiques <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>==</code> et <code>!=</code> auxquels s'ajoutent <code>and</code>, <code>or</code> et <code>not</code>.</p>"},{"location":"premiere/01_langages/1_bases/essentiel/#instructions-conditionnelles","title":"Instructions conditionnelles","text":"\ud83d\udc0d Script Python<pre><code>if test1:\n    instruction1\nelif test2:\n    instruction2\nelif tes3:\n    instruction3\nelse:\n    instruction4\n</code></pre>"},{"location":"premiere/01_langages/1_bases/essentiel/#boucle-conditionnelle","title":"Boucle conditionnelle","text":"\ud83d\udc0d Script Python<pre><code>while expression:\n    instruction1\n    instruction2\nsuite programme\n</code></pre>"},{"location":"premiere/01_langages/1_bases/essentiel/#boucle-bornee","title":"Boucle born\u00e9e","text":"\ud83d\udc0d Script Python<pre><code>for truc in machin:\n    instruction1\n    instruction2\nsuite programme\n</code></pre> <p>Utilisation de la fonction <code>range()</code></p> <ul> <li><code>range(n)</code> g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par 0 et jusqu'\u00e0 \\(n\\) exclu ;</li> <li><code>range(k, n)</code> g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par \\(k\\) et jusqu'\u00e0 \\(n\\) exclu ;</li> <li><code>range(k, n, p)</code>g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par \\(k\\) et jusqu'\u00e0 \\(n\\) exclu, avec un pas de \\(p\\) ;</li> </ul>"},{"location":"premiere/01_langages/1_bases/essentiel/#fonctions","title":"Fonctions","text":"\ud83d\udc0d Script Python<pre><code>def ma_fonction(liste des arguments de la fonction) :\n    ...\n    # groupe d'instructions\n    ...\n</code></pre> <p>La premi\u00e8re ligne, introduite par <code>def</code> est l'ent\u00eate ou la signature de la fonction.</p>"},{"location":"premiere/01_langages/1_bases/essentiel/#utilisation-de-bibliotheques","title":"Utilisation de biblioth\u00e8ques","text":"<p>Importation en d\u00e9but de programme : </p> <ul> <li><code>import math</code> n\u00e9cessite ensuite un appel avec la notation point\u00e9e <code>math.pi</code></li> <li><code>import turtle as tt</code> : m\u00eame chose avec un alias <code>tt.penup()</code></li> <li>import de tout un module (pas besoin de notation point\u00e9e) : <code>from random import *</code>, utilisation : <code>a = randint(1,6)</code></li> <li>import d'une fonction particuli\u00e8re : <code>from math import sqrt</code>, utilisation : <code>a = sqrt(2)</code></li> </ul>"},{"location":"premiere/01_langages/1_bases/essentiel/#variables-locales-et-variables-globales","title":"Variables locales et variables globales","text":"<p>\u00c0 retenir</p> <p>Lorsqu'on \u00e9crit un programme, python cr\u00e9e un espace de noms ( namespace ) dans lequel les noms des variables et des fonctions d\u00e9finies dans ce programme sont stock\u00e9s.</p> <p>\u00c0 l'int\u00e9rieur de chaque fonction, il est possible de d\u00e9finir aussi des variables. Un nouvel espace de noms, compl\u00e8tement ind\u00e9pendant de l'espace de noms principal est cr\u00e9e pour chaque fonction.</p> <p>Par cons\u00e9quent, une variable d\u00e9finie \u00e0 l'int\u00e9rieur d'une fonction n'est pas accessible depuis le programme principal et elle n'existe plus lorsque l'ex\u00e9cution de la fonction est termin\u00e9e (m\u00eame si elle porte le m\u00eame nom qu'une variable du programme principal). On dit qu'il s'agit d'une variable locale.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/","title":"Les bases de Python (cours)","text":""},{"location":"premiere/01_langages/1_bases/python_bases/#1-introduction","title":"1. Introduction","text":"<p>Python est un langage de programmation, il s'agit donc d'un ensemble d'instructions qui va nous permettre d'\u00e9crire des programmes informatiques. </p> <p>Un programme est une suite d'instructions donn\u00e9es \u00e0 un ordinateur afin qu'il effectue une t\u00e2che d\u00e9termin\u00e9e.</p> <p>Nous prendrons garde \u00e0 diff\u00e9rencier les termes programme et algorithme. Observons pour cela les d\u00e9finitions donn\u00e9es dans l'encyclop\u00e9die Wikipedia :</p> algorithme <p>Un algorithme est une suite finie et non ambigu\u00eb d'instructions et d'op\u00e9rations permettant de r\u00e9soudre un type de probl\u00e8mes.</p> programme informatique <p>Un programme informatique est un ensemble d'instructions et d'op\u00e9rations destin\u00e9es \u00e0 \u00eatre ex\u00e9cut\u00e9es par un ordinateur.</p> <p>Un algorithme ne rel\u00e8ve donc pas a priori du domaine de l'informatique. Cependant, la plupart des programmes informatiques sont la traduction d'un algorithme dans un certain langage de programmation.</p> <p>Remarquons enfin que le mote algorithme vient d'Al-Khw\u00e2rizm\u00ee (en arabe : \u0627\u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a), nom d'un math\u00e9maticien persan du IXe si\u00e8cle. </p> <p>Il existe de nombreux langages de programmation et, m\u00eame en utilisant un m\u00eame langage, un algorithme peut \u00eatre programm\u00e9 de diff\u00e9rentes fa\u00e7ons. Un algorithme donn\u00e9 peut donc correspondre \u00e0 de tr\u00e8s nombreux programmes informatiques diff\u00e9rents.</p> <p>Cependant, un ordinateur n'est qu'une machine \u00e9lectrique qui ne peut comprendre directement que des suites d'instructions exprim\u00e9es en langage machine par des suites de 0 et de 1. Le r\u00f4le d'un langage de programmation est de fournir au programmeur une syntaxe et une grammaire pour lui permettre d'exprimer des instructions de mani\u00e8re plus facilement compr\u00e9hensible pour un \u00eatre humain. Ce programme est ensuite traduit en langage machine, puis ex\u00e9cut\u00e9.</p> <p>Cette traduction est faite, suivant les langages, par un compilateur (programme qui cr\u00e9e un fichier ex\u00e9cutable \u00e0 partir du code source) ou par un interpr\u00e9teur (programme qui lit, traduit et ex\u00e9cute imm\u00e9diatement une \u00e0 une les instructions du code source).</p> <p>En NSI, nous allons nous focaliser sur le langage Python.</p> <p></p> <p>Le langage Python a \u00e9t\u00e9 cr\u00e9\u00e9 en 1989 par l'informaticien n\u00e9erlandais Guido van Rossum qui l'a nomm\u00e9 ainsi en hommage \u00e0 la s\u00e9rie t\u00e9l\u00e9vis\u00e9e des Monty Python dont il \u00e9tait fan.</p> <p></p> <p>Pour installer et utiliser Python voir cette page.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#2-variables-et-affectation","title":"2. Variables et affectation","text":"<p>Dans un programme, on utilise des variables pour stocker des donn\u00e9es.</p> <p>Une variable est d\u00e9termin\u00e9e par un nom de variable que l'on peut choisir librement. Il est n\u00e9anmoins conseill\u00e9 de choisir un nom court et auto-descriptif afin de comprendre \u00e0 la lecture le r\u00f4le de cette variable. </p> <p>Un nom de variable ne peut pas commencer par un chiffre et ne doit pas contenir de caract\u00e8res sp\u00e9ciaux autres que \"_\" ou d'espace.</p> <p>Il est conseill\u00e9 d'utiliser plut\u00f4t des lettres minuscules, en s\u00e9parant les mots par le caract\u00e8re \u201d_\u201d ou en utilisant des majuscules \u00e0 l'int\u00e9rieur du nom. Une variable pr\u00e9vue pour contenir un prix de revient pourra par exemple \u00eatre nomm\u00e9e <code>prix_de_revient</code> ou <code>prixDeRevient</code>. Des recommendations pr\u00e9cises de style de programmation Python sont rassembl\u00e9es \u00e0 cette adresse : https://peps.python.org/pep-0008/.</p> <p>\u00c0 retenir</p> <p>Pour affecter une valeur \u00e0 une variable, on utilise simplement le signe \u201d=\u201d.</p> <p>L'instruction <code>pi = 3.14</code> a pour effet de :</p> <ol> <li>cr\u00e9er le nom de variable <code>pi</code> dans la m\u00e9moire de l'ordinateur ;</li> <li>cr\u00e9er la valeur <code>3.14</code> dans la m\u00e9moire de l'ordinateur ;</li> <li>\u00e9tablir un lien entre le nom <code>pi</code> et l'emplacement de la valeur <code>3.14</code> dans la m\u00e9moire de l'ordinateur.</li> </ol> <p>On dira donc qu'une variable est l'association d'un nom et d'une valeur</p> <p>En mode interactif, il suffit de taper le nom d'une variable et de valider pour afficher sa valeur. En mode programme, on utilisera la fonction <code>print()</code>pour afficher le contenu d'une variable \u00e0 l'ex\u00e9cution.</p> <p>Il est possible d'affecter des valeurs \u00e0 plusieurs variables simultan\u00e9ment.</p> <p>La commande <code>a, b, c = 2, 2.5, \"toto\"</code> affecte par exemple la valeur <code>2</code> \u00e0 la variable <code>a</code>, la valeur <code>2.5</code> \u00e0 la variable <code>b</code> et la valeur <code>\u201dtoto\u201d</code> \u00e0 la variable <code>c</code> . Ces trois variables sont de types diff\u00e9rents : <code>a</code> est un entier, <code>b</code> est un nombre \u00e0 virgule et <code>c</code> est une cha\u00eene de caract\u00e8res.</p> <p>Lors de la d\u00e9finition d'une variable, ou lors d'une nouvelle affectation, python d\u00e9tecte automatiquement le type de variable \u00e0 d\u00e9finir en fonction de la valeur affect\u00e9e. On parle de typage dynamique. D'autres langages de programmation imposent que les noms des variables et leur type soient d\u00e9clar\u00e9s avant toute affectation : on parle alors de typage statique.</p> <p>La fonction <code>type()</code> permet de conna\u00eetre le type d'une variable d\u00e9j\u00e0 d\u00e9finie.</p> <p>\u00c0 retenir</p> <p>Les types de base sont :</p> <ul> <li>type <code>int</code> : ce sont les nombres entiers (integer). Ils supportent les op\u00e9rations +, \u2212, *, /, ** (puissance), // (quotient entier), % (reste entier), abs() (valeur absolue) ;</li> <li>type <code>float</code> : ce sont les nombres \u00e0 virgule (on parle de virgule flottante), qui supportent les op\u00e9rations usuelles ;</li> <li>type <code>string</code> : ce sont les chaines de caract\u00e8res.</li> </ul> <p>Remarque : on peut effectuer un calcul et en m\u00eame temps affecter le r\u00e9sultat \u00e0 une variable, ou en m\u00eame temps afficher le r\u00e9sultat en composant les instructions. Par exemple, la commande <code>prix = 64 * (1 + 19.6 / 100)</code> effectue d'abord le calcul indiqu\u00e9 apr\u00e8s le signe <code>=</code>, puis affecte le r\u00e9sultat \u00e0 la variable <code>prix</code>. On peut aussi ex\u00e9cuter la commande <code>print(\"Le prix est : \", 64 * (1 + 19.6 / 100))</code>.</p> <p>Remarque : en Python, il est tr\u00e8s facile d'\u00e9changer le contenu de deux variables, en utilisant une double affectation :</p> \ud83d\udc0d Script Python<pre><code>a = \"Bonjour\"\nb = \"NSI\"\na, b = b, a\n</code></pre> <p>Apr\u00e8s l'ex\u00e9cution de ces trois lignes, la variable <code>a</code> renvoie la valeur <code>\"NSI\"</code> et <code>b</code> correspond \u00e0 <code>\"Bonjour\"</code>.</p> <p>M\u00e9thode utile</p> <p>Pour bien comprendre un programme, on peut dresser un tableau d'\u00e9tat dans lequel on affiche les valeurs successives des variables.</p> <p>Le tableau d'\u00e9tat du programme ci-dessus s'\u00e9crit : </p> Etape <code>a</code> <code>b</code> 1 <code>\"Bonjour\"</code> 2 <code>\"Bonjour\"</code> <code>\"NSI\"</code> 3 <code>\"NSI\"</code> <code>\"Bonjour\"</code>"},{"location":"premiere/01_langages/1_bases/python_bases/#3-operations-sur-les-chaines-de-caracteres","title":"3. Op\u00e9rations sur les cha\u00eenes de caract\u00e8res","text":"<p>L'utilisation du signe + ne se limite pas \u00e0 l'addition. Appliqu\u00e9 \u00e0 des cha\u00eenes de caract\u00e8res, il r\u00e9alise l'op\u00e9ration de concat\u00e9nation.</p> Concat\u00e9nation <p>Le terme concat\u00e9nation (substantif f\u00e9minin), du latin cum (\u00abavec\u00bb) et catena(\u00abcha\u00eene, liaison\u00bb), d\u00e9signe l'action de mettre bout \u00e0 bout au moins deux cha\u00eenes. ((Wikip\u00e9dia))</p> <p>Si on consid\u00e8re le programme suivant :</p> <p>\ud83d\udc0d Script Python<pre><code>a = \"Hello\"\nb = \"World\"\nmon_expression = a + b\n</code></pre> apr\u00e8s l'ex\u00e9cution de ce programme, la variable <code>mon_expression</code> aura pour valeur  <code>\"HelloWorld\"</code>.</p> <p>Il est aussi possible de concat\u00e9ner une cha\u00eene de caract\u00e8res et une ou plusieurs variables de type <code>str</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>ma_chaine_1 = \"Bonjour \"\nma_chaine_2 = \"le \"\nres = ma_chaine_1 + ma_chaine_2 + \"monde !\"\n</code></pre> Apr\u00e8s l'ex\u00e9cution de ce programme, la variable  <code>res</code>  aura pour valeur <code>\"Bonjour le  monde !</code>.</p> <p>Les deux noms <code>ma_chaine_1</code> et <code>ma_chaine_2</code> sont associ\u00e9s \u00e0 deux cha\u00eenes de caract\u00e8res, nous avons donc bien ici une concat\u00e9nation.</p> <p>Que se passe-t-il si nous avons ce cas de figure :</p> \ud83d\udc0d Script Python<pre><code>a = \"Nombre de pommes : \"\nb = 4 \nc = a + b\n</code></pre> <p><code>a</code> est de type <code>str</code>, alors que <code>b</code> est de type <code>int</code>. Le signe <code>+</code> repr\u00e9sente une addition ou une concat\u00e9nation ? Ni l'un, ni l'autre, puisque Python vous renverra une erreur : il ne peut pas concat\u00e9ner, ni additionner un entier et une cha\u00eene de caract\u00e8re.</p> <p>La solution : transformer le nombre 4 en caract\u00e8re 4 \u00e0 l'aide de la fonction <code>str()</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>a = \"Nombre de pommes : \"\nb = 4 \nc = a + str(b)\n</code></pre> Nous avons maintenant une concat\u00e9nation, car <code>str(4)</code> est de type <code>string</code>.</p> <p>Autre solution pour faire cohabiter des variables de type <code>int</code> ou <code>float</code> avec des variables de type <code>str</code> : les fstring (attention les fstring sont uniquement disponible \u00e0 partir de Python 3.5)</p> <p>Il est possible d'\u00e9crire :</p> \ud83d\udc0d Script Python<pre><code>a = \"Nombre de pommes :\"\nb = 4 \nc = f\"{a} {b}\"\n</code></pre> <p>apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable <code>c</code> aura pour valeur <code>\"Nombre de pommes : 4\"</code>.</p> <p>Dans la cha\u00eene de caract\u00e8re, <code>{a}</code> sera remplac\u00e9 par la valeur de la variable <code>a</code>, c'est-\u00e0-dire <code>\"Nombre de pommes :\"</code>. M\u00eame chose avec <code>{b}</code> qui sera remplac\u00e9 par la valeur de <code>b</code>, c'est-\u00e0-dire 4.</p> <p>Autre exemple d'utilisation des fstring :</p> \ud83d\udc0d Script Python<pre><code>num_train = 4232\ndest = \"Paris\" \nc = f\"Le train n\u00b0{num_train} \u00e0 destination de {dest} entre en gare\" \n</code></pre> <p>Apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable <code>c</code> aura pour valeur <code>\"Le train n\u00b04232 \u00e0 destination de Paris entre en gare\"</code>.</p> <p>Notez la pr\u00e9sence du \"f\" juste avant le guillemet et des accolades qui encadrent le nom de la variable. Il est n\u00e9cessaire d'ajouter ce \"f\" pour avoir une fstring.</p> <p>Entr\u00e9es utilisateurs avec <code>input()</code></p> <p>La fonction <code>input()</code> permet de demander \u00e0 l'utilisateur d'entrer une valeur dans la console et de r\u00e9cup\u00e9rer cette valeur en l'affectant \u00e0 une variable.</p> <p>On pourra par exemple tester le script suivant :</p> \ud83d\udc0d Script Python<pre><code>nom = input(\"Quel est votre nom ? : \")\nprint(\"Bonjour\", nom, \" ! \")\n</code></pre> <p>Une erreur courante consiste \u00e0 demander l'entr\u00e9e d'une valeur num\u00e9rique et \u00e0 l'utiliser directement dans un calcul. Le script suivant, par exemple : </p> \ud83d\udc0d Script Python<pre><code>rayon = input(\"Entrer le rayon du cercle : \")\nperi = 2 * 3.14 * rayon\nprint(\"La longueur du cercle est :\", peri)\n</code></pre> <p>conduit \u00e0 : </p> \ud83d\udc0d Console Python<pre><code>TypeError: can't multiply sequence by non-int of type 'float'\n</code></pre> <p>La fonction <code>input()</code> retourne toujours une cha\u00eene de caract\u00e8res. Pour une entr\u00e9e num\u00e9rique, cette cha\u00eene de caract\u00e8re doit \u00eatre \u00e9valu\u00e9e, par exemple avec la fonction <code>eval()</code> qui retournera un type num\u00e9rique <code>int</code> ou <code>float</code> selon les cas.</p> <p>Le script ci-dessous produit le r\u00e9sultat attendu :</p> \ud83d\udc0d Script Python<pre><code>rayon = eval(input(\"Entrer le rayon du cercle : \"))\nperi = 2 * 3.14 * rayon\nprint(\"La longueur du cercle est :\", peri)\n</code></pre> <p>Exercices</p> <p> Fiche d'exercices sur les variables, les affectations et les cha\u00eenes de caract\u00e8res.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#4-booleens","title":"4. Bool\u00e9ens","text":"<p>Pour l'instant nous avons vu deux grands types de donn\u00e9es : les nombres (entier ou flottant) et les cha\u00eenes de caract\u00e8res, il existe un troisi\u00e8me type tout aussi important que les deux premiers : les bool\u00e9ens. Un bool\u00e9en est un type de donn\u00e9es qui ne peut prendre que deux valeurs : vrai (<code>True</code>) ou faux (<code>False</code>). Une expression est soit <code>True</code>, soit <code>False</code>.</p> <p>Les op\u00e9rateurs de comparaison renvoient des bool\u00e9ens.</p> <p>Op\u00e9rateurs de comparaison</p> <ul> <li><code>a == 0</code> : teste si <code>a</code> est \u00e9gal \u00e0 0 ;</li> <li><code>a != 0</code> : teste si <code>a</code> est diff\u00e9rent de 0 ;</li> <li><code>a &lt; 0</code> : teste si <code>a</code> est strictement inf\u00e9rieur \u00e0 0 ;</li> <li><code>a &gt; 0</code> : teste si <code>a</code> est strictement sup\u00e9rieur \u00e0 0 ;</li> <li><code>a &lt;= 0</code> : teste si <code>a</code> est inf\u00e9rieur ou \u00e9gal \u00e0 0 ;</li> <li><code>a &gt;= 0</code> : teste si <code>a</code> est sup\u00e9rieur ou \u00e9gal \u00e0 0.</li> </ul> <p>ATTENTION</p> <p>Notez le double \u00e9gal <code>==</code> qui permet de distinguer un test d'\u00e9galit\u00e9 d'une affectation (association d'une valeur \u00e0 un nom (variable). Le fait de confondre le \"simple \u00e9gal\" et le \"double \u00e9gal\" est une erreur classique qu'il faut \u00e9viter.</p> <p>Il est aussi possible de combiner plusieurs op\u00e9rateurs bool\u00e9ens gr\u00e2ce aux op\u00e9rateurs logiques <code>or</code> et <code>and</code>. On peut repr\u00e9senter le fonctionnement de ces op\u00e9rateurs dans un tableau, appel\u00e9 table de v\u00e9rit\u00e9 :</p> <p>Table de v\u00e9rit\u00e9 pour <code>or</code></p> exp1 exp2 exp1  or  exp2 True True True True False True False True True False False False <p>Table de v\u00e9rit\u00e9 pour <code>and</code></p> exp1 exp2 exp1  and  exp2 True True True True False False False True False False False False <p>On trouve aussi <code>not</code> comme op\u00e9rateur logique de n\u00e9gation avec la table de v\u00e9rit\u00e9 suivante :</p> exp not (exp) True False False True <p>Attention !</p> <p>On peut combiner des op\u00e9rateurs arithm\u00e9tiques,  de comparaison  et logiques pour cr\u00e9er des expressions bool\u00e9ennes complexes. Il faut pr\u00eater attention aux r\u00e8gles de priorit\u00e9. Les parenth\u00e8ses sont prioritaires sur tous les autres op\u00e9rateurs donc on peut les utiliser quand on n'est pas certain des r\u00e8gles de priorit\u00e9 ou pour s'en affranchir.</p> <p>Nous reviendrons sur les bool\u00e9ens en cours d'ann\u00e9e dans une s\u00e9quence ult\u00e9rieure.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#5-instructions-conditionnelles","title":"5. Instructions conditionnelles","text":"<p>Dans les scripts pr\u00e9c\u00e9dents, les s\u00e9quences d'instructions sont ex\u00e9cut\u00e9es ligne apr\u00e8s ligne, dans l'ordre o\u00f9 elles sont \u00e9crites, suivant un organigramme simple du type ci-dessous.</p> <p></p> <p>Une instruction conditionnelle permet d'indiquer \u00e0 python de ne pas ex\u00e9cuter une suite de commandes dans l'ordre o\u00f9 elles sont \u00e9crites, mais de suivre diff\u00e9rents chemins selon les circonstances.</p> <p>L'id\u00e9e de base est la suivante :</p> \ud83d\udc0d Script Python<pre><code>if test:\n    instruction1\nelse:\n    instruction2\n</code></pre> <p>Si \"test\" est True alors \"instruction1\" est ex\u00e9cut\u00e9 et \"instruction2\" est ignor\u00e9.</p> <p>Sinon (sous-entendu que \"test\" est False) \"instruction2\" est ex\u00e9cut\u00e9 et \"instruction1\" est ignor\u00e9.</p> <p></p> <p>Plusieurs conditions peuvent \u00eatre test\u00e9es : on utilise pour cela le mot-clef <code>elif</code>, contraction de else if :</p> \ud83d\udc0d Script Python<pre><code>if test1:\n    instruction1\nelif test2:\n    instruction2\nelif test3:\n    instruction3\nelse:\n    instruction4\n</code></pre> <p>Dans ce cas, si <code>test1</code> est True, <code>instruction1</code> est ex\u00e9cut\u00e9e et tout le reste est ignor\u00e9. Sinon, si <code>test2</code> est True, alors <code>instruction2</code> est ex\u00e9cut\u00e9e et tout le reste est ignor\u00e9. Si <code>test1</code> et <code>test2</code> sont False et <code>test3</code> True, alors <code>instruction3</code> est ex\u00e9cut\u00e9e. Si les trois tests sont False, c'est <code>instruction4</code> qui est ex\u00e9cut\u00e9e.</p> <p></p> <p>Remarques</p> <ul> <li>Seul <code>if</code> est n\u00e9cessaire dans une instruction conditionnelle. Les commandes <code>elif</code> et <code>else</code> sont optionnelles.</li> <li>Le bloc d'instructions conditionnelles est introduit par une ligne se terminant par une instruction <code>if</code>, <code>elif</code> ou <code>else</code> suivie d'un double point.</li> <li>Ce bloc est d\u00e9limit\u00e9 par une indentation sp\u00e9cifique : d\u00e9calage de 4 espaces vers la droite.</li> <li>Dans tout \u00e9diteur de programme digne de ce nom, cette indentation se fait automatiquement quand on tape \"Entr\u00e9e\" \u00e0 la fin d'une ligne se terminant par un double point.</li> </ul> <p>Si on consid\u00e8re le programme suivant :</p> <p>\ud83d\udc0d Script Python<pre><code>a = 4\nb = 7\nif a &lt; b:\n    print(\"Je suis toto.\");\n    print(\"Je n'aime pas titi.\")\nelse:\n    print(\"Je suis titi.\")\n    print(\"Je n'aime pas toto.\")\nprint(\"En revanche, j'aime le Python.\")\n</code></pre> nous avons <code>a &lt; b</code> qui est True, nous allons donc ex\u00e9cuter les  2 lignes </p> <p>\ud83d\udc0d Script Python<pre><code>print(\"Je suis toto.\");\nprint(\"Je n'aime pas titi.\")\n</code></pre> les lignes </p> <p>\ud83d\udc0d Script Python<pre><code>print(\"Je suis titi.\")\nprint(\"Je n'aime pas toto.\")\n</code></pre> seront ignor\u00e9es.</p> <p>En revanche la ligne  \ud83d\udc0d Script Python<pre><code>print(\"En revanche, j'aime le Python.\")\n</code></pre> sera syst\u00e9matiquement ex\u00e9cut\u00e9e.</p> <p>L'ex\u00e9cution de ce programme permettra d'afficher \u00e0 l'\u00e9cran :</p> \ud83d\udc0d Console Python<pre><code>Je suis toto.\nJe n'aime pas titi.\nEn revanche, j'aime le Python.\n</code></pre> <p>Si maintenant on consid\u00e8re ce programme :</p> <p>\ud83d\udc0d Script Python<pre><code>a = 8\nb = 7\nif a &lt; b:\n    print(\"Je suis toto.\");\n    print(\"Je n'aime pas titi.\")\nelse:\n    print(\"Je suis titi.\")\n    print(\"Je n'aime pas toto.\")\nprint(\"En revanche, j'aime le Python.\")\n</code></pre> L'ex\u00e9cution de ce programme entra\u00eenera l'affichage suivant  :</p> \ud83d\udc0d Console Python<pre><code>Je suis titi.\nJe n'aime pas toto.\nEn revanche, j'aime le Python.\n</code></pre> <p>Exercices</p> <p> Fiche d'exercices sur les instructions conditionnelles.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#6-boucle-conditionnelle","title":"6. Boucle conditionnelle","text":"<p>La notion de boucle est fondamentale en informatique. Une boucle permet d'ex\u00e9cuter plusieurs fois des instructions qui ne sont pr\u00e9sentes qu'une seule fois dans le code.</p> <p>Deux types de boucles sont \u00e0 distinguer : la boucle conditionnelle, introduite par le mot-clef <code>while</code> et le boucle born\u00e9e, introduite par le mot-clef <code>for</code>.</p> <p>La structure de la boucle <code>while</code> est la suivante :</p> \ud83d\udc0d Script Python<pre><code>while expression:\n    instruction1\n    instruction2\nsuite programme\n</code></pre> <p>Tant que <code>expression</code> sera <code>True</code>, on ex\u00e9cutera encore et encore <code>instruction1</code> et <code>instruction2</code>. Apr\u00e8s chaque ex\u00e9cution de <code>instruction1</code> et <code>instruction2</code> (on dit souvent \"apr\u00e8s chaque tour de boucle\"), <code>expression</code> sera de nouveau \u00e9valu\u00e9e (pour savoir si elle est toujours <code>True</code> ou si elle est devenue <code>False</code>)</p> <p>Quand <code>expression</code> deviendra <code>False</code> on passera directement \u00e0 <code>suite programme</code> (sans entrer de nouveau dans la boucle),  la  boucle sera termin\u00e9e.</p> <p></p> <p>Que se passe-t-il si <code>expression</code> ne devient jamais <code>False</code> ?  On entre alors dans  une boucle \"infinie\" : c'est une erreur classique en programmation (aucun programme \"bien fait\" ne tombe dans une boucle infinie, s'il y a une boucle infinie, c'est qu'il y a forcement une erreur dans votre programme). C'est la raison pour laquelle je n'appelle pas ces boucles des boucles non born\u00e9es comme on le trouve souvent : en effet, une boucle <code>while</code> est born\u00e9e, mais on ne sait pas \u00e0 l'avance combien de fois on va passer dans la boucle. Ce nombre de passages dans la boucle d\u00e9pend de l'\u00e9valuation de <code>expression</code>.</p> <p>Consid\u00e9rons le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>i = 0\nwhile i &lt; 3  :\n    print(i)\n    i = i + 1\nprint(\"FIN\")\n</code></pre> <p>Voici comment analyser ce programme :</p> <ul> <li> <p>Au d\u00e9but de l'ex\u00e9cution de ce programme nous avons la variable i qui a pour valeur 0. </p> </li> <li> <p>Nous arrivons ensuite au niveau du while :  l'expression i &lt; 3  est True, on \"entre\" donc dans la boucle : on  affiche la valeur de i : 0 et on incr\u00e9mente  i de 1 (i a maintenant pour valeur 1)</p> </li> <li> <p>Nous passons au  2e tour de boucle : l'expression i &lt; 3  est True, on \"entre\" donc dans la boucle : on affiche la valeur de i : 1 et on incr\u00e9mente  i de 1 (i a maintenant pour valeur 2).</p> </li> <li> <p>Nous passons au  3e tour de boucle : l'expression i &lt; 3  est True, on \"entre\" donc dans la boucle : on affiche la valeur de i :  2 et on incr\u00e9mente  i de 1 (i a maintenant pour valeur 3).</p> </li> <li> <p>Nous passons au  4e tour de boucle : l'expression i &lt; 3  est False (3 n'est pas strictement inf\u00e9rieur \u00e0 3), on n'entre pas dans la  boucle et on passe \u00e0 l'instruction qui suit imm\u00e9diatement la boucle : on ex\u00e9cute <code>print(\"FIN\")</code> et le programme s'arr\u00eate (il n'y a plus d'instruction apr\u00e8s)</p> </li> </ul> <p>Apr\u00e8s l'ex\u00e9cution de ce programme, nous aurons \u00e0 l'\u00e9cran :</p> \ud83d\udc0d Console Python<pre><code>0\n1\n2\nFIN\n</code></pre> <p>Il est tr\u00e8s important que vous soyez capable d'effectuer l'analyse d'un programme comme nous venons de la faire ci-dessus, cela vous permettra d'\u00e9viter beaucoup d'erreurs. Cette analyse peut se faire \u00e0 l'aide d'un tableau d'\u00e9tat (\u00e9tape 0 : initialisation, \u00e9tape 1 : \u00e9tat du programme apr\u00e8s le premier passage dans la boucle): </p> Etape <code>i</code> <code>i&lt;3</code> 0 0 <code>True</code> 1 1 <code>True</code> 2 2 <code>True</code> 3 3 <code>False</code>"},{"location":"premiere/01_langages/1_bases/python_bases/#7-boucle-bornee","title":"7. Boucle born\u00e9e","text":"<p>Une boucle born\u00e9e <code>for</code> peut \u00eatre utilis\u00e9e lorsque l'on conna\u00eet le nombre d'it\u00e9rations au moment de la programmation.</p> <p>La structure de la boucle <code>for</code> est la suivante :</p> \ud83d\udc0d Script Python<pre><code>for truc in machin:\n    instruction1\n    instruction2\nsuite programme\n</code></pre> <p>Les instructions <code>instruction1</code> et <code>instruction2</code> sont ex\u00e9cut\u00e9es autant de fois qu'il y a de <code>truc</code> dans <code>machin</code>. <code>machin</code> doit \u00eatre un objet it\u00e9rable, c'est-\u00e0-dire \u00e0 partir duquel on peut g\u00e9n\u00e9rer une suite de valeurs bien d\u00e9termin\u00e9es. Pour l'instant, nous nous contenterons de deux situations :</p> <ul> <li>it\u00e9ration sur une cha\u00eene de caract\u00e8re : la variable <code>truc</code> prend alors successivement pour valeur tous les caract\u00e8res de la cha\u00eene <code>machin</code> ;</li> </ul> \ud83d\udc0d Script Python<pre><code>for lettre in \"ciao\":\n    print(lettre)\n</code></pre> <ul> <li>it\u00e9ration sur une s\u00e9quence d'entiers g\u00e9n\u00e9r\u00e9e par la fonction <code>range()</code> : par exemple si <code>machin</code> est <code>range(10)</code>, alors <code>truc</code> prendra successivement toutes les valeurs enti\u00e8res de 0 \u00e0 9.</li> </ul> \ud83d\udc0d Script Python<pre><code>for i in range(5):\n    print(3*i)\n</code></pre> <p>Utilisation de la fonction <code>range()</code></p> <ul> <li><code>range(n)</code> g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par 0 et jusqu'\u00e0 \\(n\\) exclu ;</li> <li><code>range(k, n)</code> g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par \\(k\\) et jusqu'\u00e0 \\(n\\) exclu ;</li> <li><code>range(k, n, p)</code>g\u00e9n\u00e8re une s\u00e9quence de nombres entiers en commen\u00e7ant par \\(k\\) et jusqu'\u00e0 \\(n\\) exclu, avec un pas de \\(p\\) ;</li> </ul> <p>Si \\(p\\) est n\u00e9gatif et \\(k&gt;n\\), on peut d\u00e9finir une s\u00e9quence d\u00e9croissante d'entiers.</p> <p>Remarques</p> <ul> <li>Une boucle <code>for</code> peut toujours \u00eatre remplac\u00e9e par une boucle <code>while</code>. Le programme suivant est \u00e9quivalent au pr\u00e9c\u00e9dent :</li> </ul> \ud83d\udc0d Script Python<pre><code>i = 0\nwhile i&lt;5:\n    print(3*i)\n    i = i + 1\n</code></pre> <ul> <li>La r\u00e9ciproque est fausse : pourquoi ?</li> <li>Les boucles peuvent \u00eatre imbriqu\u00e9es. Par exemple, le programme ci-dessous affichera la liste des couples d'entiers \\((i;j)\\) avec \\(0\\leqslant i&lt;j\\leqslant 4\\).</li> </ul> \ud83d\udc0d Script Python<pre><code>for i in range(5):\n    for j in range(i+1,5):\n        print(i, j)\n</code></pre> <p>Exercices</p> <p> Fiche d'exercices sur boucles.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#8-fonctions","title":"8. Fonctions","text":"<p>Lors du d\u00e9veloppement d'un projet informatique, de nombreuses lignes de programme sont souvent n\u00e9cessaires.</p> <p>Pour clarifier le code et rendre sa compr\u00e9hension, et donc sa correction, plus faciles, il est possible de le d\u00e9composer en plusieurs sous-programmes plus simples qui peuvent \u00eatre \u00e9tudi\u00e9s s\u00e9par\u00e9ment.</p> <p>D'autre part, il arrivera souvent qu'une m\u00eame s\u00e9quence d'instructions doive \u00eatre utilis\u00e9e \u00e0 plusieurs reprises dans un programme, et on souhaitera bien \u00e9videmment ne pas avoir \u00e0 la reproduire syst\u00e9matiquement.</p> <p>Pour cela, nous pouvons d\u00e9finir de nouvelles fonctions, c'est-\u00e0-dire donner un nom \u00e0 un groupe d'instructions, qui pourra \u00eatre appel\u00e9 \u00e0 plusieurs reprises dans le programme principal. Cela revient \u00e0 d\u00e9finir de nouvelles instructions.</p> <p>En python, la syntaxe est la suivante :</p> \ud83d\udc0d Script Python<pre><code>def ma_fonction(liste des arguments de la fonction) :\n    ...\n    # groupe d'instructions\n    ...\n</code></pre> <p>Remarquez les deux points et l'indentation. La premi\u00e8re ligne, introduite par <code>def</code> est l'ent\u00eate ou la signature de la fonction.</p> <p>Voici un premier exemple de fonction qui prend en param\u00e8tre un nombre entier \\(n\\) :</p> \ud83d\udc0d Script Python<pre><code>def table(n) :\n    for k in range(11) :\n        print(n, \"fois\", k, \"font\", n * k)\n</code></pre> <p>Pour ex\u00e9cuter cette fonction, il suffit d'\u00e9crire par exemple <code>table(4)</code> et on obtient l'affichage suivant :</p> \ud83d\udc0d Console Python<pre><code>4 fois 0 font 0\n4 fois 1 font 4\n4 fois 2 font 8\n4 fois 3 font 12\n4 fois 4 font 16\n4 fois 5 font 20\n4 fois 6 font 24\n4 fois 7 font 28\n4 fois 8 font 32\n4 fois 9 font 36\n4 fois 10 font 40\n</code></pre> <p>Une fonction peut avoir plusieurs param\u00e8tres. Ils doivent alors \u00eatre s\u00e9par\u00e9s par des virgules.</p> <p>Par exemple, la fonction ci-dessous affiche le prix TTC en fonction du prix hors taxes et du taux de la taxe, donn\u00e9 en pourcentage :</p> \ud83d\udc0d Script Python<pre><code>def prixTTC(prixHT, taux) :\n    print(prixHT*(1+taux/100))\n</code></pre> <p>On a souvent besoin de d\u00e9finir une fonction qui calcule une valeur ou qui retourne le r\u00e9sultat d'un algorithme. Il faut alors utiliser l'instruction <code>return</code> suivie du nom de la variable contenant la valeur \u00e0 retourner.</p> \ud83d\udc0d Script Python<pre><code># definition d'une fonction\ndef aire_triangle(base, hauteur) :\n    aire = base * hauteur / 2\n    return aire\n\n# programme principal\na = aire_triangle(2, 3)\nprint(a)\n</code></pre> <p>Remarque : Python propose des fonction pr\u00eates \u00e0 \u00eatre utilis\u00e9es par le programmeur : les fonctions natives (built-in function en anglais). Nous avons d\u00e9j\u00e0 eu l'occasion d'en voir deux avec <code>type</code> (qui renvoie le type d'une variable) et <code>str</code> qui renvoie la cha\u00eene de caract\u00e8re obtenue \u00e0 partir d'un nombre (<code>str(4)</code> renvoie le caract\u00e8re \"4\"). Il existe beaucoup d'autres fonctions natives Python (il en existe plus de 50). Nous pouvons en citer deux autres :</p> <ul> <li> <p>la fonction <code>len</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res et renvoie le nombre de caract\u00e8res pr\u00e9sents dans cette cha\u00eene de caract\u00e8res (par exemple <code>len(\"azerty\")</code> renvoie 5)</p> </li> <li> <p>la fonction <code>print</code> permet d'afficher \u00e0 l'\u00e9cran la valeur qui lui est pass\u00e9e en param\u00e8tre.</p> </li> </ul> <p>Point de vocabulaire</p> <p>Dans ce qui pr\u00e9c\u00e8de, nous avons utilis\u00e9 le terme fonction de mani\u00e8re tr\u00e8s g\u00e9n\u00e9rale. Nous devons diff\u00e9rencier deux types de \"fonctions\".</p> <ul> <li>un groupe d'instruction qui retourne une valeur au programme principal est appel\u00e9 une fonction. Une fonction ne r\u00e9alise pas d'affichage : elle communique avec le programme principal par ses arguments et la valeur retourn\u00e9e.</li> <li>un groupe d'instruction qui ne retourne pas de valeur et qui peut \u00e9ventuellement effectuer des affichages sera appel\u00e9 une proc\u00e9dure.</li> </ul> <p>Par exemple, le script ci-dessus qui affiche une table de multiplication et celui qui est nomm\u00e9 <code>prixTTC</code> sont des proc\u00e9dures. Par contre <code>aire_triangle</code> est une fonction.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#9-utilisation-de-bibliotheques","title":"9. Utilisation de biblioth\u00e8ques","text":"<p>Il est possible d'utiliser d'autres fonctions \"pr\u00eates \u00e0 l'emploi\" en important des biblioth\u00e8ques, aussi appel\u00e9es modules. Un module est un fichier contenant des fonctions qui pourront \u00eatre utilis\u00e9es dans d'autres programmes.</p> <p>De nombreuses biblioth\u00e8ques sont fournies avec une installation standard de Python, d'autres doivent \u00eatre install\u00e9es s\u00e9par\u00e9ment.</p> <p>Le module <code>math</code> est un module tr\u00e8s important puisqu'il comporte toutes les fonctions math\u00e9matiques classiques : cosinus, sinus, exposant, racine carr\u00e9e...</p> <p>Pour utiliser les fonctions pr\u00e9sentes dans un module, il est n\u00e9cessaire d'importer le module dans notre programme. Par exemple, pour pouvoir utiliser les fonctions du module <code>math</code> il faudra \u00e9crire :</p> <p>\ud83d\udc0d Script Python<pre><code>import math\n</code></pre> au d\u00e9but de son programme.</p> <p>Pour utiliser une fonction d'un module import\u00e9, il faudra pr\u00e9ciser le nom du module qui propose cette fonction. Par exemple, pour d\u00e9terminer le sinus de 3.14, il faudra \u00e9crire :</p> <p>\ud83d\udc0d Script Python<pre><code>math.sin(3.14)\n</code></pre> Voici une s\u00e9rie de calculs qui fait appel \u00e0 des fonctions issues du module maths :</p> <p>\ud83d\udc0d Script Python<pre><code>import math\n\na = 5\nb = 16\nc = 3.14\npuis = math.pow(a,3)\nracine = math.sqrt(b)\ns = math.sin(c)\n</code></pre> Apr\u00e8s l'ex\u00e9cution de ce programme :</p> <ul> <li>la variable <code>puis</code> aura pour valeur \\(5^3 = 125\\) ;</li> <li>la variable <code>racine</code> aura pour valeur \\(\\sqrt{16}=4\\) :</li> <li>la variable <code>s</code> aura pour valeur \\(\\sin(3.14)\\approx 0.05\\).</li> </ul> <p>Pour all\u00e9ger l'\u00e9criture, on peut aussi importer toutes les fonctions du module directement dans notre programme en tapant : <code>from math import *</code>. Il n'est alors plus n\u00e9cessaire de sp\u00e9cifier <code>math.</code> devant chaque fonction utilis\u00e9e.</p> <p>Parmi les modules que nous utiliserons pour d\u00e9buter se trouvent : </p> <ul> <li>le module <code>math</code> d\u00e9j\u00e0 cit\u00e9 ;</li> <li>le module <code>random</code> introduisant des fonctions permettant de g\u00e9n\u00e9rer des nombres al\u00e9atoires ;</li> </ul> Fonction Effet <code>randrange(a,b)</code> renvoie un entier al\u00e9atoire dans \\([a;b[\\) <code>randint(a,b)</code> renvoie un entier al\u00e9atoire dans \\([a;b]\\) <code>random()</code> renvoie un flottant al\u00e9atoire dans \\([0;1[\\) <code>uniform(a,b)</code> renvoie un flottant al\u00e9atoire dans \\([a;b]\\) <ul> <li>le module <code>turtle</code> est une impl\u00e9mentation en Python du langage Logo cr\u00e9\u00e9 dans les ann\u00e9es 1970 pour l'enseignement de l'informatique \u00e0 l'\u00e9cole. Il est disponible dans la distribution standard de Python. En d\u00e9pla\u00e7ant une pointe de stylo qui peut \u00eatre mat\u00e9rialis\u00e9e par une tortue, on peut tracer des figures g\u00e9om\u00e9triques dans un rep\u00e8re cart\u00e9sien dont l'origine est au centre de la fen\u00eatre et dont l'unit\u00e9 par d\u00e9faut est le pixel. Lorsqu'on d\u00e9place le crayon, il laisse une trace s'il est baiss\u00e9 ou pas de trace s'il est lev\u00e9. Nous utiliserons les fonctions suivantes de turtle :</li> </ul> Fonction Effet goto(x,y) d\u00e9place la tortue jusqu'au point de coordonn\u00e9es (x, y) penup() lever le crayon pendown() baisser le crayon setheading(angle) choisir l'angle d'orientation de la tortue en degr\u00e9s forward(n) avancer de n pixels selon l'orientation de la tortue left(a) tourne \u00e0 gauche de a degr\u00e9s right(a) tourne \u00e0 droite de a degr\u00e9s color(\"red\") choisir la couleur rouge (ou \"black\", \"green\", \"blue\" . . . ) <p>Pour conna\u00eetre toutes les fonctions contenues dans une biblioth\u00e8que, on peut, apr\u00e8s avoir tap\u00e9 <code>import math</code> dans la console interactive, taper ensuite <code>help(math)</code>. On peut aussi consulter la documentation officielle.</p> <p>Voici par exemple un programme qui g\u00e9n\u00e8re la figure ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>import turtle as tt\n\ndef spirale(n):\n    tt.penup()\n    tt.goto(0,0)\n    tt.pendown()\n    c = 5\n    for i in range(4):\n        for j in range(4):\n            tt.forward(c)\n            c = 10 + c\n            tt.left(90)\nspirale(4)\ntt.exitonclick()\n</code></pre> </p> <p>Quelques remarques compl\u00e9mentaires sur ce programme : </p> <ul> <li>\u00e0 la ligne 1, on importe le module <code>turtle</code> en le renommant <code>tt</code> afin d'all\u00e9ger l'appel aux fonctions de cette biblioth\u00e8que. Cette pratique est tr\u00e8s courante.</li> <li>\u00e0 la ligne 14, la fonction <code>exitonclick()</code> permet de fermer la fen\u00eatre graphique en cliquant une fois \u00e0 l'int\u00e9rieur.</li> </ul> <p>Cr\u00e9ation d'une biblioth\u00e8que personnelle</p> <p>Il est aussi possible de cr\u00e9er un module personnel, regroupant toutes les fonctions que vous avez cr\u00e9\u00e9es pour un projet particulier.</p> <p>Supposons par exemple que nous avons cr\u00e9\u00e9 un fichier <code>MesFonc.py</code> dans lequel nous avons mis les d\u00e9finitions des fonctions <code>fonc1</code> et <code>fonc2</code>.</p> <p>Pour r\u00e9utiliser ces fonctions dans un autre programme, on pourra importer le module <code>MesFonc</code> en tapant :</p> <ul> <li><code>from MesFonc import *</code> : import de toutes les fonctions du module, utilisables sans pr\u00e9fixe.</li> <li><code>from MesFonc import fonc1</code> : import uniquement de la fonction <code>fonc1</code>, utilisable sans pr\u00e9fixe.</li> <li><code>import MesFonc</code> : import de toutes les fonctions du module, utilisables avec pr\u00e9fixe. Pour appeler la fonction <code>fonc1</code>, on tapera <code>MesFonc.fonc1()</code>.</li> <li><code>import MesFonc as MF</code> : import de toutes les fonctions du module, utilisables avec pr\u00e9fixe alias, par commodit\u00e9. Pour appeler la fonction <code>fonc1</code>, on tapera <code>MF.fonc1()</code>.</li> </ul> <p>Les deux derni\u00e8res possibilit\u00e9s sont int\u00e9ressantes, par exemple, lorsqu'une fonction du module a le m\u00eame nom qu'une autre fonction Python.</p>"},{"location":"premiere/01_langages/1_bases/python_bases/#10-variables-locales-et-variables-globales","title":"10. Variables locales et variables globales","text":"<p>Consid\u00e9rons le programme suivant:</p> <p>\ud83d\udc0d Script Python<pre><code>def ma_fonc():\n    i = 5\nma_fonc()\nprint (i)\n</code></pre> Nous commen\u00e7ons par d\u00e9finir une fonction <code>ma_fonc</code> qui ne prend aucun param\u00e8tre et qui ne renvoie aucune valeur (absence du mot-clef <code>return</code>). Cette fonction attribue juste la valeur 5 a la variable ayant pour nom <code>i</code>.</p> <p>A la 3e ligne du programme, nous ex\u00e9cutons la fonction <code>ma_fonc</code>. </p> <p>Rappelons que la fonction <code>print</code> permet d'afficher \u00e0 l'\u00e9cran la valeur qui lui est pass\u00e9e en param\u00e8tre. La 4e ligne de ce programme permet donc d'afficher la valeur de la variable <code>i</code> \u00e0 l'\u00e9cran.</p> <p>On pourrait penser que ce programme va donc afficher 5 ! Pas du tout, nous avons le droit \u00e0 l'erreur suivante :</p> \ud83d\udc0d Console Python<pre><code>NameError: name 'i' is not defined\n</code></pre> <p>Le message d'erreur est suffisamment parlant, inutile de s'attarder dessus : la variable i n'est pas d\u00e9finie. A noter que cette erreur est d\u00e9clench\u00e9e par la 4e ligne (le <code>print</code>).</p> <p>Pourquoi cette erreur, la variable i est bien d\u00e9finie dans la fonction <code>ma_fonc</code> et la fonction <code>ma_fonc</code> est bien ex\u00e9cut\u00e9e, o\u00f9 est donc le probl\u00e8me ?</p> <p>En fait, la variable i est une variable dite locale : elle a \u00e9t\u00e9 d\u00e9finie dans une fonction et elle \"restera\" dans cette fonction. Une fois que l'ex\u00e9cution de la fonction sera termin\u00e9e, la variable i sera \"d\u00e9truite\" (supprim\u00e9e de la m\u00e9moire). Elle n'est donc pas accessible depuis \"l'ext\u00e9rieur\" de la fonction (ce qui explique le message d'erreur que nous obtenons, car le <code>print</code> est en dehors la fonction <code>ma_fonc</code>, la variable <code>i</code> n'est donc plus accessible).</p> <p>\u00c9tudions maintenant un cas un peu plus complexe :</p> <p>\ud83d\udc0d Script Python<pre><code>i = 3\ndef ma_fonc():\n    i = 5\nma_fonc()\nprint (i)  \n</code></pre> On pourrait s'attendre \u00e0 voir s'afficher la valeur 5 \u00e0 l'\u00e9cran. Pas du tout, nous ne rencontrons pas d'erreur cette fois, mais c'est la valeur 3 qui s'affiche \u00e0 l'\u00e9cran.</p> <p>En fait dans cet exemple nous avons 2 variables i diff\u00e9rentes : la variable i \"globale\" (celle qui a \u00e9t\u00e9 d\u00e9finie en dehors de toute fonction) et la variable i \"locale\" (celle qui a \u00e9t\u00e9 d\u00e9finie dans la fonction). Ces 2 variables portent le m\u00eame nom, mais sont diff\u00e9rentes (elles correspondent \u00e0 des cases m\u00e9moire diff\u00e9rentes). Au moment de l'ex\u00e9cution du <code>print</code> \u00e0 la 5e ligne seule la variable globale existe encore (celle d\u00e9finie \u00e0 la premi\u00e8re ligne du programme), d'o\u00f9 l'affichage du 3.</p> <p>Une variable globale peut \u00eatre \"utilis\u00e9e\" \u00e0 l'int\u00e9rieur d'une fonction :</p> <p>\ud83d\udc0d Script Python<pre><code>i = 3\ndef ma_fonc():\n    print (i)\nma_fonc()\n</code></pre> Attention, le <code>print</code> se situe dans la fonction (la ligne du <code>print</code> est bien indent\u00e9e)</p> <p>Ce programme permet d'afficher la valeur 3 \u00e0 l'\u00e9cran.</p> <p>Quand on cherche \u00e0 utiliser une variable dans une fonction, le syst\u00e8me va d'abord chercher si cette variable se \"trouve\" dans l'espace local de la fonction, puis, s'il ne la trouve pas dans cet espace local, le syst\u00e8me va aller rechercher la variable dans l'espace global. Pour le <code>print(i)</code> situ\u00e9 dans la fonction le syst\u00e8me ne trouve pas de variable i dans l'espace local de la fonction <code>ma_fonc</code>, il passe donc \u00e0 l'espace global et trouve la variable i (nous avons donc 3 qui s'affiche). </p> <p>Il est important de bien comprendre que dans la programme ci-dessous le syst\u00e8me trouve une variable i dans l'espace local de la fonction, la \"recherche\" de la variable i se serait arr\u00eat\u00e9e l\u00e0 :</p> <p>\ud83d\udc0d Script Python<pre><code>i = 3\ndef ma_fonc():\n    i = 5\n    print (i)\nma_fonc()\n</code></pre> et ce programme affiche la valeur 5 \u00e0 l'\u00e9cran. <code>i</code> a \u00e9t\u00e9 trouv\u00e9e dans l'espace local de la fonction <code>ma_fonc</code>, la recherche ne va donc pas plus loin (inutile de remonter jusqu'\u00e0 l'espace global)</p> <p>En revanche le programme ci-dessous g\u00e9n\u00e8re une erreur : \"UnboundLocalError: local variable 'i' referenced before assignment\"</p> \ud83d\udc0d Script Python<pre><code>i = 3\ndef ma_fonc():\n    i = i + 1\nma_fonc()\nprint(i)\n</code></pre> <p>Il n'est \u00e0 priori pas possible de modifier une variable globale (ici la variable <code>i</code>) dans une fonction.</p> <p>Pour pouvoir modifier une variable globale dans une fonction, il faut le d\u00e9clarer explicitement en utilisant le mot-clef <code>global</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>i = 3\ndef ma_fonc():\n    global i\n    i = i + 1\nma_fonc()\nprint(i)\n</code></pre> Ici, aucune erreur la valeur 4 est bien affich\u00e9e \u00e0 l'\u00e9cran.</p> <p>Il est fortement d\u00e9conseill\u00e9 de donner le m\u00eame nom \u00e0 une variable locale et \u00e0 une variable globale pour \u00e9viter ce genre de confusions.</p> <p>On \u00e9vitera \u00e9galement l'emploi du mot-clef <code>global</code> car cette utilisation peut entra\u00eener des \"effets de bord\".</p> <p>\u00c0 retenir</p> <p>Lorsqu'on \u00e9crit un programme, python cr\u00e9e un espace de noms ( namespace ) dans lequel les noms des variables et des fonctions d\u00e9finies dans ce programme sont stock\u00e9s.</p> <p>\u00c0 l'int\u00e9rieur de chaque fonction, il est possible de d\u00e9finir aussi des variables. Un nouvel espace de noms, compl\u00e8tement ind\u00e9pendant de l'espace de noms principal est cr\u00e9e pour chaque fonction.</p> <p>Par cons\u00e9quent, une variable d\u00e9finie \u00e0 l'int\u00e9rieur d'une fonction n'est pas accessible depuis le programme principal et elle n'existe plus lorsque l'ex\u00e9cution de la fonction est termin\u00e9e (m\u00eame si elle porte le m\u00eame nom qu'une variable du programme principal). On dit qu'il s'agit d'une variable locale.</p> <p>On parle d'effet de bord quand une fonction modifie l'\u00e9tat d'une variable globale. Dans notre exemple ci-dessus, la fonction <code>ma_fonc</code> modifie bien la valeur de <code>i</code> : avant l'ex\u00e9cution de <code>ma_fonc</code>, <code>i</code> a la valeur 3, apr\u00e8s l'ex\u00e9cution de la fonction <code>ma_fonc</code>, <code>i</code> est associ\u00e9 \u00e0 la valeur 4. Nous avons donc bien un effet de bord.</p> <p>Les effets de bords provoquent parfois des comportements non d\u00e9sir\u00e9s par le programmeur (\u00e9videmment dans des programmes tr\u00e8s complexes, pas dans des cas simplistes comme celui que nous venons de voir). Ils rendent aussi parfois les programmes difficilement lisibles (difficilement compr\u00e9hensibles). \u00c0 cause des effets de bord, on risque de se retrouver avec des variables qui auront des valeurs qui n'\u00e9taient pas pr\u00e9vues par le programmeur. On dit aussi qu'\u00e0 un instant donn\u00e9, l'\u00e9tat futur des variables est difficilement pr\u00e9visible \u00e0 cause des effets de bord. En r\u00e9sum\u00e9, on \u00e9vitera autant que possible l'utilisation du \"global\".</p> <p>Exercices</p> <p> Fiche d'exercices sur fonctions et la port\u00e9e des variables.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/","title":"Exercices (1)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Fiche d'exercices sur les variables, les affectations et les cha\u00eenes de caract\u00e8res.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-1","title":"Exercice 1","text":"<p>Dans la console interactive Python, taper successivement les commandes suivantes :</p> \ud83d\udc0d Script Python<pre><code>a, b, c = 3, 2.5, \"toto\"\nprint(a)\nprint(b)\nprint(c)\nprint(type(a))\nprint(type(b))\nprint(type(c))\n</code></pre> <p>Expliquer les r\u00e9sultats obtenus.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-2","title":"Exercice 2","text":"<p>On consid\u00e8re le script suivant :</p> \ud83d\udc0d Script Python<pre><code>a = 50\nb = 30\na = b + 10\nb = a * 2\na = b\nb = b - 5\n</code></pre> <p>Compl\u00e9ter le tableau d'\u00e9tat ci-dessous par les valeurs prises par les variables <code>a</code> et <code>b</code> \u00e0 chaque \u00e9tape.</p> Etape <code>a</code> <code>b</code> 1 2 3 4 5 6 <p>Remarque</p> <p>Les logiciels EduPython et Spyder permettent d'ex\u00e9cuter un programme pas \u00e0 pas en observant l'\u00e9volution des variables.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-3","title":"Exercice 3","text":"<p>Parmi les 8 noms de variables suivants, quels sont ceux qui ne sont pas accept\u00e9s par un programme Python (expliquer pourquoi) ?</p> prix.de.ma.voiture un-prix prix_de_ma_voiture 1prix prix de ma voiture prixen\u20ac prixdemavoiture prix1"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-4","title":"Exercice 4","text":"<p>Que va produire l'ex\u00e9cution du programme suivant ?</p> \ud83d\udc0d Script Python<pre><code>a = 100\nb = 50\na = b\nb = a + 10\nprint(a)\nprint(b)\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-5","title":"Exercice 5","text":"<p>Que va produire l'ex\u00e9cution du programme suivant ?</p> \ud83d\udc0d Script Python<pre><code>a = 100\na = a - 10\na = a * 2\na = a + 50\nprint(a)\nprint(\"a\")\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-6","title":"Exercice 6","text":"<p>Apr\u00e8s les affectations suivantes, quelles sont les valeurs des variables <code>a</code> et <code>b</code> ?</p> \ud83d\udc0d Script Python<pre><code>a = 1\nb = a + 5\na = 2 * b + 3\nb = 3 * a + 2\na = 2 * b + 3\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_1/#exercice-7","title":"Exercice 7","text":"<p>Corriger le programme ci-dessous pour qu'il effectue l'action indiqu\u00e9e en commentaires. Deux solutions diff\u00e9rentes sont attendues.</p> \ud83d\udc0d Script Python<pre><code># ce programme affiche la somme de a et de b\n\na = \"4\"\nb=\"5\"\nprint(\"La somme de\", a, \"et de\",b,\"est \u00e9gale \u00e0\", a + b)\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_2/","title":"Exercices (2)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Fiche d'exercices sur les instructions conditionnelles.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_2/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire un programme qui demande le poids, en grammes, d\u2019une lettre prioritaire destin\u00e9e \u00e0 la France et qui retourne le prix du timbre ad\u00e9quat. Vous pourrez consulter les tarifs postaux sur le site de la Poste.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_2/#exercice-2","title":"Exercice 2","text":"<p>On consid\u00e8re la fonction suivante \u00e9crite dans un script qui a \u00e9t\u00e9 ex\u00e9cut\u00e9.</p> \ud83d\udc0d Script Python<pre><code>def ma_fct(a,b):\n    if a &lt; 5 or b &gt; 2 :\n        return 42\n    else :\n        return 24\n</code></pre> <ol> <li>Dans la console interactive, on tape <code>ma_fct(6,3)</code>. Quel r\u00e9sultat obtient-on ?</li> <li>Quels valeurs de <code>b</code> peut-on choisir pour que l'appel <code>ma_fct(6,b)</code> retourne <code>24</code> ?</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_2/#exercice-3","title":"Exercice 3","text":"<p>On consid\u00e8re la fonction suivante \u00e9crite dans un script qui a \u00e9t\u00e9 ex\u00e9cut\u00e9.</p> \ud83d\udc0d Script Python<pre><code>def ma_fct(a,b):\n    if a &lt; 5 and b &gt; 2 :\n        return 42\n    else :\n        return 24\n</code></pre> <ol> <li>Dans la console interactive, on tape <code>ma_fct(6,3)</code>. Quel r\u00e9sultat obtient-on ?</li> <li>Quels valeurs de <code>b</code> peut-on choisir pour que l'appel <code>ma_fct(6,b)</code> retourne <code>42</code> ?</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_2/#exercice-4","title":"Exercice 4","text":"<p>On consid\u00e8re le script suivant :</p> \ud83d\udc0d Script Python<pre><code>a = 10\nb = int(input())\nif b &lt; 10 :\n    if b &gt;= 5 :\n        a = a + 2\n    else :\n        a = a - 2\n    a = a * 2\na = a - 1\n</code></pre> <ol> <li>Quelle est la valeur finale de <code>a</code> avec <code>b=12</code> ?</li> <li>Quelle est la valeur finale de <code>a</code> avec <code>b=6</code> ?</li> </ol> <p>On trouvera d'autres exercices dans la fiche n\u00b04</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/","title":"Exercices (3)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Fiche d'exercices sur boucles.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#boucles-while","title":"Boucles <code>while</code>","text":""},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-1","title":"Exercice 1","text":"<p>On consid\u00e8re le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>A = 10\nwhile A &lt; 2000 :\n    A = A * 2\n    A = A + 3\nA = A - 5\n</code></pre> <ol> <li>Donner les dix premi\u00e8res valeurs successives prises par la variable A.</li> <li>V\u00e9rifier avec l\u2019ordinateur et l\u2019onglet variables ou l'explorateur de variables.</li> <li>Combien a-t-on fait de tours dans la boucle <code>while</code> lorsque le programme se termine ?</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-2","title":"Exercice 2","text":"<p>On consid\u00e8re le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>t = 1\ni = 0\nwhile t &lt; 100 :\n    t = t + 2 * i\n    i = i + 1\n</code></pre> <ol> <li>Dresser un tableau d'\u00e9tat faisant appara\u00eetre les valeurs successives des variables <code>t</code> et <code>i</code>.</li> <li>Combien a-t-on fait de tours dans la boucle <code>while</code> quand le programme se termine ?</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-3","title":"Exercice 3","text":"<p>Une personne verse en 2017 la somme de 500 \u20ac sur un compte bancaire.</p> <p>Cette somme augmente de 3,2% chaque ann\u00e9e.</p> <p>\u00c9crire un programme qui affiche la somme qui se trouve sur le compte chaque ann\u00e9e depuis 2017 jusqu\u2019\u00e0 ce que cette somme d\u00e9passe 1 000 \u20ac, sous la forme suivante :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; \nEn 2018, le capital sera de 516 \u20ac.\nEn 2019, le capital sera de 512.5120000000001 \u20ac.\n. . .\nEn 2040, le capital sera de 1031.8178626526687 \u20ac.\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-4","title":"Exercice 4","text":"<p>On donne ci dessous quatre programmes comportant une boucle <code>while</code>. Ces boucles se terminent-elles ou sont-elles des boucles infinies ?</p> \ud83d\udc0d Script Python<pre><code># Programme 1\nnombre = 10\nwhile nombre!=27 :\n    nombre = nombre+2\n</code></pre> \ud83d\udc0d Script Python<pre><code># Programme 2\ni = 0\nwhile i&lt;10 :\n    print(i+1)\n</code></pre> \ud83d\udc0d Script Python<pre><code># Programme 3\ni = 2\nwhile i&lt;10 :\n    i = 0\n    i = i+1\n</code></pre> \ud83d\udc0d Script Python<pre><code># Programme 4\ni = 0\nwhile i&lt;1000000 :\n    i = i+0.001\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-5","title":"Exercice 5","text":"<p>\u00c9crire un programme qui simule le lancer de trois d\u00e9s et qui recommence jusqu\u2019\u00e0 ce qu\u2019on obtienne un triple 6, et qui affiche le nombre d\u2019essais qui ont \u00e9t\u00e9 n\u00e9cessaires pour obtenir ce r\u00e9sultat, de la mani\u00e8re pr\u00e9sent\u00e9e ci-dessous :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; \nJ\u2019obtiens 5 4 2 Perdu !\nJ\u2019obtiens 6 1 6 Perdu !\n. . .\nJ\u2019obtiens 6 6 6 Gagn\u00e9 en 124 essais !\n</code></pre> <p>Indication</p> <p>La fonction <code>randint</code> de la biblioth\u00e8que <code>random</code> g\u00e9n\u00e8re un entier al\u00e9atoire compris au sens large entre les deux entiers donn\u00e9s en argument. Par exemple <code>random(8,18)</code> renvoie un entier al\u00e9atoire compris au sens large entre 8 et 18. Pour pouvoir \u00eatre utilis\u00e9e, cette fonction doit \u00eatre import\u00e9e en tapant par exemple <code>from random import randint</code> en d\u00e9but de programme.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-6","title":"Exercice 6","text":"<p>Le client d\u2019une banque se pr\u00e9sente devant un automate pour consulter son relev\u00e9 de compte.</p> <p>Pour y avoir acc\u00e8s, il doit saisir son code personnel qui est compos\u00e9 de 4 chiffres. Il devra ensuite confirmer sa saisie.</p> <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur de saisir son code, puis de confirmer sa saisie. Si les deux saisies sont diff\u00e9rentes, un message d\u2019erreur sera affich\u00e9 et il devra recommencer, et si au bout de 10 essais il n\u2019a toujours pas r\u00e9ussi, on lui dira que l\u2019acc\u00e8s est refus\u00e9.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#boucles-for","title":"Boucles <code>for</code>","text":""},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-7","title":"Exercice 7","text":"<p>\u00c9crire un programme qui affiche 50 fois les phrases suivantes :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;\nJe ne dois pas bavarder \nNi discuter\nNi chuchoter\nJe ne dois pas bavarder \nNi discuter\nNi chuchoter\n. . .\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-8","title":"Exercice 8","text":"<p>\u00c9crire un programme qui affiche la phrase \"Je rigole !\", puis \"HaHaHa\" 50 fois sur une m\u00eame ligne :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;\nJe rigole !\nHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHaHa . . .\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-9","title":"Exercice 9","text":"<p>\u00c9crire un programme qui affiche la phrase \"Punition d\u2019Albert :\", puis 20 fois la phrase \"Je ne dois pas oublier ma trousse.\", puis 20 fois la phrase \"Je ne dois pas oublier mon cahier.\", puis la phrase \"C\u2019est enfin fini !\".</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;\nPunition d\u2019Albert :\nJe ne dois pas oublier ma trousse. \nJe ne dois pas oublier ma trousse. \n    . . .\nJe ne dois pas oublier mon cahier. \nJe ne dois pas oublier mon cahier.\n    . . .\nC\u2019est enfin fini !\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-10","title":"Exercice 10","text":"<p>Dans cet exercice, r\u00e9pondre \u00e0 chaque question en \u00e9crivant une programme utilisant une boucle <code>for</code>, puis un programme utilisant une boucle <code>while</code>.</p> <ol> <li>\u00c9crire un programme qui affiche les 20 premiers termes de la table de multiplication par 6.</li> <li>\u00c9crire un programme qui affiche une suite de 12 nombres dont chacun est \u00e9gal au triple du pr\u00e9c\u00e9dent.</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-11","title":"Exercice 11","text":"<p>\u00c9crire un programme qui affiche un \u00ab damier \u00bb de croix et de ronds de 40 lignes et 40 colonnes (sans utiliser les op\u00e9rations sur les cha\u00eenes de caract\u00e8res mais en utilisant deux boucles imbriqu\u00e9es) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;\nxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxo\noxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox\nxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxo\noxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox\n...\n</code></pre> <p>Indication</p> <p>Pour afficher une cha\u00eene de caract\u00e8res sans revenir \u00e0 la ligne, on utilise : <code>print(\"toto\", end=\"\")</code>.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-12","title":"Exercice 12","text":"<p>\u00c9crire un programme qui affiche un \u00ab rectangle \u00bb de croix creux de largeur 20 et hauteur 8 : (sans utiliser les op\u00e9rations sur les cha\u00eenes de caract\u00e8res) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;\nxxxxxxxxxxxxxxxxxxxx\nx                  x\nx                  x\nx                  x\nx                  x\nx                  x\nx                  x\nxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_3/#exercice-13","title":"Exercice 13","text":"<p>On consid\u00e8re le script suivant :</p> \ud83d\udc0d Script Python<pre><code>for compteur1 in range(1,5,1):\n    print(\"No\")\n    for compteur2 in range(1,4,1):\n        print(\"Plouf\")\n    print(\"Gloub\")\nprint(\"Yes\")\n</code></pre> <ol> <li>Combien de fois affiche-t-il \"No\" ? Combien de fois affiche-t-il \"Plouf\" ?</li> <li>Combien de fois affiche-t-il \"Gloub\" ? Combien de fois affiche-t-il \"Yes\" ?</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/","title":"Exercices (4)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Fiche d'exercices sur fonctions et la port\u00e9e des variables</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-1","title":"Exercice 1","text":"<ol> <li>\u00c9crire une fonction <code>prixTTC</code> qui calcule un prix TVA comprise (au taux de 19,6 %) en fonction du prix hors taxes.</li> <li>\u00c9crire une proc\u00e9dure qui \u00e9crit \u00e0 l\u2019\u00e9cran 50 fois la phrase \"Je ne dois pas faire le pitre en classe\".</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-2","title":"Exercice 2","text":"<ol> <li>Entrer le programme suivant dans une fen\u00eatre de l\u2019\u00e9diteur.</li> </ol> <p>\ud83d\udc0d Script Python<pre><code>#  definition  d\u2019une  proc\u00e9dure\ndef ma_proc() :\n    phrase = \"Il fait beau\" \n    print(phrase)\n\n#  programme  principal \nphrase = \"Il y a du soleil\" \nma_proc() \nprint(phrase)\n</code></pre> 2.  Enregistrer et ex\u00e9cuter ce programme. Expliquer pr\u00e9cis\u00e9ment ce qu\u2019il se passe.</p>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire une proc\u00e9dure <code>lapin(nom)</code> qui affiche un lapin tenant une pancarte :</p> \ud83d\udc0d Console Python<pre><code>|\uffe3\uffe3\uffe3\uffe3\uffe3\uffe3\uffe3\uffe3\uffe3|\n| Bonjour       |\n| nom !         |       \n|_______________|\n        ||\n(\\__/) ||\n(\u2022\u3145\u2022) || \n/ \u3000 \u3065\"\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-4","title":"Exercice 4","text":"<p>On consid\u00e8re le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef LancerDeuxDes(): \n    print(\"Lancer de deux d\u00e9s ...\")\n    de1 = randint(1, 6)\n    de2 = randint(1, 6)\n    total = de1 + de2\n    print(f\"J'obtiens un total de {total} !\")\n\nLancerDeuxDes( )\nif total == 2:\n    print(\"C'est un petit score !\")\nelif total == 12:\n    print(\"J'ai fait mon maximum !\")\n</code></pre> <ol> <li>Sans ordinateur : Essayer de pr\u00e9voir ce qu'il va se passer \u00e0 l'ex\u00e9cution de ce programme.</li> <li>Taper ce programme dans une fen\u00eatre de l'\u00e9diteur et l'ex\u00e9cuter. Expliquer ce qu'il se passe.</li> <li>Modifier le programme pour qu'il ait le comportement attendu.</li> </ol>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-5","title":"Exercice 5","text":"<p>La proc\u00e9dure suivante affiche une ligne d\u2019\u00e9toiles :</p> \ud83d\udc0d Script Python<pre><code>def LigneEtoiles(NombreEtoiles) :\n    for i in range(NombreEtoiles) :\n        print(\"*\", end = \"\")\n    print()\n</code></pre> <p>Utiliser cette proc\u00e9dure pour \u00e9crire une deuxi\u00e8me proc\u00e9dure : <code>def  TriangleEtoiles(n)</code> qui affiche un triangle d\u2019\u00e9toiles comportant \\(n\\) \u00e9toiles sur la premi\u00e8re ligne. </p> <p>Par exemple, l\u2019appel : <code>TriangleEtoiles(4)</code> affichera :</p> \ud83d\udc0d Console Python<pre><code>****\n***\n**\n*\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_exos_4/#exercice-6","title":"Exercice 6","text":"<p>Le jeu du TicTacToe (morpion) se joue sur une grille de 3x3 cases, num\u00e9rot\u00e9es de 1 \u00e0 9 (de gauche \u00e0 droite et de haut en bas).</p> <p>Les cases sont au d\u00e9part remplies avec des chiffres (symboles \"1\" \u00e0 \"9\"), qui seront au fur et \u00e0 mesure du jeu remplac\u00e9s par le symbole d'un des deux joueurs (\"X\" ou \"O\").</p> <p>Les \u00e9tats des cases sont enregistr\u00e9s dans 9 variables <code>c1</code> \u00e0 <code>c9</code>.</p> <p>\u00c9crire une proc\u00e9dure <code>AfficheGrille(c1,c2,c3,c4,c5,c6,c7,c8,c9)</code> qui prend en param\u00e8tres les \u00e9tats des cases <code>c1</code> \u00e0 <code>c9</code> et affiche la grille.</p> <p>Par exemple, l\u2019appel <code>AfficheGrille(1,2,3,4,5,6,7,8,9)</code> affichera :</p> \ud83d\udc0d Console Python<pre><code>----------\n 1 | 2 | 3 \n----------\n 4 | 5 | 6 \n----------\n 7 | 8 | 9 \n----------\n</code></pre>"},{"location":"premiere/01_langages/1_bases/python_bases_quiz/","title":"Quiz sur les bases de Python","text":""},{"location":"premiere/01_langages/1_bases/supplements/","title":"Exercices suppl\u00e9mentaires","text":"<p>Pour vous entra\u00eener ou pour v\u00e9rifier que vous ma\u00eetrisez les bases, voici des notebooks Jupyter r\u00e9alis\u00e9s par un coll\u00e8gue l\u00e9g\u00e8rement modifi\u00e9s ici.</p> <ul> <li>Partie 1 : variables et affectations</li> <li>Partie 2 : instructions conditionnelles</li> <li>Partie 3 : boucles</li> <li>Partie 4 : les fonctions</li> <li>Partie 5 : les cha\u00eenes de caract\u00e8res</li> </ul>"},{"location":"premiere/01_langages/2_specif/essentiel/","title":"L'essentiel : Sp\u00e9cification et mise au point","text":""},{"location":"premiere/01_langages/2_specif/essentiel/#1-prototyper-une-fonction","title":"1. Prototyper une fonction","text":"<p>D\u00e9finition</p> <p>Sp\u00e9cifier une fonction, c'est la documenter en :</p> <ul> <li>d\u00e9crivant ce qu'elle fait</li> <li>\u00e9num\u00e9rant les entr\u00e9es attendues et leur type</li> <li>pr\u00e9cisant des conditions sur les entr\u00e9es : on parle de pr\u00e9conditions</li> <li>donnant le type de la valeur retourn\u00e9e</li> <li>pr\u00e9cisant des conditions sur la valeur retourn\u00e9e : on parle de postconditions</li> </ul> <p>On peut pr\u00e9ciser les types attendus pour les entr\u00e9es et le type de la sortie avec des annotations simples, compl\u00e9t\u00e9s par une docstring.</p> \ud83d\udc0d Script Python<pre><code>def add_trois_nombres(m: int, n: int, p: int) -&gt; int:\n\"\"\"Renvoie la somme des trois entiers m, n et p\"\"\"\n    return m + n + p\n</code></pre> <p>La cha\u00eene de documentation (docstring) est accessible par la fonction <code>help()</code>.</p> <p>La programmation d\u00e9fensive permet de v\u00e9rifier les pr\u00e9conditions : <code>assert condition, message</code>.</p>"},{"location":"premiere/01_langages/2_specif/essentiel/#2-mise-au-point-de-programmes","title":"2. Mise au point de programmes","text":"<p>Pour tester les postconditions, la commande <code>assert</code> est aussi utile et permet de cr\u00e9er un jeu de tests unitaires.</p> <p>Le mode d\u00e9bogage de l'IDE utilis\u00e9 est aussi utile pour v\u00e9rifier les postconditions.</p>"},{"location":"premiere/01_langages/2_specif/specif_quiz/","title":"Quiz","text":""},{"location":"premiere/01_langages/2_specif/specif_tests/","title":"Sp\u00e9cification et mise au point (cours)","text":""},{"location":"premiere/01_langages/2_specif/specif_tests/#1-prototyper-une-fonction","title":"1. Prototyper une fonction","text":""},{"location":"premiere/01_langages/2_specif/specif_tests/#fonction-comme-boite-noire","title":"Fonction comme bo\u00eete noire","text":"<p>Une fonction peut \u00eatre consid\u00e9r\u00e9e comme une bo\u00eete noire qui, \u00e0 partir de donn\u00e9es, renvoie une sortie.</p> <pre><code>graph LR\n  A(Entr\u00e9es) --&gt; F[Fonction];\n  F --&gt; B(Sortie);\n  style F fill:#000,color:#fff\n  style A fill:#fff\n  style B fill:#fff</code></pre> <p>La fonction ne g\u00e8re pas la provenance des entr\u00e9es ni la destination des sorties (variable, affichage, fichier, ...) : elle peut donc \u00eatre utilis\u00e9e dans diff\u00e9rentes configurations d'entr\u00e9es/sorties.</p> <p>\u00c0 savoir</p> <p>Les entr\u00e9es d'une fonction sont appel\u00e9es ses param\u00e8tres ou ses arguments.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests/#specifications-dune-fonction","title":"Sp\u00e9cifications d'une fonction","text":"<p>D\u00e9finition</p> <p>Sp\u00e9cifier une fonction, c'est la documenter en :</p> <ul> <li>d\u00e9crivant ce qu'elle fait</li> <li>\u00e9num\u00e9rant les entr\u00e9es attendues et leur type</li> <li>pr\u00e9cisant des conditions sur les entr\u00e9es : on parle de pr\u00e9conditions</li> <li>donnant le type de la valeur retourn\u00e9e</li> <li>pr\u00e9cisant des conditions sur la valeur retourn\u00e9e : on parle de postconditions</li> </ul> <p>En Python, la sp\u00e9cification d'une fonction se fait juste sous sa signature sous la forme d'une cha\u00eene de caract\u00e8res encadr\u00e9e de triples guillemets (appel\u00e9e en anglais docstring), comme dans l'exemple ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def add_trois_nombres(m, n, p):\n\"\"\"\n    Renvoie la somme des trois entiers m, n et p\n\n    Parameters\n    ----------\n    m : type int\n    n : type int\n    p : type int\n\n    Returns\n    -------\n    type int\n\n    \"\"\"\n    return m + n + p\n</code></pre> <p>Info</p> <p>Dans l'\u00e9diteur Spyder, des sp\u00e9cifications suivant le sch\u00e9ma ci-dessus peuvent \u00eatre automatiquement g\u00e9n\u00e9r\u00e9es juste apr\u00e8s avoir tap\u00e9 les triples guillemets <code>\"\"\"</code>.</p> <p>Depuis la version 3.5 de Python, on peut pr\u00e9ciser les types attendus pour les entr\u00e9es et le type de la sortie avec des annotations simples. Cela permet d'all\u00e9ger la sp\u00e9cification et d'\u00e9crire une docstring plus compacte.</p> \ud83d\udc0d Script Python<pre><code>def add_trois_nombres(m: int, n: int, p: int) -&gt; int:\n\"\"\"Renvoie la somme des trois entiers m, n et p\"\"\"\n    return m + n + p\n</code></pre> <p>La cha\u00eene de documentation d'une fonction est utilis\u00e9e par la fonction <code>help</code> de Python pour renseigner l'utilisateur.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt;help(add_trois_nombres)\nHelp on function add_trois_nombres in module __main__:\n\nadd_trois_nombres(m: int, n: int, p: int) -&gt; int\n    Renvoie la somme des trois entiers m, n et p\n</code></pre> <p>Les fonctions Python pr\u00e9d\u00e9finies poss\u00e8dent \u00e9galement une sp\u00e9cification que l'on peut consulter avec la fonction <code>help</code>.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests/#verification-des-preconditions","title":"V\u00e9rification des pr\u00e9conditions","text":"<p>La sp\u00e9cification d'une fonction telle qu'elle est pr\u00e9sent\u00e9e ci-dessus est juste indicative et n'emp\u00eache pas un utilisateur de notre fonction de l'appeler avec des param\u00e8tres qui ne v\u00e9rifient pas les pr\u00e9conditions, ce qui peut, dans la suite du programme, engendrer des erreurs.</p> <p>Il est possible de v\u00e9rifier les pr\u00e9conditions \u00e0 l'int\u00e9rieur de la fonction avec l'instruction <code>assert</code>.</p> <p>Une telle instruction se compose d'une condition (une expression bool\u00e9enne) \u00e9ventuellement suivie d'une virgule et d'une phrase en langue naturelle, sous forme d'une cha\u00eene de caract\u00e8res. L'instruction <code>assert</code> teste si sa condition est satisfaite. Si c'est le cas, elle ne fait rien et sinon elle arr\u00eate imm\u00e9diatement l'ex\u00e9cution du programme en affichant \u00e9ventuellement la phrase qui lui est associ\u00e9e.</p> <p>Tester par exemple la fonction ci-dessous avec des arguments entiers, puis avec des arguments non entiers.</p> \ud83d\udc0d Script Python<pre><code>def add_trois_nombres(m: int, n: int, p: int) -&gt; int:\n\"\"\"Renvoie la somme des trois entiers n, m et p\"\"\"\n    assert type(m) == int, 'm doit \u00eatre un entier'\n    assert type(n) == int, 'n doit \u00eatre un entier'\n    assert type(p) == int, 'p doit \u00eatre un entier'\n    return m + n + p\n</code></pre> <p>Info</p> <p>Lorsqu'on v\u00e9rifie les pr\u00e9conditions sur les arguments au d\u00e9but du code d'une fonction, on parle de programmation d\u00e9fensive.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests/#2-mise-au-point-de-programmes","title":"2. Mise au point de programmes","text":""},{"location":"premiere/01_langages/2_specif/specif_tests/#jeux-de-tests","title":"Jeux de tests","text":"<p>Lors du d\u00e9veloppement d'un programme, il est n\u00e9cessaire de savoir localiser les erreurs afin d'en comprendre l'origine et de pouvoir les corriger.</p> <p>Outre les messages d'erreurs standard retourn\u00e9s pas Python, l'utilisation d'assertion sur des jeux de tests permet aussi d'aider \u00e0 la mise au point d'une fonction ou d'un programme.</p> <p>Il s'agit de tester les postconditions de la fonction sur une s\u00e9rie d'exemples bien choisis. On parle alors de tests unitaires. Si l'un des tests unitaires est faux, alors il y a une erreur dans la fonction. Si tous les tests unitaires sont valid\u00e9s, il reste des risques de bugs car un jeu de tests ne peut en g\u00e9n\u00e9ral pas couvrir toutes les possibilit\u00e9s existantes.</p> <p>On peut rassembler ces tests unitaires dans une fonction ou un module.</p> \ud83d\udc0d Script Python<pre><code>def add_trois_nombres(m: int, n: int, p: int) -&gt; int:\n\"\"\"Renvoie la somme des trois entiers n, m et p\"\"\"\n    assert type(m) == int, 'm doit \u00eatre un entier'\n    assert type(n) == int, 'n doit \u00eatre un entier'\n    assert type(p) == int, 'p doit \u00eatre un entier'\n    return m + n + p\n\n\ndef test_add():\n\"\"\"Jeu de tests unitaires pour la fonction add_trois_nombres\"\"\"\n    assert add_trois_nombres(1, 2, 3) == 6\n    assert add_trois_nombres(4, 5, 6) == 15\n    assert add_trois_nombres(7, 8, 9) == 24\n    print(\"Tests unitaires r\u00e9ussis\")\n\n\ntest_add()\n</code></pre> <p>Remarques et compl\u00e9ments</p> <p>Si l'une des instructions <code>assert</code> n'\u00e9tait pas v\u00e9rifi\u00e9e, alors l'ex\u00e9cution de la fonction de test serait interrompue et le message final se serait pas affich\u00e9.</p> <p>On peut traiter de fa\u00e7on plus fine les erreurs dans un script Python en utilisant les instructions du type :</p> \ud83d\udc0d Script Python<pre><code>try:\n    instruction1\nexcept nom_de_l_exception:\n    instruction2\n</code></pre> <p>o\u00f9 <code>nom_de_l_exception</code> est une des exceptions (erreurs) natives de Python dont la liste se trouve dans la documentation.</p> <p>Pour plus d'informations sur <code>try ... except</code>, voir la documentation.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests/#utilisation-des-fonctionnalites-de-lide","title":"Utilisation des fonctionnalit\u00e9s de l'IDE","text":"<p>Selon l'\u00e9diteur utilis\u00e9 pour \u00e9crire le programme, il est souvent possible d'ex\u00e9cuter un programme an mode d\u00e9bogage (debug), pas \u00e0 pas, et d'observer en temps r\u00e9el l'\u00e9volution du contenu des variables. Ces fonctionnalit\u00e9s facilitent grandement la mise au point d'un programme.</p> <p></p>"},{"location":"premiere/01_langages/2_specif/specif_tests/#documentation-du-programme","title":"Documentation du programme","text":"<p>Lors du d\u00e9veloppement d'un programme ou d'un projet, il est souvent utile, pour comprendre et corriger des erreurs, d'ajouter dans le code des sorties et des affichages (fonction <code>print</code>) qui peuvent permettre de conna\u00eetre l'\u00e9tat d'une variable particuli\u00e8re \u00e0 un endroit pr\u00e9cis du programme.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Fiche d'exercices sur la sp\u00e9cification et la mise au point des fonctions.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/#exercice-1","title":"Exercice 1","text":"<ol> <li>Dans la console Python, importer toutes les fonctions du module <code>statistics</code> qui, comme son nom l'indique, permet de r\u00e9aliser quelques calculs statistiques !</li> <li>Taper ensuite les commandes permettant d'afficher les sp\u00e9cifications des fonctions <code>mean</code> (calcul de la moyenne), <code>median</code> (calcul de la m\u00e9diane) et <code>quantiles</code> (calcul des quantiles).</li> <li>Recopier ces sp\u00e9cifications.</li> </ol>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/#exercice-2","title":"Exercice 2","text":"<p>La fonction <code>punition()</code> affiche une phrase de punition un certain nombre de fois donn\u00e9 en param\u00e8tre.</p> \ud83d\udc0d Script Python<pre><code>def punition(nombrecopies) : \n    for compteur in range (1,nombrecopies+1,1) :\n        print(\"Je ne dois pas bavarder en classe.\")\n</code></pre> <ol> <li> <p>Parmi les appels suivants, lesquels vont provoquer une erreur ?</p> <ul> <li><code>punition(\"Marcello\")</code></li> <li><code>punition(200)</code></li> <li><code>punition( )</code></li> <li><code>punition(3.5)</code></li> <li><code>punition(-10)</code></li> </ul> </li> <li> <p>Ajouter dans la fonction un <code>assert</code> de pr\u00e9condition avec une phrase d\u2019erreur et le tester.</p> </li> </ol>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/#exercice-3","title":"Exercice 3","text":"<p>L\u2019Indice de Masse Corporelle se calcule par la formule \\(IMC = \\frac{masse}{taille^2}\\), o\u00f9 la masse est en kilogrammes et la taille en m\u00e8tres. Un IMC est consid\u00e9r\u00e9 comme normal s\u2019il est compris entre 18,5 et 25. En dessous de 18,5, la personne est en sous-poids et au-dessus de 25 elle est en sur-poids.</p> <ol> <li>\u00c9crire une fonction d\u2019en-t\u00eate <code>imc(m, t)</code> qui renvoie la classification de l\u2019IMC correspondant \u00e0 une masse de <code>m</code> kilogrammes et une taille de <code>t</code> m\u00e8tres : classe 0 pour sous-poids, 1 pour normal et 2 pour surpoids.</li> <li>D\u00e9tailler pr\u00e9cis\u00e9ment la sp\u00e9cification de cette fonction et proposer des pr\u00e9conditions pertinentes \u00e0 tester.</li> <li>\u00c9crire une fonction <code>test_IMC()</code> mettant en oeuvre un jeu de tests unitaires pour la fonction <code>imc(m, t)</code>.</li> </ol>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire une fonction <code>mention(note)</code> et sa sp\u00e9cification qui prend en param\u00e8tre une note et renvoie la cha\u00eene de caract\u00e8res \u2019R\u2019 si \\(note &lt; 10\\), \u2019A\u2019 si \\(10 \\leqslant note &lt; 12\\), \u2019AB\u2019 si \\(12\\leqslant note &lt; 14\\), \u2019B\u2019 si \\(14 \\leqslant note &lt; 16\\) et \u2019TB\u2019 sinon.</p> <p>On v\u00e9rifiera d\u2019abord que la note pass\u00e9e en param\u00e8tre est comprise entre 0 et 20.</p> <p>Proposer un jeu de tests unitaires pour cette fonction.</p>"},{"location":"premiere/01_langages/2_specif/specif_tests_exos/#corriges","title":"Corrig\u00e9s","text":"<p>Voir le corrig\u00e9</p>"},{"location":"premiere/01_langages/2_specif/test_IDE/","title":"test IDE","text":"panneau 1panneau 2panneau 3 <p>contenu 1...</p> <p>contenu 2...</p> <p>contenu 3...</p> <p>{{ IDE('exo1', MAX = 3) }}</p>"},{"location":"premiere/01_langages/3_langages/essentiel/","title":"L'essentiel","text":"<p>De nombreux langages de programmation existent et ont \u00e9volu\u00e9 au cours su temps.</p> <p>Les langages les plus populaires \u00e0 l'heure actuelle sont Python, C et Java.</p> <p>Ces langages sont divers : certains sont plus adapt\u00e9s \u00e0 un certaines m\u00e9thodes de programmation que d'autres, certains imposent des accolades, des points virgules, d'autres des indentations.</p> <p>Ces langages pr\u00e9sentent cependant une certaine unit\u00e9 : on retrouve les variables et les affectations, les instructions conditionnelles, les boucles.</p>"},{"location":"premiere/01_langages/3_langages/langages/","title":"3. Diversit\u00e9 et unit\u00e9 des langages de programmation","text":"<p>Il existe de tr\u00e8s nombreux langages de programmation diff\u00e9rents. Chaque langage a ses particularit\u00e9s propres, mais certaines ressemblances peuvent \u00e9galement \u00eatre observ\u00e9es.</p> <p>Voici un arbre g\u00e9n\u00e9alogique des principaux langages, tir\u00e9 des documents d'accompagnement du programme de premi\u00e8re :</p> <p></p>"},{"location":"premiere/01_langages/3_langages/langages/#1-popularite-des-principaux-langages","title":"1. Popularit\u00e9 des principaux langages","text":"<p>L'entreprise n\u00e9erlandaise TIOBE propose un indice de popularit\u00e9 des principaux langages de programmation. Voici comment cet indice est pr\u00e9sent\u00e9 sur son site :</p> <p>Citation</p> <p>L\u2019indice TIOBE Programming Community est un indicateur de la popularit\u00e9 des langages de programmation. L\u2019indice est mis \u00e0 jour une fois par mois. Les \u00e9valuations sont bas\u00e9es sur le nombre d\u2019ing\u00e9nieurs qualifi\u00e9s dans l'utilisation de chaque langage dans le monde entier, de cours et de fournisseurs tiers. Les moteurs de recherche populaires tels que Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube et Baidu sont utilis\u00e9s pour calculer les \u00e9valuations. Il est important de noter que l\u2019indice TIOBE ne concerne pas le meilleur langage de programmation ou le langage dans lequel la plupart des lignes de code ont \u00e9t\u00e9 \u00e9crites.</p> <p>L\u2019indice peut \u00eatre utilis\u00e9 pour v\u00e9rifier si vos comp\u00e9tences en programmation sont toujours \u00e0 jour ou pour prendre une d\u00e9cision strat\u00e9gique sur le langage de programmation \u00e0 adopter lorsque vous commencez \u00e0 construire un nouveau syst\u00e8me logiciel. La d\u00e9finition de l\u2019indice TIOBE peut \u00eatre trouv\u00e9e ici.</p> <p>Voici le classement des dix premiers langages selon l'indice TIOBE en mai 2022 et le graphique de son \u00e9volution :</p> <p></p> <p></p>"},{"location":"premiere/01_langages/3_langages/langages/#2-differentes-implementations-dun-meme-algorithme","title":"2. Diff\u00e9rentes impl\u00e9mentations d'un m\u00eame algorithme","text":"<p>Pour d\u00e9couvrir et comparer quelques langages de programmation, nous allons nous int\u00e9resser \u00e0 l'algorithme suivant dont l'objet est de tester si un nombre entier positif \\(n\\) donn\u00e9 en argument est premier ou non. On proc\u00e8de pour cela en testant la divisibilit\u00e9 par les entiers inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(\\sqrt{n}\\). Si \\(n\\) ne poss\u00e8de aucun diviseur (autre que 1) inf\u00e9rieur ou \u00e9gal \u00e0 \\(\\sqrt{n}\\), alors \\(n\\) est premier.</p> <p>L'algorithme repr\u00e9sent\u00e9 ci dessous (on traite directement le cas \\(n=2\\) et on \u00e9limine tous les multiples de 2):</p> <p>Algorithme en pseudo-code</p> Pseudo-code<pre><code>Fonction is_prime(n)\n    D\u00e9but\n        Si n = 2, Alors\n            Retourne Vrai\n        FinSi\n        Si n &lt; 2 ou 2 divise n, Alors\n            Retourne Faux\n        FinSi\n        Pour k variant de 3 \u00e0 la partie enti\u00e8re de racine_carr\u00e9e(n), avec un pas de 2, Faire\n            Si k divise n, alors\n                Retourne Faux\n            FinSi\n        FinPour\n        Retourne Vrai\n    Fin\n</code></pre> <p>Voici maintenant sa traduction dans quelques langages de programmation. \u00c0 chaque fois, nous avons essay\u00e9 de suivre au plus pr\u00e8s la structure de programmation de l'algorithme en pseudo-code.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n &lt; 2 or n % 2 == 0:\n        return False\n    for k in range(3, int(sqrt(n))+1, 2):\n        if n % k == 0:\n            return False\n    return True\n</code></pre> <p>Dans le script ci-dessous, \u00e9crit en C, on retrouve le m\u00eame algorithme. Le code fonctionne en C ou en C++ (on peut consid\u00e9rer que C est un sous-ensemble de C++). (Fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> C ou C++<pre><code>#include &lt;math.h&gt;\n\nbool is_prime(unsigned int n)\n{\nunsigned int k;\nif (n == 2) return true;\nif (n &lt; 2 || n % 2 == 0) return false;\nfor (k = 3; k &lt;= sqrt(n) + 1; k += 2)\nif (n % k == 0) return false;\nreturn true;\n}\n</code></pre> <p>La m\u00eame chose en C# (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> C#<pre><code>using static System.Math;\n\nstatic bool is_Prime(int n)\n{\nif (n == 2) return true;\nif (n &lt; 2 || n % 2 == 0) return false;\nfor (int k = 3; k &lt;= Math.Sqrt(n) + 1; k += 2)            if (n % k == 0) return false;            return true;\n}\n</code></pre> <p>Passons \u00e0 Java (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> Java<pre><code>public static boolean is_prime(long n){\nif(n == 2){\nreturn true;\n}\nelse if(n &lt; 2 || n % 2 == 0){\nreturn false;\n}\nfor(long k= 3; k &lt;= Math.sqrt(n) + 1; k+= 2){\nif(n % k == 0){ return false; }\n}\nreturn true;\n}\n</code></pre> <p>Voici maintenant un peu de Javascript (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> JavaScript<pre><code>function is_prime(n) {\nif (n == 2) {\nreturn true;\n} else if ((n &lt; 2) || (n % 2 == 0)) {\nreturn false;\n} else {\nfor (var k = 3; k &lt;= Math.sqrt(n); k += 2) {\nif (n % k == 0)\nreturn false;\n}\nreturn true;\n}\n}\n</code></pre> <p>En Basic (version visual Basic) (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> VBScript<pre><code>Function is_prime(n)\nIf n = 2 Then\nis_prime = True\nElseIf n &lt; 2 Or n Mod 2 = 0 Then\nis_prime = False\nElse\nis_prime = True\nFor k = 3 To Int(Math.Sqrt(n)) + 1 Step 2\nIf n Mod k = 0 Then\nis_prime = False\nExit For\nEnd If\nNext\nEnd If\nEnd Function\n</code></pre> <p>En Fortran (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> Fortran<pre><code>FUNCTION is_prime(n)\nLOGICAL :: is_prime\nINTEGER, INTENT(IN) :: n\nINTEGER :: k\n\nIF(n==2) THEN\nis_prime = .TRUE.\nELSE IF(n &lt; 2 .OR. MOD(n,2) == 0) THEN\nis_prime = .FALSE.\nELSE\nis_prime = .TRUE.\nDO k = 3, INT(SQRT(REAL(n))) + 1, 2\nIF(MOD(n,k) == 0) THEN\nis_prime = .FALSE.\nEXIT\n        END IF\n    END DO\n    END IF\nEND FUNCTION is_prime\n</code></pre> <p>En Pascal (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> Pascal<pre><code>function is_prime(n: integer): boolean;\nvar\nk: integer;\nbegin\nif n = 2 then\nis_prime := true\nelse if (n &lt; 2) or (n mod 2 = 0) then\nis_prime := false\nelse begin\nis_prime := true; k := 3;\nwhile k &lt;= sqrt(n) + 1 do begin\nif n mod k = 0 then begin\nis_prime := false; exit\nend;\nk := k + 2\nend\nend\nend;\n</code></pre> <p>Pour finir, en OCaml (fichier complet \u00e0 t\u00e9l\u00e9charger pour tester) :</p> OCaml<pre><code>let is_prime n =\n  if n = 2 then true\n  else if n &lt; 2 || n mod 2 = 0 then false\n  else begin\n    let reponse = ref true in \n    for k = 3 to 1 + int_of_float (sqrt (float_of_int n)) do\n        if n mod k = 0 then\n            reponse := false;\n    done;\n    !reponse;\n    end;\n;;\n</code></pre> <p>Exercice</p> <p>Notre langage d'\u00e9tude est Python. Rep\u00e9rer, dans les dix programmes ci-dessous des points communs et des diff\u00e9rences. Vous pr\u00e9senterez vos r\u00e9sultats dans un tableau et vous compl\u00e9terez ce travail en pr\u00e9sentant bri\u00e8vement chacun des langages cit\u00e9s (date de cr\u00e9ation, domaine d'application, ...).</p>"},{"location":"premiere/01_langages/3_langages/langages/#complements","title":"Compl\u00e9ments","text":"<ul> <li>Le site RosettaCode.org propose un tr\u00e8s grand nombre d'algorithmes traduits dans un tr\u00e8s grand nombre de langages. Les programmes pr\u00e9sent\u00e9s ici en sont inspir\u00e9s, avec quelques modifications.</li> <li>La page Wikipedia \"Hello, World!\" program pr\u00e9sente le fameux programme affichant la phrase \"Hello, World!\" \u00e0 l'\u00e9cran dans de tr\u00e8s nombreux langages de programmation.</li> </ul>"},{"location":"premiere/01_langages/4_TP_rue/","title":"T.P. Collectif \"Dessine ta rue\"","text":"<p>Objectifs</p> <ul> <li>Explorer l'utilisation d'une biblioth\u00e8que (exemple de la biblioth\u00e8que <code>turtle</code>).</li> <li>Utiliser la documentation d'une biblioth\u00e8que.</li> <li>Appliquer les connaissances du cours : cr\u00e9ation de fonctions, sp\u00e9cifications, ...</li> <li>Travailler en autonomie, travailler en groupe.</li> </ul> <p>L'objectif de ce T.P. est de construire un programme qui g\u00e9n\u00e8re une illustration du type ci-dessous.</p> <p></p> <p>Le travail doit se faire en groupes. Il y a beaucoup de fonctions \u00e0 coder, il faut donc se partager le travail ! \u00c0 vous de vous organiser sachant que :</p> <ul> <li>le diagramme pr\u00e9sent dans l'\u00e9nonc\u00e9 vous permet de comprendre quelles fonctions d\u00e9pendent les unes des autres ;</li> <li>il faut prendre garde \u00e0 ne pas programmer deux fois la m\u00eame chose : bien comprendre ce qui est d\u00e9j\u00e0 fait quand on appelle une fonction et ce qu'il reste \u00e0 faire ;</li> <li>vous devrez vous documenter sur la librairie turtle : cela fait partie de l'exercice ! Rien ne vaut la documentation officielle !</li> <li>le dossier joint au TP contient :<ul> <li>l'\u00e9nonce en PDF ;</li> <li>une fiche de synth\u00e8se sur le module turtle ;</li> <li>des fichiers Python \u00e0 compl\u00e9ter : les ent\u00eates et les sp\u00e9cifications des fonctions sont d\u00e9j\u00e0 pr\u00e9par\u00e9es ;</li> <li>des images repr\u00e9sentant le rendu attendu pour chaque fonction.</li> </ul> </li> </ul> <p>Crit\u00e8res d'\u00e9valuation</p> <ul> <li>Capacit\u00e9 \u00e0 s'organiser et \u00e0 travailler en groupe.</li> <li>Respect des contraintes du sujet.</li> <li>Concision du code : plus c'est long, moins c'est bon.</li> </ul> <p> Dossier zip \u00e0 t\u00e9l\u00e9charger  </p> <p>Source : Math\u00e9maTICE n\u00b080, mai 2022, d'apr\u00e8s une id\u00e9e d'Adrien Willm, avec quelques modifications effectu\u00e9es par l'\u00e9quipe d'Aurillac.</p>"},{"location":"premiere/02_representation_1/","title":"02-Repr\u00e9sentation de donn\u00e9es - types et valeurs de base","text":""},{"location":"premiere/02_representation_1/#programme","title":"Programme","text":"<p>Toute machine informatique manipule une repr\u00e9sentation des donn\u00e9es dont l'unit\u00e9 minimale est le bit 0/1, ce qui permet d'unifier logique et calcul. Les donn\u00e9es de base sont repr\u00e9sent\u00e9es selon un codage d\u00e9pendant de leur nature : entiers, flottants, caract\u00e8res et cha\u00eenes de caract\u00e8res. Le codage conditionne la taille des diff\u00e9rentes valeurs en m\u00e9moire.</p> Contenus Capacit\u00e9s attendues Commentaires \u00c9criture d'un entier positif dans une base b \u2a7e 2 Passer de la repr\u00e9sentation d'une base dans une autre. Les bases 2, 10 et 16 sont privil\u00e9gi\u00e9es. Repr\u00e9sentation binaire d'un entier relatif \u00c9valuer le nombre de bits n\u00e9cessaires \u00e0 l'\u00e9criture en base 2 d'un entier, de la somme ou du produit de deux nombres entiers. Utiliser le compl\u00e9ment \u00e0 2. Il s'agit de d\u00e9crire les tailles courantes des entiers (8, 16, 32 ou 64 bits). Il est possible d'\u00e9voquer la repr\u00e9sentation des entiers de taille arbitraire de Python. Repr\u00e9sentation approximative des nombres r\u00e9els : notion de nombre flottant Calculer sur quelques exemples la repr\u00e9sentation de nombres r\u00e9els : 0.1, 0.25 ou \u2153. 0.2 + 0.1 n'est pas \u00e9gal \u00e0 0.3. Il faut \u00e9viter de tester l'\u00e9galit\u00e9 de deux flottants. Aucune connaissance pr\u00e9cise de la norme IEEE-754 n'est exigible. Valeurs bool\u00e9ennes : 0, 1. Op\u00e9rateurs bool\u00e9ens : and, or, not. Expressions bool\u00e9ennes Dresser la table d'une expression bool\u00e9enne. Le ou exclusif (xor) est \u00e9voqu\u00e9. Quelques applications directes comme l'addition binaire sont pr\u00e9sent\u00e9es. L'attention des \u00e9l\u00e8ves est attir\u00e9e sur le caract\u00e8re s\u00e9quentiel de certains op\u00e9rateurs bool\u00e9ens. Repr\u00e9sentation d'un texte en machine. Exemples des encodages ASCII, ISO-8859-1, Unicode Identifier l'int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d'encodage. Convertir un fichier texte dans diff\u00e9rents formats d'encodage. Aucune connaissance pr\u00e9cise des normes d'encodage n'est exigible."},{"location":"premiere/02_representation_1/mini_tp_nombres/","title":"TP : Bases 2, 10 et 16 en Python","text":"<p>Corrig\u00e9</p> <p>Python met \u00e0 disposition des fonctions permettant de convertir des entiers dans diff\u00e9rentes bases.</p> <p>\u00c0 savoir</p> <p>En Python,</p> <ul> <li>un entier en base 10 est repr\u00e9sent\u00e9 de fa\u00e7on naturel par un objet de type <code>int</code> ;</li> <li>un entier en base 2 est repr\u00e9sent\u00e9 par une cha\u00eene de caract\u00e8res pr\u00e9fix\u00e9e par <code>0b</code> ;</li> <li>un entier en base 16 est repr\u00e9sent\u00e9 par une cha\u00eene de caract\u00e8res pr\u00e9fix\u00e9e par <code>0x</code> ;</li> </ul>"},{"location":"premiere/02_representation_1/mini_tp_nombres/#exercice-1","title":"Exercice 1","text":"<ol> <li>Lire la documentation des fonctions Python <code>bin()</code>, <code>hex()</code> et <code>int()</code>.</li> <li>Pr\u00e9voir ce qui s'affichera apr\u00e8s chacune des instructions ci-dessous, puis tester en console :</li> </ol> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; bin(123)\n&gt;&gt;&gt; int(b\"1111\")\n&gt;&gt;&gt; int(b\"10101\", 2)\n&gt;&gt;&gt; bin(0)\n&gt;&gt;&gt; int(b\"101211\", 2)\n&gt;&gt;&gt; hex(2022)\n&gt;&gt;&gt; int(\"0xABC\", 16)\n</code></pre>"},{"location":"premiere/02_representation_1/mini_tp_nombres/#exercice-2","title":"Exercice 2","text":"<p>Le but de cet exercice est d'\u00e9tudier une fonction permettant de convertir en base 2 un nombre entier naturel donn\u00e9 en base 10.</p> <p>On donne ci-dessous le code de la fonction <code>dec_to_bin</code> :</p> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(n):\n    chaine_bin = ''\n    nombre = n\n    while nombre &gt; 0:\n        r = nombre % 2\n        nombre = nombre // 2\n        chaine_bin = str(r) + chaine_bin\n    return chaine_bin\n</code></pre> <ol> <li>Tester cette fonction avec quelques valeurs de \\(n\\) et v\u00e9rifier qu'elle effectue bien la conversion attendue.</li> <li>Quel est la m\u00e9thode utilis\u00e9e ? Faire le lien avec un des exemples du cours.</li> <li> <p>On souhaite convertir le nombre \\(n=105\\) en binaire. Recopier et compl\u00e9ter le tableau d'\u00e9tat des variables lors de l'appel <code>dec_to_bin(105)</code>. L'\u00e9tape z\u00e9ro correspond \u00e0 l'initialisation, l'\u00e9tape 1 \u00e0 l'\u00e9tat des variables apr\u00e8s le premier passage dans la boucle <code>while</code>.</p> Etape <code>chaine_bin</code> <code>nombre</code> <code>r</code> 0 \"\" 102 / 1 ... ... ... </li> <li> <p>Modifier la fonction afin que le pr\u00e9fixe <code>0b</code> soit pr\u00e9sent dans la cha\u00eene retourn\u00e9e.</p> </li> </ol>"},{"location":"premiere/02_representation_1/mini_tp_nombres/#exercice-3","title":"Exercice 3","text":"<ol> <li> <p>\u00c9crire une fonction qui respecte les sp\u00e9cifications indiqu\u00e9es : </p> \ud83d\udc0d Script Python<pre><code>def add_2_bits(a: int, b: int) -&gt; str\n\"\"\"a et b sont des bits \u00e9gaux \u00e0 0 ou 1\n    retourne une chaine repr\u00e9sentant en base 2\n    la somme de a et de b\"\"\"\n</code></pre> </li> <li> <p>\u00c9crire une fonction analogue <code>add_3_bits(a, b, c)</code> qui retourne la somme de trois bits.</p> </li> </ol>"},{"location":"premiere/02_representation_1/mini_tp_nombres/#exercice-4","title":"Exercice 4","text":"<p>Coder la fonction <code>complement_deux</code> sp\u00e9cifi\u00e9e ci-dessous. Vous pourrez utiliser la fonction <code>dec_to_bin</code> d\u00e9finie \u00e0 l'exercice 2 (sans le pr\u00e9fixe <code>0b</code>). Votre code devra tester les pr\u00e9conditions indiqu\u00e9es sur l'entier \\(n\\).</p> <p>Un jeu de tests unitaires est propos\u00e9 ci-dessous : il permet de v\u00e9rifier que votre fonction retourne bien ce qui est attendu.</p> \ud83d\udc0d Script Python<pre><code>def complement_deux(n:int, nbits:int)-&gt;str:\n\"\"\"\n    Renvoie la notation en compl\u00e9ments \u00e0 2 de l'entier relatif n\n    sous la forme d'une cha\u00eene de caract\u00e8res\n\n    Parameters\n    ----------\n    n : int Pr\u00e9condition -2**(nbits-1) &lt;= n &lt; 2**(nbits-1)\n    nbits : int\n\n    Returns\n    -------\n    type str de longueur nbits\n    \"\"\"\n    pass\n\nprint(complement_deux(-12,8))\n# Jeu de tests unitaires\nassert complement_deux(0, 8) == \"00000000\"\nassert complement_deux(5, 8) == \"00000101\"\nassert complement_deux(2**7 - 1, 8) == \"01111111\"\nassert complement_deux(-2**7, 8) == \"10000000\"\nassert complement_deux(2**7 - 2, 8) == \"01111110\"\nassert complement_deux(-2**7 + 1, 8) == \"10000001\"\nassert complement_deux(-1, 8) == \"11111111\"\nassert complement_deux(-2, 8) == \"11111110\"\nprint(\"Bravo ! Tous les tests sont r\u00e9ussis !\")\n</code></pre> <p>Sortie attendue \u00e0 l'ex\u00e9cution : </p> \ud83d\udc0d Console Python<pre><code>11110100\nBravo ! Tous les tests sont r\u00e9ussis !\n</code></pre>"},{"location":"premiere/02_representation_1/mini_tp_nombres/#probleme","title":"Probl\u00e8me","text":"<p>\u00c9crire une fonction <code>ieee_754(x)</code> qui prend en entr\u00e9e un flottant x (en base 10) et qui retourne une chaine de caract\u00e8res correspondant \u00e0 la repr\u00e9sentation de \\(x\\) selon la norme IEEE-754 sur 32 bits.</p> <p>Conseils : vous pourrez d\u00e9composer le probl\u00e8me en plusieurs fonctions s\u00e9par\u00e9es pour traiter les \u00e9tapes une par une.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/","title":"1. Repr\u00e9sentation des entiers naturels (cours)","text":""},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#1-introduction","title":"1. Introduction","text":"<p>Un ordinateur est une machine qui traite de l'information. Pour comprendre comment, nous devons d'abord expliquer comment l'information est repr\u00e9sent\u00e9e.</p> <p>En effet, il faut bien faire la diff\u00e9rence entre l'information et sa repr\u00e9sentation. Par exemple, si on consid\u00e8re la valeur 17, tout le monde pensera \u00e0 repr\u00e9senter cette valeur par les chiffres 1 et 7.</p> <p>Mais on peut imaginer beaucoup d'autres possibilit\u00e9s, par exemple, les chiffres romains, la num\u00e9ration inca, ou encore le binaire. Et bien d'autres...</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#2-la-base-10","title":"2. La base 10","text":"<p>La repr\u00e9sentation usuelle des nombres est une repr\u00e9sentation d\u00e9cimale et positionnelle. Cela signifie :</p> <ol> <li> <p>que les nombres sont repr\u00e9sent\u00e9s par une s\u00e9quence de chiffres de     \\(0\\) \u00e0 \\(9\\) inclus. Il y a bien dix chiffres diff\u00e9rents utilis\u00e9s,     d'o\u00f9 le terme d\u00e9cimal ;</p> </li> <li> <p>que la position de chaque chiffre dans la s\u00e9quence permet     d'associer ce chiffre \u00e0 une puissance de 10.</p> </li> </ol> <p>Dans cette repr\u00e9sentation usuelle, 10 est appel\u00e9 la base. On parle aussi de repr\u00e9sentation en base 10.</p> <p>Exemple</p> <p>Par exemple, la repr\u00e9sentation : </p> \\[1234\\] <p>signifie que le nombre est compos\u00e9 de:</p> <ul> <li>\\(4\\) unit\u00e9s, ou \\(4\\times 10^0\\);</li> <li>\\(3\\) dizaines, ou \\(3\\times 10^1\\);</li> <li>\\(2\\) centaines, ou \\(2\\times 10^2\\);</li> <li>\\(1\\) millier, ou \\(1\\times 10^3\\);</li> </ul> <p>Ce qui s'\u00e9crit : \\(1234 = 1\\times 10^3 + 2\\times 10^2 + 3\\times 10^1 + 4\\times 10^0\\)</p> <p>On voit donc que les puissances de \\(10\\) associ\u00e9es aux diff\u00e9rentes positions (aux diff\u00e9rents chiffres) vont en d\u00e9croissant quand on lit le nombre de gauche \u00e0 droite, et que la puissance \\(10^0\\) correspond au chiffre des unit\u00e9s. </p> <p>On note \u00e9galement que la base donne le nombre de chiffres que l'on peut utiliser pour repr\u00e9senter les nombres. En base 10, on peut utiliser 10 chiffres diff\u00e9rents, \u00e0 savoir les chiffres de \\(0\\) \u00e0 \\(9\\) inclus.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#3-generalisation","title":"3. G\u00e9n\u00e9ralisation","text":"<p>Ces id\u00e9es se g\u00e9n\u00e9ralisent dans n'importe quelle base. Fixons \u00e0 partir de maintenant une base \\(b\\geq 2\\). </p> <p>Nous allons maintenant rencontrer des nombres \u00e9crits dans diff\u00e9rentes bases. Pour \u00e9viter les confusions, nous indiquerons la base utilis\u00e9e en indice. Le nombre de l'exemple ci-dessous s'\u00e9crit donc \\(1234_{10}\\).</p> <p>En base \\(b\\), nous utiliserons \\(b\\) chiffres : \\(0\\), \\(1\\), \\(2\\), ..., \\(b-1\\).</p> <p>Le nombre :</p> \\[{d_n\\cdots d_0}_b\\] <p>repr\u00e9sente la valeur :</p> \\[N = d_n\\times b^n + d_{n-1}\\times b^{n-1}+\\cdots+d_0\\times b^0\\] <p>o\u00f9 tous les \\(d_i\\) sont des chiffres dans \\(\\{0,\\ldots b-1\\}\\).</p> <p>Exemple</p> <p>En base 5, il y a cinq chiffres : 0, 1, 2, 3 et 4.</p> <p>Comptons un peu en base 5 : </p> Base 10 Base 5 0 0 Pas de diff\u00e9rence ... 1 1 Pas de diff\u00e9rence ... 2 2 Pas de diff\u00e9rence ... 3 3 Pas de diff\u00e9rence ... 4 4 Pas de diff\u00e9rence ... 5 10 Plus de possibilit\u00e9 pour les unit\u00e9s, on ajoute un chiffre \u00e0 gauche 6 11 On augmente les unit\u00e9s 7 12 On augmente les unit\u00e9s 8 13 On augmente les unit\u00e9s 9 14 On augmente les unit\u00e9s 10 20 On ne peut plus augmenter les unit\u00e9s, on augmente le chiffre de rang suivant <p>Exercice</p> <p>Quel sera le premier entier, en base 10, qui s'\u00e9crit en base 5 avec trois chiffres ? Avec quatre chiffres ?</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#passage-de-la-base-b-a-la-base-10","title":"Passage de la base \\(b\\) \u00e0 la base 10","text":"<p>Pour passer de la base \\(b\\) \u00e0 la base 10, c'est facile, ils suffit d'utiliser la d\u00e9finition : </p> \\[{d_n\\cdots d_0}_b = (d_n\\times b^n + d_{n-1}\\times b^{n-1}+\\cdots+d_0\\times b^0)_{10}\\] <p>Exemple</p> <p>Exemple avec la base 5.</p> <p>Consid\u00e9rons le nombre \\(N=134_5\\). Par d\u00e9finition, on a : </p> \\[N=4\\times 5^0 + 3\\times 5^1 + 1\\times 5^2 = 4+15+25=44_{10}\\]"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#passage-de-la-base-10-a-la-base-b","title":"Passage de la base 10 \u00e0 la base \\(b\\)","text":"<p>C'est un peu plus difficile. Pour convertir un nombre donn\u00e9 en base 10 dans une base \\(b\\), on proc\u00e8de par divisions euclidiennes successives par \\(b\\). Les restes obtenus sont les chiffres de l'\u00e9criture du nombre en base \\(b\\).</p> <p>Exemple</p> <p>On reste avec \\(b=5\\). Soit \\(N=64_{10}\\) : on souhaite \u00e9crire \\(N\\) en base 5.</p> <p>On effectue pour cela la suite de divisions suivante : </p> <p></p> <p>On continue les divisions successives jusqu'\u00e0 obtenir un quotient nul.</p> <p>Les restes successifs (sur fond bleu) forment le nombre en base 5, en les lisant de la droite vers la gauche : \\(64_{10}=224_5\\).</p> <p>Voyons maintenant les exemples de la base 2 et de la base 16 qui sont les plus utilis\u00e9es en informatique.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#4-la-base-2","title":"4. La base 2","text":"<p>En base 2, nous ne disposons donc que des deux chiffres 0 et 1. On parle de syst\u00e8me binaire.</p> <p>Un chiffre binaire, binary digit en anglais est appel\u00e9 en abr\u00e9g\u00e9 un bit.</p> <p>Voir cet article du blog au sujet des unit\u00e9s de mesures binaires.</p> <p>Voici comment compter jusqu'\u00e0 10 en base 2 :</p> Nombre en d\u00e9cimal Nombre en binaire 0 0 Pas de diff\u00e9rence ... 1 1 Pas de diff\u00e9rence ... 2 10 Le premier rang ayant \u00e9t\u00e9 rempli, on passe au suivant ! 3 11 On re-remplit le rang 1. 4 100 Le rang 2 est plein, le rang 1 aussi, qu'\u00e0 cela ne tienne, on passe au suivant. 5 101 On continue en suivant la m\u00eame m\u00e9thode. 6 110 On continue en suivant la m\u00eame m\u00e9thode. 7 111 On continue en suivant la m\u00eame m\u00e9thode. 8 1000 On commence le rang 4. 9 1001 On continue comme tout \u00e0 l'heure. 10 1010 On continue comme tout \u00e0 l'heure. ... ... ... <p>Les nombres en base 2 ont tr\u00e8s vite beaucoup de chiffres. Pour faciliter la lecture, on a l'habitude de regrouper ces chiffres par paquets de 4 \u00e0 partir de la droite.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#conversion-de-la-base-2-a-la-base-10","title":"Conversion de la base 2 \u00e0 la base 10","text":"<p>Dans ce sens, la conversion est facile, il suffit d'appliquer la d\u00e9finition.</p> <p>Prenons le nombre \\(1101\\; 0011_2\\). Il s'\u00e9tale sur 8 bits, on applique la m\u00e9thode g\u00e9n\u00e9rale :</p> <p>\\(1101\\; 0011_2 = 1\\times 2^7 + 1\\times 2^6 + 0\\times 2^5 + 1\\times 2^4 + 0\\times 2^3 + 0\\times 2^2 + 1\\times 2^1 + 1\\times 2^1 = 211_{10}\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#conversion-de-la-base-10-a-la-base-2","title":"Conversion de la base 10 \u00e0 la base 2","text":"<p>On proc\u00e8de par divisions euclidiennes successives.</p> <p>Convertissons \\(47_{10}\\) en base 2 :</p> <p></p> <p>On a donc \\(47_{10}=10\\;1111_2\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#5-la-base-16","title":"5. La base 16","text":"<p>Comme nous l'avons d\u00e9j\u00e0 vu, l'\u00e9criture d'un nombre en base 2 est longue. Pour avoir des nombres plus \"compacts\" tout en restant li\u00e9 au binaire, les informaticiens utilisent souvent la base 16 : c'est le syst\u00e8me hexad\u00e9cimal.</p> <p>En base 16, on utilise 16 chiffres, alors que notre num\u00e9ration usuelle, en base 10, n'en poss\u00e8de que 10. Quels symboles choisir pour les 6 chiffres manquants ? On utilise les six premi\u00e8res lettres de l'alphabet !</p> Binaire (base 2) D\u00e9cimal (base 10) Hexad\u00e9cimal (base 16) 0 0 0 1 1 1 10 2 2 11 3 3 100 4 4 101 5 5 110 6 6 111 7 7 1000 8 8 1001 9 9 1010 10 A 1011 11 B 1100 12 C 1101 13 D 1110 14 E 1111 15 F <p>On observe que tous les chiffres de la base 16 sont tous les nombres que l'on peut coder en binaire sur 4 bits. Dans l'\u00e9criture en base 2 d'un nombre, on a vu que les bits sont regroup\u00e9s par quatre pour plus de lisibilit\u00e9 : \\(1101\\; 0011_2\\). Chaque groupe de quatre correspond donc \u00e0 un chiffre en base 16. On a donc \\(1101\\; 0011_2 = D3_{16}\\).</p> <p>Les m\u00e9thodes de conversion restent les m\u00eames.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#6-quelques-remarques-pour-finir","title":"6. Quelques remarques pour finir","text":""},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#chiffres-de-poids-fort-de-poids-faible","title":"Chiffres de poids fort, de poids faible","text":"<p>Dans la repr\u00e9sentation positionnelle usuelle, le chiffre le plus \u00e0 gauche est associ\u00e9 \u00e0 une puissance plus \u00e9lev\u00e9e de la base. On parle donc de chiffre de \"poids fort\" ; le chiffre \u00e9tant associ\u00e9 \u00e0 la puissance la plus faible est appel chiffre de \"poids faible\". En particulier, en binaire, on parle de bit de poids fort et bit de poids faible.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#multiplier-par-la-base","title":"Multiplier par la base","text":"<p>Dans toutes les bases, on peut ais\u00e9ment multiplier par la base en ajoutant des z\u00e9ros \u00e0 droite :</p> <p>\u00c0 retenir</p> <p>Dans toute base \\(b\\), ajouter \\(k\\) z\u00e9ros \u00e0 droite revient \u00e0 multiplier par \\(b^k\\).</p> <p>Par exemple, en binaire, multiplier par 2 revient \u00e0 ajouter un z\u00e9ro \u00e0 la fin du nombre tout comme on ajoute un z\u00e9ro \u00e0 la fin du nombre \u00e9crit en base 10 quand on la multiplie par 10.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#combien-de-nombres-representables-sur-n-bits","title":"Combien de nombres repr\u00e9sentables sur \\(n\\) bits ?","text":"<p>Enfin, l'observation suivante aura toute son importance dans la suite.</p> <p>Consid\u00e9rons par exemple la base 2 : combien de nombres diff\u00e9rents peut-on \u00e9crire avec \\(n\\) bits ?</p> <p>Chaque bit ayant deux valeurs possibles (0 ou 1), nous obtenons \\(2^n\\) nombres distincts.</p> \\[\\underbrace{0\\cdots 0_2}_{n\\text{ chiffres}} = 0\\] <p>\u00e0:</p> \\[\\underbrace{1\\cdots 1_b}_{n\\text{ chiffres}} = 2^n-1.\\] <p>\u00c0 retenir</p> <p>En base \\(2\\), il y a \\(2^n\\) nombres (entiers positifs) repr\u00e9sentables sur \\(n\\) bits : les nombres de \\(0\\) \u00e0 \\(2^n-1\\).</p> <p>Exercice</p> <p>D\u00e9montrer que \\(\\underbrace{1\\cdots 1_2}_{n\\text{ chiffres}} = 2^n-1.\\)</p> R\u00e9ponse <p>Nous allons d\u00e9montrer le r\u00e9sultat g\u00e9n\u00e9ral en base \\(b\\).</p> <p>On a : \\(\\underbrace{(b-1)\\cdots (b-1)_b}_{n\\text{ chiffres}} = (b-1)\\times b^{n-1}+\\ldots+(b-1)\\times b^1+(b-1)\\times b^0\\). D'o\u00f9, en d\u00e9veloppant chacun des produits :</p> \\[\\underbrace{(b-1)\\cdots (b-1)_b}_{n\\text{ chiffres}} = b^{n}-b^{n-1}+b^{n-1}-b^{n-2}+\\ldots+b^2-b+b-1.\\] <p>Les termes se simplifient tous, sauf le premier et le dernier. On a donc :</p> \\[\\underbrace{(b-1)\\cdots (b-1)_b}_{n\\text{ chiffres}} = b^n-1.\\]"},{"location":"premiere/02_representation_1/1_naturels/naturels_cours/#7-addition-posee-en-binaire","title":"7. Addition pos\u00e9e en binaire","text":"<p>On peut poser une addition en base 2 avec la m\u00eame technique que pour l'addition des nombres \u00e9crits en base 10. L'addition des bits suit les r\u00e8gles suivantes :</p> <ul> <li>\\(0+0\\) donne \\(0\\) avec une retenue \u00e9gale \u00e0 \\(0\\) ;</li> <li>\\(0+1\\) donne \\(1\\) avec une retenue \u00e9gale \u00e0 \\(0\\) ;</li> <li>\\(1+0\\) donne \\(1\\) avec une retenue \u00e9gale \u00e0 \\(0\\) ;</li> <li>\\(1+1\\) donne \\(0\\) avec une retenue \u00e9gale \u00e0 \\(1\\).</li> </ul> <p>Exemple de l'addition de \\(11_{10}=1011_2\\) et de \\(13_{10}=1101_2\\) (les retenues sont en rouge) : </p> <p></p> <p>La somme obtenue \\(1\\;1000_2\\) correspond bien \u00e0 l'entier \\(24_{10}\\) cod\u00e9 en binaire. On remarque qu'il a fallu un bit suppl\u00e9mentaire pour coder la somme. Si on travaille avec une taille d'entiers fixe de 4 bits, alors le bit de poids fort sera ignor\u00e9, et on obtiendra seulement \\(1000_2\\) comme r\u00e9sultat, c'est-\u00e0-dire 8. Autrement dit, sur 4 bits, quand on d\u00e9passe la capacit\u00e9 de \\(2^4-1=15\\), on repart de z\u00e9ro : \\(24=2^4+8\\). On dit que le calcul se fait modulo \\(2^4\\).</p> <p>En compl\u00e9ment, vous pouvez regarder la vid\u00e9o \"Le binaire, c'est quoi ?\" dans cet article.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/","title":"S2 - Repr\u00e9sentation de donn\u00e9es - Types et valeurs de base","text":""},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#1-representation-des-entiers-naturels-lessentiel","title":"1. Repr\u00e9sentation des entiers naturels : L'essentiel","text":"<p>En base \\(b\\geqslant 2\\), on utilise les chiffres \\(0, 1, 2, \\ldots , b-1\\).</p> <p>Le nombre \\({d_n\\cdots d_0}_b\\) repr\u00e9sente la valeur : \\(N = d_n\\times b^n + d_{n-1}\\times b^{n-1}+\\cdots+d_0\\times b^0\\) o\u00f9 tous les \\(d_i\\) sont des chiffres dans \\(\\{0,\\ldots b-1\\}\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#passage-de-la-base-b-a-la-base-10","title":"Passage de la base \\(b\\) \u00e0 la base 10","text":"<p>Pour passer de la base \\(b\\) \u00e0 la base 10, c'est facile, ils suffit d'utiliser la d\u00e9finition : </p> \\[{d_n\\cdots d_0}_b = (d_n\\times b^n + d_{n-1}\\times b^{n-1}+\\cdots+d_0\\times b^0)_{10}\\]"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#passage-de-la-base-10-a-la-base-b","title":"Passage de la base 10 \u00e0 la base \\(b\\)","text":"<p>On proc\u00e8de par divisions euclidiennes successives.</p> <p></p> <p>On continue les divisions successives jusqu'\u00e0 obtenir un quotient nul.</p> <p>Les restes successifs (sur fond bleu) forment le nombre en base 5, en les lisant de la droite vers la gauche : \\(64_{10}=224_5\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#la-base-2","title":"La base 2","text":"<p>En base 2, nous ne disposons donc que des deux chiffres 0 et 1. On parle de syst\u00e8me binaire.</p> <p>Un chiffre binaire, binary digit en anglais est appel\u00e9 en abr\u00e9g\u00e9 un bit.</p> <p>Vocabulaire : bit de poids fot, bit de poids faible.</p> <p>\u00c0 retenir</p> <p>En base \\(2\\), il y a \\(2^n\\) nombres (entiers positifs) repr\u00e9sentables sur \\(n\\) bits: les nombres de \\(0\\) \u00e0 \\(2^n-1\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#conversion-de-la-base-2-a-la-base-10","title":"Conversion de la base 2 \u00e0 la base 10","text":"<p>\\(1101\\; 0011_2 = 1\\times 2^7 + 1\\times 2^6 + 0\\times 2^5 + 1\\times 2^4 + 0\\times 2^3 + 0\\times 2^2 + 1\\times 2^1 + 1\\times 2^1 = 211_{10}\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#conversion-de-la-base-10-a-la-base-2","title":"Conversion de la base 10 \u00e0 la base 2","text":"<p>On a donc \\(47_{10}=10\\;1111_2\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#la-base-16","title":"La base 16","text":"<p>Dans le syst\u00e8me hexad\u00e9cimal, on utilise les chiffres \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\\).</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_essentiel/#addition-posee-en-binaire","title":"Addition pos\u00e9e en binaire","text":"<p>On applique la m\u00eame technique avec retenues qu'en base 10.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/","title":"Exercices (naturels)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-1","title":"Exercice 1","text":"<p>Convertir en base 2 :</p> <ol> <li>\\(23_{10}\\)</li> <li>\\(2\\;025_{10}\\)</li> <li>\\(40\\;500_{10}\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-2","title":"Exercice 2","text":"<p>Convertir en base 10 :</p> <ol> <li>\\(111_2\\)</li> <li>\\(11\\;0001_2\\)</li> <li>\\(1101\\;0101_2\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-3","title":"Exercice 3","text":"<p>Convertir en base 10 :</p> <ol> <li>\\(23_{16}\\)</li> <li>\\(E85_{16}\\)</li> <li>\\(FAB15_{16}\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-4","title":"Exercice 4","text":"<p>Convertir en base 16 :</p> <ol> <li>\\(16_{10}\\)</li> <li>\\(2\\;022_{10}\\).</li> <li>\\(65\\;724_{10}\\).</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-5","title":"Exercice 5","text":"<p>Convertir en base 16 les nombres binaires suivants :</p> <ol> <li>\\(1\\;1011_2\\)</li> <li>\\(1100\\;1010\\;0001\\;1100_2\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-6","title":"Exercice 6","text":"<p>Poser et effectuer les additions suivantes :</p> <ol> <li>\\(111_2+1011_2\\)</li> <li>\\(1011\\;0111_2+111\\;0100_2\\)</li> <li>\\(1101_2+1\\;1001_2\\)</li> <li>\\(1\\;0111_2+11\\;0110_2+11\\;1101_2\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-7","title":"Exercice 7","text":"<p>Dans un certain langage de programmation, les entiers naturels sont cod\u00e9s sur un octet. Parmi les additions suivantes, lesquelles vont provoquer un d\u00e9passement de capacit\u00e9 (overflow error) ?</p> <ol> <li>\\(1111\\;1011 + 1001\\;1111\\)</li> <li>\\(1001\\;1011 + 0111\\;1011\\)</li> <li>\\(0011\\;1011 + 1001\\;1001\\)</li> <li>\\(1010\\;1011 + 0001\\;0100\\)</li> </ol>"},{"location":"premiere/02_representation_1/1_naturels/naturels_exos/#exercice-8","title":"Exercice 8","text":"<p>En proc\u00e9dant comme pour les nombres \u00e9crits en base 10, poser la multiplication suivante :</p> \\[1\\;1101_2\\times 111_2\\]"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/","title":"2. Repr\u00e9sentation des entiers relatifs (cours)","text":"<p>Nous allons maintenant \u00e9tudier la repr\u00e9sentation des entiers relatifs en base 2.</p> <p>Tout le probl\u00e8me est de coder le signe du nombre, et plus seulement sa valeur.</p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/#1-premiere-idee-le-bit-de-signe","title":"1. Premi\u00e8re id\u00e9e : le bit de signe","text":"<p>Une premi\u00e8re id\u00e9e consiste \u00e0 d\u00e9cider que : lorsqu'on travaille avec une repr\u00e9sentation binaire sur \\(n\\) bits, on r\u00e9serve le bit de poids fort pour coder le signe. 1 va coder le signe \\(-\\) et 0 le signe \\(+\\). Les \\(n-1\\) bits restants codent la valeur absolue du nombre.</p> <p>Exemple</p> <p>En travaillant sur 8 bits (soit 1 octet), l'entier positif \\(5_{10}\\) sera cod\u00e9 par \\(0000\\;0101_2\\) et l'entier n\u00e9gatif \\(-5_{10}\\) sera cod\u00e9 par \\(1000\\;0101_2\\).</p> <p>Cette premi\u00e8re id\u00e9e est une mauvaise id\u00e9e ! En effet, que dire des deux entiers \\(0000\\;0000_2\\) et \\(1000\\;0000_2\\) ? Ils sont \u00e9gaux, respectivement \u00e0 \\(+0\\) et \u00e0 \\(-0\\), donc ils sont \u00e9gaux.  Il n'est pas souhaitable qu'un m\u00eame nombre poss\u00e8de deux repr\u00e9sentations diff\u00e9rentes.</p> <p>De plus, cette repr\u00e9sentation pose un autre probl\u00e8me plus grave ! Consid\u00e9rons par exemple le codage de \\(3_{10}\\) sur 4 bits. On a \\(3_{10} = 0011_2\\) et donc \\(-3_{10} = 1011_2\\). Calculons maintenant leur somme : on s'attend \u00e0 trouver z\u00e9ro :</p> <p></p> <p>mais le r\u00e9sultat correspond \u00e0 la repr\u00e9sentation de \\(-4\\) !</p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/#2-le-complement-a-2","title":"2. Le compl\u00e9ment \u00e0 2","text":""},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/#le-principe","title":"Le principe","text":"<p>Pour repr\u00e9senter un entier relatif \\(R\\) en base 2, on commence par choisir le nombre de bits \\(n\\) de la repr\u00e9sentation.</p> <p>D\u00e9finition et r\u00e8gles de repr\u00e9sentation</p> <ul> <li>Le compl\u00e9ment \u00e0 \\(2\\) d'un nombre \\(R\\) est le nombre \\(2^n-R\\).</li> <li>Les nombres positifs sont repr\u00e9sent\u00e9s par leur codage binaire usuel.</li> <li>Les nombres n\u00e9gatifs sont repr\u00e9sent\u00e9s par le compl\u00e9ment \u00e0 \\(2\\) de leur valeur absolue.</li> </ul> <p>Exemple</p> <p>Consid\u00e9rons le codage de l'entier \\(+12\\) sur 8 bits. Il s'agit d'un entier positif, on le code donc comme vu pr\u00e9c\u00e9demment et on obtient : \\(+12_{10} = 0000\\;1100_2\\).</p> <p>Consid\u00e9rons \\(-12\\) maintenant. Son compl\u00e9ment \u00e0 2 vaut \\(2^8-12=244\\) dont la repr\u00e9sentation binaire est \\(1111\\;0100_2\\). \\(-12\\) est donc repr\u00e9sent\u00e9 par le nombre \\(1111\\;0100_2\\) en binaire sur 8 bits.</p> <p>\"Truc\" pratique : pour obtenir la repr\u00e9sentation d'un nombre n\u00e9gatif, par exemple de \\(-12\\) :</p> <ul> <li>on commence par coder sa valeur absolue 12 : \\(0000\\;1100\\) ;</li> <li>on inverse tous les bits : \\(1111\\;0011\\) ;</li> <li>on ajoute 1 (attention aux retenues !) : \\(1111\\;0100\\).</li> </ul> <p>De plus, ce truc fonctionne dans les deux sens : en partant d'un nombre n\u00e9gatif, on retrouve aussi son oppos\u00e9 : </p> <ul> <li>on consid\u00e8re \\(-12\\) : \\(1111\\;0100\\) ;</li> <li>on inverse tous les bits : \\(0000\\;1011\\) ;</li> <li>on ajoute 1 : \\(1111\\;1100\\). On retrouve bien 12.</li> </ul> <p>Avec cette convention, z\u00e9ro n'a plus qu'une seule repr\u00e9sentation. De plus, on peut poser des additions de fa\u00e7on habituelle.</p> <p>Reprenons l'exemple de l'entier \\(3_{10} = 0011_2\\) cod\u00e9 sur 4 bits. \\(-3_{10}\\) sera cod\u00e9 par \\(2^4-3=13\\), donc par \\(1101_2\\). On obtient bien z\u00e9ro en les additionnant (on oublie la derni\u00e8re retenue car on reste sur 4 bits) : </p> <p></p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/#combien-de-nombres","title":"Combien de nombres ?","text":"<p>Nous savons que, sur \\(n\\) bits, nous pouvons repr\u00e9senter \\(2^n\\) entiers naturels : tous les entiers de \\(0\\) \u00e0 \\(2^n-1\\). </p> <p>Avec le compl\u00e9ment \u00e0 2 : </p> <ul> <li>la premi\u00e8re moiti\u00e9 de ces entiers va repr\u00e9senter les \\(2^{n-1}\\) premiers entiers positifs : de \\(0\\) \u00e0 \\(2^{n-1}-1\\), </li> <li>la seconde moiti\u00e9 va repr\u00e9senter les \\(2^{n-1}\\) premiers entiers n\u00e9gatifs : de \\(-1\\) \u00e0 \\(-2^{n-1}\\).</li> </ul> <p>Avec le compl\u00e9ment \u00e0 deux, \\(-1\\) sera repr\u00e9sent\u00e9 par \\(2^n-1\\), soit \\(11111\\ldots 1111\\).</p> <p>Sur un axe gradu\u00e9, voici comment les nombres relatifs s'organisent : </p> <p></p> <p>On remarque que : </p> <ul> <li>la repr\u00e9sentation d'un nombre positif commence par un bit de poids fort \u00e9gal \u00e0 0.</li> <li>la repr\u00e9sentation d'un nombre n\u00e9gatif commence par un bit de poids fort \u00e9gal \u00e0 1.</li> </ul>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_cours/#3-cas-concrets","title":"3. Cas concrets","text":"<p>Couramment, les entiers sont cod\u00e9s sur 8, 16, 32 ou 64 bits dans les langages de programmation usuels.</p> En codant sur ... On peut aller de ... jusqu'\u00e0 ... 8 bits -128 127 16 bits -32\u202f768 32\u202f767 32 bits -2\u202f147\u202f483\u202f648 2\u202f147\u202f483\u202f647 64 bits -9\u202f223\u202f372\u202f036\u202f854\u202f775\u202f808 9\u202f223\u202f372\u202f036\u202f854\u202f775\u202f807 <p>En Python, la taille des entiers avec lesquels on peut travailler n'est limit\u00e9e que par la m\u00e9moire disponible. Dans d'autres langages, il faut d\u00e9clarer des variables de types diff\u00e9rents en fonction des limites de valeurs envisag\u00e9es. Par exemple en C, un <code>char</code> codera sur un octet un entier compris entre \\(-128\\) et \\(127\\), et un <code>short int</code> codera sur 2 octets un entier compris entre \\(-32\\; 768\\) et \\(32\\;767\\). <code>long int</code> utilisera 4 octets.</p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_essentiel/","title":"S2 - Repr\u00e9sentation de donn\u00e9es - Types et valeurs de base","text":""},{"location":"premiere/02_representation_1/2_relatifs/relatifs_essentiel/#2-representation-des-entiers-relatifs-lessentiel","title":"2. Repr\u00e9sentation des entiers relatifs : L'essentiel","text":"<p>On repr\u00e9sente les nombres entiers relatifs en binaire en utilisant le compl\u00e9ment \u00e0 2.</p> <p>Pour repr\u00e9senter un entier relatif \\(R\\) en base 2, on commence par choisir le nombre de bits \\(n\\) de la repr\u00e9sentation.</p> <p>D\u00e9finition et r\u00e8gles de repr\u00e9sentation</p> <ul> <li>Le compl\u00e9ment \u00e0 \\(2\\) d'un nombre \\(R\\) est le nombre \\(2^n-R\\).</li> <li>Les nombres positifs sont repr\u00e9sent\u00e9s par leur codage binaire usuel.</li> <li>Les nombres n\u00e9gatifs sont repr\u00e9sent\u00e9s par le compl\u00e9ment \u00e0 \\(2\\) de leur valeur absolue.</li> </ul> <p>\"Truc\" pratique : pour obtenir la repr\u00e9sentation d'un nombre n\u00e9gatif, par exemple de \\(-12\\) sur 8 bits :</p> <ul> <li>on commence par coder sa valeur absolue 12 : \\(0000\\;1100\\) ;</li> <li>on inverse tous les bits : \\(1111\\;0011\\) ;</li> <li>on ajoute 1 (attention aux retenues !) : \\(1111\\;0100\\).</li> </ul> <p>En appliquant ce \"truc\" \u00e0 nouveau, on retrouve le nombre de d\u00e9part.</p> <p>Cette repr\u00e9sentation permet de poser des op\u00e9rations de mani\u00e8re naturelle (addition et multiplication).</p> <p>Sur un axe gradu\u00e9, voici comment les nombres relatifs s'organisent : </p> <p></p> <p>On remarque que : </p> <ul> <li>la repr\u00e9sentation d'un nombre positif commence par un bit de poids fort \u00e9gal \u00e0 0.</li> <li>la repr\u00e9sentation d'un nombre n\u00e9gatif commence par un bit de poids fort \u00e9gal \u00e0 1.</li> </ul>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_exos/","title":"Exercices (relatifs)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_exos/#exercice-1","title":"Exercice 1","text":"<ol> <li> <p>\u00c9crire les entiers relatifs suivants en compl\u00e9ment \u00e0 2, sur 8 bits : </p> <ol> <li>\\(-69\\)</li> <li>\\(124\\)</li> <li>\\(-125\\)</li> <li>\\(-26\\)</li> </ol> </li> <li> <p>Convertir en base 10 les entiers relatifs suivants exprim\u00e9s en compl\u00e9ment \u00e0 2, sur 8 bits.</p> <ol> <li>\\(0000\\; 1101\\)</li> <li>\\(1000\\;1011\\)</li> <li>\\(1111\\;1111\\)</li> <li>\\(1001\\;1000\\)</li> </ol> </li> </ol>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_exos/#exercice-2","title":"Exercice 2","text":"<p>Poser et effectuer la soustraction suivante en binaire sur un octet : 96\u221284.</p>"},{"location":"premiere/02_representation_1/2_relatifs/relatifs_exos/#exercice-3","title":"Exercice 3","text":"<p>Dans cet exercice, on code les entiers relatifs sur 2 octets.</p> <ol> <li>D\u00e9terminer la repr\u00e9sentation de l'entier \\(-47\\).</li> <li>Combien de nombres strictement positifs peut-on coder ? Pr\u00e9ciser le plus petit et le plus grand. </li> <li>Combien de nombres strictement n\u00e9gatifs peut-on coder ? Pr\u00e9ciser le plus petit et le plus grand. </li> </ol>"},{"location":"premiere/02_representation_1/3_reels/flottants_cours/","title":"3. Repr\u00e9sentation des r\u00e9els","text":"<p>Commen\u00e7ons tout de suite ce chapitre par une triste nouvelle : il est impossible de repr\u00e9senter en binaire tous les nombres r\u00e9els. Certains d'entre eux, en effet, ont des caract\u00e9ristiques probl\u00e9matiques, comme \\(\\sqrt{2}\\) ou \\(\\pi\\) par exemple : ce sont des nombres irrationnels, c'est-\u00e0-dire des nombres r\u00e9els que l'on ne peut pas \u00e9crire sous la forme d'une fraction de deux entiers \\(\\frac{a}{b}\\). L'\u00e9criture d\u00e9cimale de ces nombres, avec une virgule, comporte une infinit\u00e9 de chiffres apr\u00e8s la virgule, sans r\u00e9gularit\u00e9 ni sch\u00e9ma p\u00e9riodique. Une repr\u00e9sentation en machine ne pouvant \u00eatre infinie, ces nombres ne peuvent pas \u00eatre cod\u00e9s dans un ordinateur.</p> <p>Parmi les nombres rationnels, seuls les nombres d\u00e9cimaux peuvent \u00eatre cod\u00e9s de mani\u00e8re exacte en binaire. Les nombres d\u00e9cimaux sont en effet ceux qui ont un nombre fini de chiffres apr\u00e8s la virgule. Pour les autres nombres, on aura une repr\u00e9sentation approch\u00e9e.</p> <p>Les nombres \u00e0 virgule, sont ici appel\u00e9s des flottants.</p>"},{"location":"premiere/02_representation_1/3_reels/flottants_cours/#1-conversion-en-base-2","title":"1. Conversion en base 2","text":"<p>Comment \u00e9crire un nombre d\u00e9cimal en base 2 ?</p> <p>Exemple</p> <p>Prenons par exemple \\(x=10,125_{10}\\). Tout comme pour les entiers, cette \u00e9criture peut se d\u00e9composer suivant les puissances de 10 : \\(x=10,125 = 1\\times 10^1 + 0\\times 10^0 + 1\\times 10^{-1} + 2\\times 10^{-2} + 5\\times 10^{-3}\\).</p> <p>L'\u00e9criture sous forme de flottant en base 2 repose sur le m\u00eame type de d\u00e9composition, mais avec des puissances de 2.</p> <p>Pour la partie enti\u00e8re, nous savons faire : \\(10_{10}=1010_2\\).</p> <p>Pour la partie d\u00e9cimale :</p> <ul> <li>on multiplie \\(0,125\\) par \\(2\\) : \\(0,125\\times 2 = 0,25\\) : partie enti\u00e8re \\(0\\).</li> <li>on multiplie \\(0,25\\) par \\(2\\) : \\(0,25\\times 2 = 0,5\\) : partie enti\u00e8re \\(0\\).</li> <li>on multiplie \\(0,5\\) par \\(2\\) : \\(0,5\\times 2 = 1\\) : partie enti\u00e8re \\(1\\).</li> <li>on s'arr\u00eate car il n'y a plus de partie d\u00e9cimale.</li> </ul> <p>La suite des parties enti\u00e8res obtenues forme la partie d\u00e9cimale de l'\u00e9criture binaire : </p> \\[10,125_{10} = 1010,001_2 = 1\\times 2^3 + 0\\times 2^2 + 1\\times 2^1 + 0\\times 2^0 + 0\\times 2^{-1}+0\\times 2^{-2}+1\\times 2^{-3}\\] <p>Il se peut que l'algorithme pr\u00e9c\u00e9dent aboutisse ne se termine jamais. Par exemple pour \\(x=0,35\\) nous obtenons \\(0\\) pour la partie enti\u00e8re, puis : </p> <ul> <li>\\(0,35\\times 2 = 0,7\\) donc \\(0\\) ;</li> <li>\\(0,7\\times 2 = 1,4\\) donc \\(1\\) pour la partie enti\u00e8re ;</li> <li>\\(0,4\\times 2 = 0,8\\) donc \\(0\\) ;</li> <li>\\(0,8\\times 2 = 1,6\\) donc \\(1\\) ;</li> <li>\\(0,6\\times 2 = 1,2\\) donc \\(1\\) ;</li> <li>\\(0,2\\times 2 = 0,4\\) donc \\(0\\) : on retrouve donc le r\u00e9sultat de la troisi\u00e8me \u00e9tape et donc l'algorithme va boucler ind\u00e9finiment : </li> </ul> \\[0,35_{10} =  0,0101100110110110110110...\\] <p>\u00c0 retenir</p> <p>La repr\u00e9sentation binaire est parfois infinie. En machine, elle est donc forc\u00e9ment tronqu\u00e9e et limit\u00e9e \u00e0 un certain nombre de bits. La repr\u00e9sentation est alors approximative !</p> <p>Exemple pour vous en convaincre : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; x = 0.1 + 0.2\n&gt;&gt;&gt; y = 0.3\n&gt;&gt;&gt; x == y\nFalse\n</code></pre> <p>Morale :  On \u00e9vitera toujours de comparer des flottants en Python. </p>"},{"location":"premiere/02_representation_1/3_reels/flottants_cours/#2-conversion-de-la-base-2-a-la-base-10","title":"2. Conversion de la base 2 \u00e0 la base 10","text":"<p>Dans ce sens, il suffit d'appliquer la d\u00e9finition de la d\u00e9composition du nombre en fonction des puissances de 2.</p> <p>Par exemple : </p> \\[\\begin{array}{ccl}     11,1011_2 &amp; = &amp; 1\\times 2^1 + 1\\times 2^0+1\\times 2^{-1}+0\\times 2^{-2}+1\\times 2^{-3}+1\\times 2^{-4}\\\\               &amp; = &amp; 2 + 1 + 0,5 + 0,125 + 0,0625\\\\               &amp; = &amp; 3,6875_{10} \\end{array}\\]"},{"location":"premiere/02_representation_1/3_reels/flottants_cours/#3-virgule-flottante","title":"3. Virgule flottante","text":"<p>Pour la repr\u00e9sentation en machine, le principe s'inspire de l'id\u00e9e de la notation scientifique d'un r\u00e9el. En base 10 tout nombres r\u00e9el peut s'\u00e9crire sous la forme \\(x=a\\times 10^p\\) o\u00f9 \\(a\\in[1;10[\\) et \\(p\\) est un entier relatif.</p> <p>Par exemple : \\(2022 = 2,022\\times 10^3\\).</p> <p>L'exposant de 10 repr\u00e9sente le nombre de d\u00e9calages de la virgule \u00e0 effectuer (vers la droite pour un exposant positif, vers la gauche pour un exposant n\u00e9gatif) de la virgule qu'il faut affecter au nombre \\(2,022\\) pour retrouver le nombre d'origine.</p> <p>Le principe de la repr\u00e9sentation binaire des d\u00e9cimaux est le m\u00eame, mais tout est en base 2, les puissances de 10 sont donc remplac\u00e9es par des puissances de 2.</p> <p>C'est la norme internationale IEEE-754 d\u00e9finit les formats de repr\u00e9sentation des nombres \u00e0 virgule flottante.</p> <p>Consid\u00e9rons un nombre binaire \\(x\\). Nous l'\u00e9crivons sous la forme \\(\\pm 1,XXXXXX\\times 2^e\\) : c'est la \"notation scientifique binaire\". Dans cette \u00e9criture, nous avons le signe, la suite des chiffres apr\u00e8s la virgule qui s'appelle la mantisse \\(m=XXXXXX\\) et l'exposant \\(e\\).</p> <p>Repr\u00e9sentation des flottants</p> <p>Avant de pouvoir repr\u00e9senter un flottant, il faut choisir un format. Consid\u00e9rons une repr\u00e9sentation sur 32 bits (usuellement on utilise 32 bits ou 64 bits).</p> <ul> <li>Le bit de poids fort est le bit de signe : si ce bit est \u00e0 1, le nombre est n\u00e9gatif, et s'il est \u00e0 0, le nombre est positif.</li> <li>Les 8 bits suivants repr\u00e9sentent l'exposant.</li> <li>Les 23 bits suivants (bits de poids faible) repr\u00e9sentent la mantisse.</li> </ul> <p></p> <p>On a bien au total \\(1+8+23 = 32\\) bits.</p> <p>Reste \u00e0 voir comment est cod\u00e9 l'exposant. Il faut en effet pr\u00e9voir que celui-ci peut \u00eatre n\u00e9gatif. La norme ne code pas l'exposant comme nous l'avons vu pour les entiers relatifs.</p> <p>Calcul de l'exposant</p> <p>Pour un codage sur 32 bits, l'exposant est cod\u00e9 en exc\u00e8s \u00e0 127 : cela signifie que l'on peut coder uniquement les exposants compris entre \\(-126\\) et \\(+127\\) et qu'un exposant \\(e\\) est cod\u00e9 par la repr\u00e9sentation binaire de \\(e+127\\).</p> <p>On peut coder 256 entiers sur 8 bits : on pourrait donc aller de \\(-127\\) \u00e0 \\(+128\\) mais ces deux valeurs sont des valeurs r\u00e9serv\u00e9es qui ne doivent donc pas \u00eatre utilis\u00e9es.</p> <p>Le principe de l'exc\u00e8s \u00e0 127 permet de se ramener \u00e0 un nombre positif pour l'exposant.</p> <p>Exemple</p> <p>Consid\u00e9rons le nombre \\(10,125_{10} = 1010,001_2\\) obtenu au d\u00e9but de ce chapitre. Cherchons quelle est sa repr\u00e9sentation sur 32 bits (tout ce qui suit est \u00e9crit en base 2) :</p> <ul> <li>Tout d'abord nous l'\u00e9crivons sous la forme \"scientifique\" : \\(1010,001=1,010001\\times 2^3\\).</li> <li>Le signe est positif : le bit de poids fort sera donc 0.</li> <li>L'exposant vaut 3, cod\u00e9 par \\(3+127=130\\) sur 8 bits (1 octet), ce qui donne : \\(130_{10}=1000 0010_2\\) codage auquel on ajoute des z\u00e9ros \u00e0 gauche pour obtenir 8 bits si le nombre de chiffres est inf\u00e9rieur \u00e0 8.</li> <li>La mantisse est \u00e9gale \u00e0 \\(010001\\) : on compl\u00e8te par des z\u00e9ros \u00e0 droite pour arriver \u00e0 23 bits. On met cette fois-ci des z\u00e9ros \u00e0 droites : ils ne changent pas la valeur de la mantisse car il ne faut pas oublier qu'il s'agit de chiffres apr\u00e8s la virgule ! Cela donne : \\(0100 0100 0000 0000 0000 000\\).</li> <li>On met tout ensemble : le nombre \\(10,125\\) est cod\u00e9 par :</li> </ul> \\[0100\\; 0001\\; 0010\\; 0010\\; 0000\\; 0000\\; 0000\\; 0000\\] <p>Cette \u00e9criture est un peu longue. On peut la compacter en \u00e9crivant ce nombre en hexad\u00e9cimal. On rappelle que chaque bloc de 4 bit donne un chiffre de l'\u00e9criture en base 16.</p> <p>Cela donne : \\(41220000_{16}\\).</p>"},{"location":"premiere/02_representation_1/3_reels/flottants_essentiel/","title":"S2 - Repr\u00e9sentation de donn\u00e9es - Types et valeurs de base","text":""},{"location":"premiere/02_representation_1/3_reels/flottants_essentiel/#3-representation-des-reels-lessentiel","title":"3. Repr\u00e9sentation des r\u00e9els : L'essentiel","text":""},{"location":"premiere/02_representation_1/3_reels/flottants_essentiel/#passage-de-la-base-10-a-la-base-2","title":"Passage de la base 10 \u00e0 la base 2","text":"<p>Exemple avec \\(x=10,125_{10}\\).</p> <p>Pour la partie enti\u00e8re, nous savons faire : \\(10_{10}=1010_2\\).</p> <p>Pour la partie d\u00e9cimale :</p> <ul> <li>on multiplie \\(0,125\\) par \\(2\\) : \\(0,125\\times 2 = 0,25\\) : partie enti\u00e8re \\(0\\).</li> <li>on multiplie \\(0,25\\) par \\(2\\) : \\(0,25\\times 2 = 0,5\\) : partie enti\u00e8re \\(0\\).</li> <li>on multiplie \\(0,5\\) par \\(2\\) : \\(0,5\\times 2 = 1\\) : partie enti\u00e8re \\(1\\).</li> <li>on s'arr\u00eate car il n'y a plus de partir d\u00e9cimale.</li> </ul> <p>La suite des parties enti\u00e8res obtenues forme la partie d\u00e9cimale de l'\u00e9criture binaire : </p> \\[10,125_{10} = 1010,001_2 = 1\\times 2^3 + 0\\times 2^2 + 1\\times 2^1 + 0\\times 2^0 + 0\\times 2^{-1}+0\\times 2^{-2}+1\\times 2^{-3}\\] <p>Quand ce processus ne s'arr\u00eate pas (on obtient un cycle), on ne peut obtenir qu'une approximation binaire du nombre \\(x\\).</p> <p>\u00c0 retenir</p> <p>La repr\u00e9sentation binaire est parfois infinie. En machine, elle est donc forc\u00e9ment tronqu\u00e9e et limit\u00e9e \u00e0 un certain nombre de bits. La repr\u00e9sentation est alors approximative !</p> <p>Exemple pour vous en convaincre : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; x = 0.1 + 0.2\n&gt;&gt;&gt; y = 0.3\n&gt;&gt;&gt; x == y\nFalse\n</code></pre> <p>Morale :  on \u00e9vitera toujours de comparer des flottants en Python. </p>"},{"location":"premiere/02_representation_1/3_reels/flottants_essentiel/#conversion-de-la-base-2-a-la-base-10","title":"Conversion de la base 2 \u00e0 la base 10","text":"<p>Dans ce sens, il suffit d'appliquer la d\u00e9finition de la d\u00e9composition du nombre en fonction des puissances de 2.</p>"},{"location":"premiere/02_representation_1/3_reels/flottants_essentiel/#representation-en-machine-virgule-flottante","title":"Repr\u00e9sentation en machine : virgule flottante","text":"<p>C'est la norme internationale IEEE-754 d\u00e9finit les formats de repr\u00e9sentation des nombres \u00e0 virgule flottante.</p> <p>Consid\u00e9rons un nombre binaire \\(x\\). Nous l'\u00e9crivons sous la forme \\(\\pm 1,XXXXXX\\times 2^e\\) : c'est la \"notations scientifique binaire\". Dans cet \u00e9criture, nous avons le signe, la suite des chiffres apr\u00e8s la virgule qui s'appelle la mantisse \\(m=XXXXXX\\) et l'exposant \\(e\\).</p> <p>Repr\u00e9sentation des flottants</p> <p>Avant de pouvoir repr\u00e9senter un flottant, il faut choisir un format. Consid\u00e9rons une repr\u00e9sentation sur 32 bits (usuellement on utilise 32 bits ou 64 bits).</p> <ul> <li>Le bit de poids fort est le bit de signe : si ce bit est \u00e0 1, le nombre est n\u00e9gatif, et s'il est \u00e0 0, le nombre est positif.</li> <li>Les 8 bits suivants repr\u00e9sentent l'exposant.</li> <li>Les 23 bits suivants (bits de poids faible) repr\u00e9sentent la mantisse.</li> </ul> <p></p> <p>Calcul de l'exposant</p> <p>Pour un codage sur 32 bits, l'exposant est cod\u00e9 en exc\u00e8s \u00e0 127 : cela signifie que l'on peut coder uniquement les exposants compris entre \\(-126\\) et \\(+127\\) et qu'un exposant \\(e\\) est cod\u00e9 par la repr\u00e9sentation binaire de \\(e+127\\).</p>"},{"location":"premiere/02_representation_1/3_reels/flottants_exos/","title":"Exercices (flottants)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/02_representation_1/3_reels/flottants_exos/#exercice-1","title":"Exercice 1","text":"<p>D\u00e9terminer l'\u00e9criture en base 10 des nombres binaires suivants :</p> <ol> <li>\\(11,01_2\\)</li> <li>\\(10,11_2\\)</li> <li>\\(1001,101_2\\)</li> <li>\\(101,0111_2\\)</li> </ol>"},{"location":"premiere/02_representation_1/3_reels/flottants_exos/#exercice-2","title":"Exercice 2","text":"<p>D\u00e9terminer l'\u00e9criture binaire des nombres d\u00e9cimaux suivants :</p> <ol> <li>\\(7,125_{10}\\)</li> <li>\\(10,75_{10}\\)</li> <li>\\(3,375_{10}\\)</li> <li>\\(6,1875_{10}\\)</li> </ol>"},{"location":"premiere/02_representation_1/3_reels/flottants_exos/#exercice-3","title":"Exercice 3","text":"<p>D\u00e9terminer la repr\u00e9sentation binaire des nombres d\u00e9cimaux suivants selon la norme IEEE-754 sur 32 bits.</p> <ol> <li>\\(0,9218_{10}\\)</li> <li>\\(0,002125_{10}\\)</li> <li>\\(45,218_{10}\\).</li> <li>\\(126,725_{10}\\).</li> <li>\\(0,1_{10}\\).</li> <li>\\(\\frac{1}{3}_{10}\\).</li> </ol>"},{"location":"premiere/02_representation_1/3_reels/flottants_exos/#exercice-4","title":"Exercice 4","text":"<p>Dans la console Python, taper :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; 0.1 + 0.2\n</code></pre> <p>Quel r\u00e9sultat est affich\u00e9 ? Expliquer !</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/","title":"4. Bool\u00e9ens","text":"<p>Nous avons d\u00e9j\u00e0 rencontr\u00e9 les bool\u00e9ens dans la premi\u00e8re s\u00e9quence.</p> <p>En programmation informatique, un bool\u00e9en est un type de variable \u00e0 deux \u00e9tats (g\u00e9n\u00e9ralement not\u00e9s vrai et faux), destin\u00e9 \u00e0 repr\u00e9senter les valeurs de v\u00e9rit\u00e9 de la logique et l'alg\u00e8bre bool\u00e9enne. Il est nomm\u00e9 ainsi d'apr\u00e8s George Boole (1815-1864), fondateur dans le milieu du XIXe si\u00e8cle de l'alg\u00e8bre portant son nom.</p> <p>Nous avons vu qu'en Python, les deux valeurs bool\u00e9ennes sont not\u00e9es <code>True</code> et <code>False</code>.</p> <p>De mani\u00e8re \u00e9quivalents, on adopte souvent une notation num\u00e9rique en associant 1 \u00e0 <code>True</code> et 0 \u00e0 <code>False</code>.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#1-operateurs-booleens-de-base","title":"1. Op\u00e9rateurs bool\u00e9ens de base","text":"<p>Dans le cours sur les bases de Python, nous avons d\u00e9j\u00e0 vu les op\u00e9rateurs <code>or</code>, <code>and</code> et <code>not</code>.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#operateur-ou","title":"Op\u00e9rateur OU","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ OU }b\\textrm{ est vrai }\\iff a\\textrm{ est vrai ou }b\\textrm{ est vrai}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur OU : </p> \\(a\\) \\(b\\) \\(a\\)  OU  \\(b\\) 1 1 1 1 0 1 0 1 1 0 0 0 <p>Remarque</p> <p>En logique l'op\u00e9rateur OU est inclusif : cela signifie que \\(a\\) OU \\(b\\) est vrai aussi lorsque \\(a\\) est vrai et \\(b\\) est vrai. Dans la langue courant, le mot ou est le plus souvent exclusif : dans un menu, par exemple \"fromage ou dessert\" ne permet pas de prendre les deux.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#operateur-et","title":"Op\u00e9rateur ET","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ ET }b\\textrm{ est vrai }\\iff a\\textrm{ est vrai et }b\\textrm{ est vrai}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur ET : </p> \\(a\\) \\(b\\) \\(a\\)  ET  \\(b\\) 1 1 1 1 0 0 0 1 0 0 0 0"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#operateur-non","title":"Op\u00e9rateur NON","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) une expression : </p> \\[(\\textrm{NON }a)\\textrm{ est vrai }\\iff a\\textrm{ est faux}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur NON : </p> \\(a\\) NON \\(a\\) 1 0 0 1"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#2-expressions-booleennes","title":"2. Expressions bool\u00e9ennes","text":"<p>Les op\u00e9rateurs de base peuvent \u00eatre combin\u00e9s pour formuler des expressions bool\u00e9ennes plus complexes. Pour \u00e9viter des probl\u00e8mes d'interpr\u00e9tation, il est pr\u00e9f\u00e9rable d'utiliser des parenth\u00e8ses pour marquer les priorit\u00e9s.</p> <p>Exercice</p> <p>Recopier et compl\u00e9ter la table de v\u00e9rit\u00e9 ci-dessous :</p> \\(a\\) \\(b\\) NON \\(a\\) NON \\(b\\) (NON \\(a\\)) ET (NON \\(b\\)) NON((NON \\(a\\)) ET (NON \\(b\\))) \\(a\\) OU \\(b\\) 1 1 1 0 0 1 0 0 <p>Que peut-on constater ?</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#3-le-ou-exclusif","title":"3. Le ou exclusif","text":"<p>Le OU logique \u00e9tant inclusif, on d\u00e9finit un op\u00e9rateur sp\u00e9cifique pour le ou exclusif, appel\u00e9 op\u00e9rateur XOR.</p> <p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ XOR }b\\textrm{ est vrai }\\iff (a\\textrm{ est vrai et }b\\textrm{ est faux})\\textrm{ ou }(a\\textrm{ est faux et }b\\textrm{ est vrai})\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur XOR : </p> \\(a\\) \\(b\\) \\(a\\)  XOR  \\(b\\) 1 1 0 1 0 1 0 1 1 0 0 0 <p>En Python, l'op\u00e9rateur <code>xor</code> n'existe pas. Le ou exclusif est not\u00e9 <code>^</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; True ^ False\nTrue\n</code></pre>"},{"location":"premiere/02_representation_1/4_booleens/booleens_cours/#4-laddition-binaire-en-mode-booleen","title":"4. L'addition binaire en mode bool\u00e9en","text":"<p>Lorsque nous posons l'addition de deux entiers \u00e9crits en base 2, nous avons besoin d'additionner des groupes de 3 bits (un pour chaque nombre et un pour la retenue).</p> <p>Voyons ce que donne l'addition de trois bits :</p> \\(a\\) \\(b\\) \\(c\\) \\(a+b+c\\) 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 1 1 1 0 10 1 0 1 10 0 1 1 10 1 1 1 11 <p>Exercice</p> <p>En assimilant 0 \u00e0 <code>False</code> et 1 \u00e0 <code>True</code> \u00e9crire une fonction <code>add_trois_bits(a, b, c)</code> qui retourne la somme \\(a+b+c\\) en utilisant uniquement les op\u00e9rateurs ET, OU et NON. On retournera la somme sous la forme d'une cha\u00eene de deux caract\u00e8res (<code>\"01\"</code> par exemple).</p> \ud83d\udc0d Script Python<pre><code>def add_3_bits(a, b, c) :\n    unite = int(...)\n    deuzaine = int(...)\n    return str(deuzaine)+str(unite)\n\nassert add_3_bits(0,0,0)==\"00\"\nassert add_3_bits(1,0,0)==\"01\"\nassert add_3_bits(0,1,0)==\"01\"\nassert add_3_bits(0,0,1)==\"01\"\nassert add_3_bits(1,1,0)==\"10\"\nassert add_3_bits(1,0,1)==\"10\"\nassert add_3_bits(0,1,1)==\"10\"\nassert add_3_bits(1,1,1)==\"11\"\nprint(\"C'est parfait !\")\n</code></pre>"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/","title":"S2 - Repr\u00e9sentation de donn\u00e9es - Types et valeurs de base","text":""},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#4-booleens-lessentiel","title":"4. Bool\u00e9ens : L'essentiel","text":"<p>En programmation informatique, un bool\u00e9en est un type de variable \u00e0 deux \u00e9tats (g\u00e9n\u00e9ralement not\u00e9s vrai et faux)</p> <p>En Python, les deux valeurs bool\u00e9ennes sont not\u00e9es True et False.</p> <p>De mani\u00e8re \u00e9quivalents, on adopte souvent une notation num\u00e9rique en associant 1 \u00e0 True et 0 \u00e0 False.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#operateurs-booleens-de-base","title":"Op\u00e9rateurs bool\u00e9ens de base","text":"<p>Dans le cours sur les bases de Python, nous avons d\u00e9j\u00e0 vu les op\u00e9rateurs <code>or</code>, <code>and</code> et <code>not</code>.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#operateur-ou","title":"Op\u00e9rateur OU","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ OU }b\\textrm{ est vrai }\\iff a\\textrm{ est vrai ou }b\\textrm{ est vrai}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur OU (inclusif): </p> \\(a\\) \\(b\\) \\(a\\)  OU  \\(b\\) 1 1 1 1 0 1 0 1 1 0 0 0"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#operateur-et","title":"Op\u00e9rateur ET","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ ET }b\\textrm{ est vrai }\\iff a\\textrm{ est vrai et }b\\textrm{ est vrai}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur ET : </p> \\(a\\) \\(b\\) \\(a\\)  ET  \\(b\\) 1 1 1 1 0 0 0 1 0 0 0 0"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#operateur-non","title":"Op\u00e9rateur NON","text":"<p>D\u00e9finition</p> <p>Soit \\(a\\) une expression : </p> \\[(\\textrm{NON }a)\\textrm{ est vrai }\\iff a\\textrm{ est faux}\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur NON : </p> \\(a\\) NON \\(a\\) 1 0 0 1"},{"location":"premiere/02_representation_1/4_booleens/booleens_essentiel/#le-ou-exclusif","title":"Le ou exclusif","text":"<p>Le OU logique \u00e9tant inclusif, on d\u00e9finit un op\u00e9rateur sp\u00e9cifique pour le ou exclusif, appel\u00e9 op\u00e9rateur XOR.</p> <p>D\u00e9finition</p> <p>Soit \\(a\\) et \\(b\\) deux expressions : </p> \\[a\\textrm{ XOR }b\\textrm{ est vrai }\\iff (a\\textrm{ est vrai et }b\\textrm{ est faux})\\textrm{ ou }(a\\textrm{ est faux et }b\\textrm{ est vrai})\\] <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur XOR : </p> \\(a\\) \\(b\\) \\(a\\)  XOR  \\(b\\) 1 1 0 1 0 1 0 1 1 0 0 0 <p>En Python, le ou exclusif est note <code>^</code>.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/","title":"Exercices (bool\u00e9ens)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-1","title":"Exercice 1","text":"<ol> <li>Construire la table de v\u00e9rit\u00e9 de l'expression : a OU (NON b)</li> <li>Construire la table de v\u00e9rit\u00e9 de l'expression : NON a ET (b OU c)</li> <li>Construire la table de v\u00e9rit\u00e9 de l'expression : (a ET NON b) OU (NON a ET b)</li> <li>Construire la table de v\u00e9rit\u00e9 de l'expression : (a OU b) ET (a OU c)</li> </ol>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-2","title":"Exercice 2","text":"<p>Donner la valeur des expressions bool\u00e9ennes suivantes :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; (1 &gt; 2) and (3 &lt; 5)\n&gt;&gt;&gt; ((4 - 7) &gt;= 2) or (2 != 1 + 1)\n&gt;&gt;&gt; a = 223\n&gt;&gt;&gt; b = 455\n&gt;&gt;&gt; a != (b // 2)\n</code></pre>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-3","title":"Exercice 3","text":"<p>On consid\u00e8re la table de v\u00e9rit\u00e9 de l'expression bool\u00e9enne Z ci-dessous :</p> x Z(x) 0 0 1 0 <p>Exprimer Z \u00e0 l'aide des fonctions bool\u00e9ennes ET, OU, NON.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-4","title":"Exercice 4","text":"<p>On consid\u00e8re la table de v\u00e9rit\u00e9 de l'expression U ci-dessous :</p> x U(x) 0 1 1 1 <p>Exprimer U \u00e0 l'aide des fonctions bool\u00e9ennes ET, OU, NON.</p>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-5","title":"Exercice 5","text":"<p>On consid\u00e8re l'extrait de code suivant :</p> \ud83d\udc0d Script Python<pre><code>while (a &lt; 20) or (b &gt; 50):\n    ......\n    ......\n</code></pre> <p>Quelles conditions permettent de mettre fin \u00e0 cette boucle ?</p> <ul> <li> la boucle prend fin lorsque \\(a &lt; 20\\) ou \\(b &gt; 50\\)</li> <li> la boucle prend fin lorsque \\(a &lt; 20\\) et \\(b &gt; 50\\)</li> <li> la boucle prend fin lorsque \\(a \\geqslant 20\\) ou \\(b \\leqslant 50\\)</li> <li> la boucle prend fin lorsque \\(a \\geqslant 20\\) et \\(b \\leqslant 50\\)</li> </ul>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-6","title":"Exercice 6","text":"<p>Si A et B sont des variables bool\u00e9ennes, laquelle de ces expressions bool\u00e9ennes est \u00e9quivalente \u00e0 (not A) or B ?</p> <ul> <li> (A and B) or (not A and B)</li> <li> (A and B) or (not A and B) or (not A and not B)</li> <li> (not A and B) or (not A and not B)</li> <li> (A and B) or (not A and not B)</li> </ul>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-7","title":"Exercice 7","text":"<p>Quelle table de v\u00e9rit\u00e9 correspond \u00e0 l'expression (NON(A) OU B) ?</p> <p>Remarque : dans les tables propos\u00e9es, la premi\u00e8re colonne donne les valeurs de A, la premi\u00e8re ligne les valeurs de B.</p> <ul> <li> <p> Table 1 :</p> A\\B 0 1 0 0 1 1 1 1 </li> <li> <p> Table 2 :</p> A\\B 0 1 0 1 1 1 0 0 </li> <li> <p> Table 3 :</p> A\\B 0 1 0 1 1 1 0 1 </li> <li> <p> Table 4 :</p> A\\B 0 1 0 1 0 1 1 0 </li> </ul>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-8","title":"Exercice 8","text":"<p>Parmi les quatre expressions suivantes, laquelle s'\u00e9value en <code>True</code> ?</p> <ul> <li> <code>False and (True and False)</code></li> <li> <code>False or (True and False)</code></li> <li> <code>True and (True and False)</code></li> <li> <code>True or (True and False)</code></li> </ul>"},{"location":"premiere/02_representation_1/4_booleens/booleens_exos/#exercice-9","title":"Exercice 9","text":"<p>\u00c0 quelle affectation sont \u00e9quivalentes les instructions suivantes, o\u00f9 <code>a</code>, <code>b</code> sont des variables enti\u00e8res et <code>c</code> une variable bool\u00e9enne ?</p> \ud83d\udc0d Script Python<pre><code>if a==b:\n    c = True\nelif a &gt; b+10:\n    c = True\nelse:\n    c = False\n</code></pre> <ul> <li> <code>c = (a==b) or (a &gt; b+10)</code></li> <li> <code>c = (a==b) and (a &gt; b+10)</code></li> <li> <code>c = not(a==b)</code></li> <li> <code>c = not(a &gt; b+10)</code></li> </ul>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/","title":"5. Repr\u00e9sentation d'un texte en machine","text":"<p>Une cha\u00eene de caract\u00e8res est une suite ordonn\u00e9e de caract\u00e8res. Ces caract\u00e8res peuvent \u00eatre :</p> <ul> <li>des lettres minuscules ou majuscules ;</li> <li>des symboles de ponctuation ou autres ;</li> <li>des chiffres.</li> </ul> <p>En machine, les caract\u00e8res, comme toute autre information, est cod\u00e9e de fa\u00e7on num\u00e9rique par un nombre binaire.</p> <p>Le probl\u00e8me qui se pose est que les lettres de l'alphabet, par exemple, ne sont pas les m\u00eames dans toutes les langues et des caract\u00e8res. Il faut pouvoir coder des caract\u00e8res aussi divers que : \u00e9, \u00e0, \u00f4, \u00df, \\(\\Delta\\), \ufebe, \u30cd, \u4e7b.</p> <p>Diff\u00e9rents syst\u00e8mes d'encodage des caract\u00e8res existent.</p> <p>\u00c0 retenir</p> <p>Une repr\u00e9sentation informatique des caract\u00e8res n\u00e9cessite d'associer \u00e0 chaque caract\u00e8re une unique s\u00e9quence d'octets. Cette conversion s'effectue \u00e0 l'aide d'une table de codage et d'un encodage.</p> <ul> <li>Une table de codage ou jeu de caract\u00e8res ou charset, associe un entier nomm\u00e9 point de code \u00e0 un caract\u00e8re.</li> <li>Un encodage associe \u00e0 un point de code une s\u00e9quence d'octets.</li> </ul> <p>Pour une table de codage, il peut exister plusieurs encodages : ce sera le cas pour la table Unicode, pr\u00e9sent\u00e9e ci-dessous, pour laquelle plusieurs encodages existent (UTF-8, UTF-16, ...).</p>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/#1-le-code-ascii","title":"1. Le code ASCII","text":"<p>Dans les premiers temps de l'informatique, de nombreux syst\u00e8mes de codage, incompatibles entre eux, existaient.</p> <p>En 1960, l'organisation internationale de normalisation (International Standard Office : ISO) a cr\u00e9\u00e9 la norme ASCII (American Standard Code for Information Interchange) pour \u00e9crire des textes en anglais.</p> <p>La table ASCII fournit la correspondance entre 128 caract\u00e8res et leur repr\u00e9sentation binaire. Les caract\u00e8res sont num\u00e9rot\u00e9s de 0 \u00e0 127. Comme \\(2^7=128\\),il suffit de 7 bits par caract\u00e8re. Cependant, un octet est le plus souvent utilis\u00e9, le bit de poids fort, inutilis\u00e9, \u00e9tant toujours \u00e9gal \u00e0 0.</p> <p>Dans le code ASCII, les codes des lettres minuscules et des lettres majuscules diff\u00e8rent d'un bit, le sixi\u00e8me. Par exemple \"G\" est cod\u00e9 par \\(71_{10}=0100\\;0111_2\\) et \"g\" est cod\u00e9 par \\(103_{10}=0110\\;0111_2\\). Cela revient \u00e0 ajouter \\(32=2^5\\) pour passer du code de la majuscule au code de la minuscule.</p> <p>Les chiffres sont cod\u00e9s par le nombre binaire \\(0011\\;XXXX_2\\) o\u00f9 \\(XXXX_2\\) est la valeur du chiffre en binaire. Par exemple 5 est cod\u00e9 par \\(0011\\;0101_2\\).</p> <p>Le code ASCII d'un caract\u00e8re \u00e9tant compos\u00e9 de 8 bits, il peut aussi \u00eatre repr\u00e9sent\u00e9 par un nombre hexad\u00e9cimal \u00e0 deux chiffres.</p> <p>Voici la table ASCII compl\u00e8te : </p> <p></p> <p>Le code ASCII est suffisant pour \u00e9crire un texte en anglais ou pour \u00e9crire un programme informatique et il est encore tr\u00e8s largement utilis\u00e9 de nos jours, car il a l'avantage d'\u00eatre l\u00e9ger.</p> <p>Cependant, il est insuffisant pour repr\u00e9senter d'autres langues que l'anglais : pas de caract\u00e8res accentu\u00e9s, de c-c\u00e9dille, pas de caract\u00e8res grecs, h\u00e9breux, arabes, chinois, ...</p>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/#2-le-code-iso-8859-1","title":"2. Le code ISO-8859-1","text":"<p>Pour encoder les langues europ\u00e9ennes occidentales, plusieurs extensions du code ASCII ont \u00e9t\u00e9 d\u00e9finies par l'ISO, comme notamment la norme ISO-8859-1 (appel\u00e9e aussi ISO-Latin-1). Avec cette norme :</p> <ul> <li>le codage des caract\u00e8res pr\u00e9sents dans la table ASCII est conserv\u00e9 ;</li> <li>chaque caract\u00e8re est toujours cod\u00e9 sur un octet.</li> </ul> <p>On exploite le bit de poids fort inutilis\u00e9 par le codage ASCII : cela permet de coder \\(2^8=256\\) caract\u00e8res, soir deux fois plus qu'avec le code ASCII.</p>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/#3-le-code-unicode","title":"3. Le code Unicode","text":"<p>Ces extensions du code ASCII ne suffisent \u00e9videmment pas \u00e0 encoder les caract\u00e8res des langues non latines. Il a donc fallu cr\u00e9er une autre norme internationale : la norme Unicode, apparue au d\u00e9but des ann\u00e9es 90.</p> <p>Dans sa version 14.0 publi\u00e9e en septembre 2021, la table Unicode compte 144 697 caract\u00e8res couvrant plus de 150 \u00e9critures.</p> <p>Unicode est une table qui regroupe tous les caract\u00e8res existant au monde, mais ne s'occupe pas de la fa\u00e7on dont les caract\u00e8res sont cod\u00e9s dans la machine. Il existe pour cela plusieurs formats diff\u00e9rents, le plus r\u00e9pandu \u00e9tant l'encodage UTF-8.</p> <p>UTF-8 est un code \u00e0 taille variable dans lequel les caract\u00e8res sont repr\u00e9sent\u00e9s sur 1, 2, 3 ou 4 octets.</p> <p>Les 128 premiers caract\u00e8res de la table UTF-8 sont compatibles avec le codage ASCII. Ainsi le codage UTF-8 d'un texte ne comportant que des caract\u00e8res pr\u00e9sents dans la table ASCII sera le m\u00eame que le codage ASCII de ce texte.</p> <p>Ce ne sera pas vrai pour un texte ISO-8859-1.</p> <p>Il importe donc, quand on veut d\u00e9coder un texte, de savoir quel est le codage utilis\u00e9 sous peine de d\u00e9coder improprement les caract\u00e8res, ce qui arrive par exemple lorsque l'encodage d'une page web n'est pas bien reconnu par le navigateur :</p> <p></p> <p>On repr\u00e9sente en g\u00e9n\u00e9ral un code UTF-8 sous la forme <code>U+XXXX</code> o\u00f9 XXXX est un nombre \u00e9crit en hexad\u00e9cimal.</p> <p>En voici quelques exemples :</p> Code UTF-8 Caract\u00e8re \u00c9criture U+FEBE \ufebe Arabe U+05E6 \u05e6 H\u00e9breu U+30CD \u30cd Japonais katakana U+4E7B \u4e7b Chinois <p>Le site unicode-table.com/fr liste tous les caract\u00e8res de la table Unicode.</p> <p>Remarque</p> <p>Depuis sa version 3, Python utilise l'encodage UTF-8 pour les cha\u00eenes de caract\u00e8res.</p> <p>Nous disposons en Python de deux fonctions li\u00e9es \u00e0 ce codage :</p> <ul> <li><code>chr(x)</code> : retourne le caract\u00e8re cod\u00e9 par l'entier \\(x\\) \u00e9crit en base 10 ;</li> <li><code>ord(c)</code> : retourne l'entier correspondant au caract\u00e8re c (de type str).</li> </ul> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; chr(244)\n'\u00f4'\n&gt;&gt;&gt; ord(\"\u20ac\")\n8364\n</code></pre>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/#4-convertir-un-fichier-dun-encodage-a-un-autre","title":"4. Convertir un fichier d'un encodage \u00e0 un autre","text":"<p>Pour convertir un fichier d'un encodage \u00e0 un autre, on peut utiliser l'\u00e9diteur Notepad++ dans lequel on trouve un menu \"Encodage\" comprenant par exemple une commande \"convertir en UTF-8\".</p> <p></p>"},{"location":"premiere/02_representation_1/5_textes/textes_cours/#5-ouverture-dun-fichier-texte-en-python","title":"5. Ouverture d'un fichier texte en Python","text":"<p>Une bonne compr\u00e9hension du probl\u00e8me de l'encodage des caract\u00e8res permet d'\u00e9viter certaines erreurs lors de l'utilisation de fichiers textes en Python.</p> <p>Consid\u00e9rons par exemple deux fichiers textes <code>texte_ascii.txt</code> et <code>texte_utf-8.txt</code> contenant le m\u00eame texte, l'un \u00e9tant encod\u00e9 en ASCII \u00e9tendu (c'est-\u00e0-dire en ISO-8859-1) et l'autre en UTF-8.</p> <p>Le programme ci-dessous ouvre ces fichiers l'un apr\u00e8s l'autre et affiche leur contenu dans la console interactive.</p> \ud83d\udc0d Script Python<pre><code>from io import open\n\nf = open(\"texte_ascii.txt\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n\nprint(\"---------\")\n\nf = open(\"texte_utf-8.txt\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n</code></pre> <p>Tout d'abord, le programme est ex\u00e9cut\u00e9 sous Windows :</p> \ud83d\udc0d Console Python<pre><code>Ceci est un fichier texte\n\nencod\u00e9 au format ASCII \u00e9tendu\n\nVoici quelques mots avec des caract\u00e8res sp\u00e9ciaux\n\ncomme par exemple for\u00e7at ou encore Ni\u00f1o ...\n---------\nCeci est un fichier texte\n\nencod\u00c3\u00a9 au format UTF-8 \u00c3\u00a9tendu\n\nVoici quelques mots avec des caract\u00c3\u00a8res sp\u00c3\u00a9ciaux\n\ncomme par exemple for\u00c3\u00a7at ou encore Ni\u00c3\u00b1o ...\n</code></pre> <p>Et maintenant sous Linux :</p> \ud83d\udc0d Console Python<pre><code>Traceback (most recent call last):\n  File \"/usr/lib/python3.10/idlelib/run.py\", line 578, in runcode\nexec(code, self.locals)\n  File \"/home/fabrice/windows/lecture_fichier.py\", line 4, in &lt;module&gt;\nfor ligne in f.readlines():\n  File \"/usr/lib/python3.10/codecs.py\", line 322, in decode\n(result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 32: invalid continuation byte\n</code></pre> <p>Pourquoi cette diff\u00e9rence ? La fonction <code>open</code> de Python essaie de lire le fichier texte en utilisant l'encodage du syst\u00e8me d'exploitation dans lequel Python est utilis\u00e9. </p> <ul> <li>Sous Windows, l'encodage du syst\u00e8me est un d\u00e9riv\u00e9 de ISO-8859-1. Le fichier ASCII est donc bien lu et affich\u00e9, le fichier UTF-8, lui, est bien lu, mais les caract\u00e8res ne sont pas affich\u00e9s correctement.</li> <li>Sous Linux, l'encodage du syst\u00e8me est UTF-8. Le fichier ASCII provoque une erreur en lecture car Python s'attend par d\u00e9faut \u00e0 lire des caract\u00e8res encod\u00e9s en UTF-8.</li> </ul> <p>Pour \u00e9viter ce type de probl\u00e8me et assurer la portabilit\u00e9 d'un programme d'un syst\u00e8me d'exploitation \u00e0 un autre, il est pr\u00e9f\u00e9rable de toujours indiquer l'encodage \u00e0 la fonction <code>open</code>. Le programme suivant fonctionnera sous les deux syst\u00e8mes et provoquera l'affichage attendu.</p> \ud83d\udc0d Script Python<pre><code>from io import open\n\nf = open(\"texte_ascii.txt\", encoding=\"ISO-8859-1\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n\nprint(\"---------\")\n\nf = open(\"texte_utf-8.txt\", encoding=\"UTF-8\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n</code></pre> \ud83d\udc0d Console Python<pre><code>Ceci est un fichier texte\n\nencod\u00e9 au format ASCII \u00e9tendu\n\nVoici quelques mots avec des caract\u00e8res sp\u00e9ciaux\n\ncomme par exemple for\u00e7at ou encore Ni\u00f1o ...\n---------\nCeci est un fichier texte\n\nencod\u00e9 au format UTF-8 \u00e9tendu\n\nVoici quelques mots avec des caract\u00e8res sp\u00e9ciaux\n\ncomme par exemple for\u00e7at ou encore Ni\u00f1o ...\n</code></pre>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/","title":"S2 - Repr\u00e9sentation de donn\u00e9es - Types et valeurs de base","text":""},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#5-representation-dun-texte-en-machine-lessentiel","title":"5. Repr\u00e9sentation d'un texte en machine : L'essentiel","text":"<p>Pour repr\u00e9senter les caract\u00e8res alphanum\u00e9riques en machine, il faut d\u00e9finir une repr\u00e9sentation num\u00e9rique (un point de code) de chaque caract\u00e8re (table de codage), puis une fa\u00e7on d'associer chacun de ces points de code \u00e0 une suite d'octets (encodage).</p>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#le-code-ascii","title":"Le code ASCII","text":"<p>Cod\u00e9 sur 8 bits dont seulement 7 sont utilis\u00e9s, la table ASCII permet de coder toutes les lettres et symboles utilis\u00e9s par la langue anglaise, ainsi que des caract\u00e8res sp\u00e9ciaux. Au total, 128 caract\u00e8res sont cod\u00e9s.</p>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#le-code-iso-8859-1","title":"Le code ISO-8859-1","text":"<p>Aussi appel\u00e9 ISO-Latin-1, il s'agit d'un code ASCII \u00e9tendu. On utilise le bit de poids fort pout coder 128 caract\u00e8res suppl\u00e9mentaires. Ce codage est ainsi suffisant pour toutes les langues d'Europe occidentale et permet de coder \u00e9, \u00e8, \u00e0, \u00e7, \u00df, ...</p>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#le-code-unicode-et-lencodage-utf-8","title":"Le code Unicode et l'encodage UTF-8","text":"<p>Dans sa version 14.0 publi\u00e9e en septembre 2021, la table Unicode compte 144 697 caract\u00e8res couvrant plus de 150 \u00e9critures.</p> <p>Unicode est une table qui regroupe tous les caract\u00e8res existant au monde mais ne s'occupe pas de la fa\u00e7on dont les caract\u00e8res sont cod\u00e9s dans la machine. Il existe pour cela plusieurs formats diff\u00e9rents, le plus r\u00e9pandu \u00e9tant l'encodage UTF-8.</p> <p>UTF-8 est un code \u00e0 taille variable dans lequel les caract\u00e8res sont repr\u00e9sent\u00e9s sur 1, 2, 3 ou 4 octets.</p> <p>Les caract\u00e8res de la table ASCII sont cod\u00e9s de la m\u00eame fa\u00e7on en ASCII et en UTF-8, mais ce n'est pas le cas des caract\u00e8res suppl\u00e9mentaires cod\u00e9s par l'encodage ISO-8859-1.</p> <p>Quand on utilise du texte dans un navigateur web ou dans un programme Python, il faut prendre garde \u00e0 l'encodage utilis\u00e9 pour \u00eatre s\u00fbr d'obtenir l'affichage attendu.</p> <p>Fonctions Python \u00e0 conna\u00eetre : </p> <ul> <li><code>chr(x)</code> : retourne le caract\u00e8re cod\u00e9 par l'entier \\(x\\) \u00e9crit en base 10 ;</li> <li><code>ord(c)</code> : retourne l'entier correspondant au caract\u00e8re c (de type str).</li> </ul>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#changer-lencodage-dun-fichier-texte","title":"Changer l'encodage d'un fichier texte","text":"<p>Pour changer l'encodage d'un fichier texte, le plus facile est d'utiliser l'\u00e9diteur Notepad++ et son menu \"Encodage\".</p>"},{"location":"premiere/02_representation_1/5_textes/textes_essentiel/#ouverture-dun-fichier-texte-en-python","title":"Ouverture d'un fichier texte en Python","text":"<p>Pour assurer la portabilit\u00e9 d'un programme d'un syst\u00e8me d'exploitation \u00e0 un autre, il est pr\u00e9f\u00e9rable de toujours indiquer l'encodage \u00e0 la fonction <code>open</code>. </p> \ud83d\udc0d Script Python<pre><code>from io import open\n\nf = open(\"texte_ascii.txt\", encoding=\"ISO-8859-1\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n\nprint(\"---------\")\n\nf = open(\"texte_utf-8.txt\", encoding=\"UTF-8\")\nfor ligne in f.readlines():\n    print(ligne)\nf.close()\n</code></pre>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/","title":"Exercices (texte)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire une proc\u00e9dure qui affiche \u00e0 l'\u00e9cran la table des 128 caract\u00e8res ASCII sur 8 lignes de 16 colonnes, avec deux boucles <code>for</code> imbriqu\u00e9es et la fonction <code>chr()</code>.</p>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/#exercice-2","title":"Exercice 2","text":"<p>L'encodage consiste \u00e0 coder un caract\u00e8re par un nombre. Il ne faut pas confondre cette op\u00e9ration de num\u00e9risation avec le chiffrement, ou cryptage, qui consiste aussi \u00e0 remplacer des caract\u00e8res par des nombres, mais de telle fa\u00e7on que le d\u00e9codage ne puisse se faire que par le destinataire du message. La num\u00e9risation est cependant le plus souvent la premi\u00e8re \u00e9tape du chiffrement.</p> <p>Consid\u00e9rons le proc\u00e9d\u00e9 rot-13 qui consiste \u00e0 remplacer une lettre cod\u00e9e par l'entier \\(n\\) par la lettre cod\u00e9e par l'entier \\(n+13\\) (on se limite aux caract\u00e8res de la table ASCII).</p> <p>Comme l'alphabet latin compte 26 lettres, le d\u00e9chiffrement se fait exactement par la m\u00eame op\u00e9ration.</p> <p>Pour trouver que l'image par rot-13 du caract\u00e8re 'R' est 'E' : </p> <ul> <li>on calcule d'abord le rang alphab\u00e9tique du caract\u00e8re :     \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ord('R') - ord('A')\n17\n</code></pre></li> <li>puis on ajoute 13 \u00e0 ce rang et on prend le reste dans la division euclidienne par 26 :     \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; (ord('R') - ord('A') + 13) % 26\n4\n</code></pre></li> <li>enfin on retrouve le rang du caract\u00e8re associ\u00e9 au rang alphab\u00e9tique calcul\u00e9 :     \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; chr(ord('A') + 4)\n'E'\n</code></pre></li> </ul> <p>\u00c9crire une fonction <code>rot13(chaine)</code> qui chiffre ou d\u00e9chiffre la cha\u00eene (en majuscules ou convertie en majuscules avec <code>chaine.upper())</code> pass\u00e9e en param\u00e8tre, avec l'algorithme rot13.</p>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/#exercice-3","title":"Exercice 3","text":"<ol> <li> <p>Sur une page web qui s'affiche sur notre navigateur on peut lire :</p> <p>\u00ab En cons\u00c3\u00a9quence, l'Assembl\u00c3\u00a9e Nationale reconna\u00c3\u00aet et d\u00c3\u00a9clare, en pr\u00c3\u00a9sence \u00bb</p> <p>Quelle peut \u00eatre la cause des affichages \u00e9tranges de cette page ?</p> <ul> <li> l'encodage des caract\u00e8res n'est pas celui attendu par le navigateur</li> <li> le texte original est en japonais</li> <li> la taille des caract\u00e8res n'est pas celle attendue par le navigateur</li> <li> la connexion \u00e0 Internet pr\u00e9sente des coupures</li> </ul> </li> <li> <p>Le code ASCII permet de repr\u00e9senter en binaire les caract\u00e8res alphanum\u00e9riques. Quel est son principal inconv\u00e9nient ?</p> <ul> <li> Il utilise beaucoup de bits.</li> <li> Il ne diff\u00e9rencie pas les majuscules des minuscules.</li> <li> Il ne repr\u00e9sente pas les caract\u00e8res accentu\u00e9s.</li> <li> Il n'est passer compatible avec la plupart des syst\u00e8mes informatiques</li> </ul> </li> </ol>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/#exercice-4","title":"Exercice 4","text":"<ol> <li>Parmi les caract\u00e8res ci-dessous, lequel ne fait pas partie du code ASCII ?<ul> <li> a</li> <li> B</li> <li> @</li> <li> \u00e9</li> </ul> </li> <li>Laquelle de ces affirmations concernant le codage UTF-8 des caract\u00e8res est vraie ?<ul> <li> le codage UTF-8 est sur 7 bits</li> <li> le codage UTF-8 est sur 8 bits</li> <li> le codage UTF-8 est sur 1 \u00e0 4 octets</li> <li> le codage UTF-8 est sur 8 octets</li> </ul> </li> <li>Quel est un avantage du codage UTF-8 par rapport au codage ASCII ?<ul> <li> il permet de coder un caract\u00e8re sur un octet au lieu de deux</li> <li> il permet de coder les majuscules</li> <li> il permet de coder tous les caract\u00e8res</li> <li> il permet de coder diff\u00e9rentes polices de caract\u00e8res</li> </ul> </li> </ol>"},{"location":"premiere/02_representation_1/5_textes/textes_exercices/#exercice-5","title":"Exercice 5","text":"<p>En Python, pour saisir directement un caract\u00e8re \u00e0 partir de son point de code Unicode, on peut utiliser des s\u00e9quences d'\u00e9chappement sp\u00e9ciales : '\\uxxxx' si le point de code peut s'\u00e9crire avec 4 chiffres hexad\u00e9cimaux, ou '\\Uxxxxxxxx' s'il faut plus de quatre chiffres, en remplissant par des 0 \u00e0 gauche les positions vides sur les huit possibles.</p> <ol> <li>Tester l'instruction ci-dessous dans une console Python :      \ud83d\udc0d Script Python<pre><code>print(\"\\U0001f600\")\n</code></pre></li> <li>\u00c9crire un code Python qui affiche tous les caract\u00e8res dont le point de code est compris entre <code>U+1F600</code> et <code>U+1F64F</code> sur des lignes de 16 caract\u00e8res par colonne.</li> </ol>"},{"location":"premiere/03_archi_SE/","title":"03-Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation","text":""},{"location":"premiere/03_archi_SE/#programme","title":"Programme","text":"<p>Exprimer un algorithme dans un langage de programmation a pour but de le rendre ex\u00e9cutable par une machine dans un contexte donn\u00e9. La d\u00e9couverte de l'architecture des machines et de leur syst\u00e8me d'exploitation constitue une \u00e9tape importante.</p> Contenus Capacit\u00e9s attendues Commentaires Mod\u00e8le d'architecture s\u00e9quentielle (von Neumann) Distinguer les r\u00f4les et les caract\u00e9ristiques des diff\u00e9rents constituants d'une machine. D\u00e9rouler l'ex\u00e9cution d'une s\u00e9quence d'instructions simples du type langage machine. La pr\u00e9sentation se limite aux concepts g\u00e9n\u00e9raux. On distingue les architectures monoprocesseur et les architectures multiprocesseur. Des activit\u00e9s d\u00e9branch\u00e9es sont propos\u00e9es. Les circuits combinatoires r\u00e9alisent des fonctions bool\u00e9ennes. Syst\u00e8mes d'exploitation Identifier les fonctions d'un syst\u00e8me d'exploitation. Utiliser les commandes de base en ligne de commande. G\u00e9rer les droits et permissions d'acc\u00e8s aux fichiers. Les diff\u00e9rences entre syst\u00e8mes d'exploitation libres et propri\u00e9taires sont \u00e9voqu\u00e9es. Les \u00e9l\u00e8ves utilisent un syst\u00e8me d'exploitation libre. Il ne s'agit pas d'une \u00e9tude th\u00e9orique des syst\u00e8mes d'exploitation."},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/","title":"T.P. : circuits logiques","text":"<p>Les exercices de cette page sont \u00e0 r\u00e9aliser \u00e0 l'aide du simulateur inclus dans la page.</p> <p>Une fois les exercices termin\u00e9s, imprimer la page dans un fichier PDF et la d\u00e9poser dans le dossier r\u00e9seau pr\u00e9vu \u00e0 cet effet.</p>"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-1","title":"Exercice 1","text":"<p>R\u00e9aliser un circuit logique \u00e0 4 entr\u00e9es, \u00e0 l'aide des portes disponibles \u00e0 gauche, telle que Sortie vaut 1 si, et seulement si, au moins une des entr\u00e9es est non nulle.</p>"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-2","title":"Exercice 2","text":"<p>Dessiner un circuit logique qui a 4 entr\u00e9es A, B, C et D et dont la sortie O vaut 1 si, et seulement si, toutes les entr\u00e9es sont nulles.</p>        {         \"v\": 2,         \"in\": [           {\"pos\": [150, 100], \"id\": 8, \"name\": \"A\", \"val\": 0},           {\"pos\": [150, 140], \"id\": 9, \"name\": \"B\", \"val\": 0},           {\"pos\": [150, 180], \"id\": 10, \"name\": \"C\", \"val\": 0},           {\"pos\": [150, 220], \"id\": 11, \"name\": \"D\", \"val\": 0}                   ],         \"out\": [{\"pos\": [600, 160], \"id\": 12, \"name\": \"Sortie\"}]      }"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-3","title":"Exercice 3","text":"<p>Dessiner un circuit logique correspondant \u00e0 la table ci-dessous.</p> A S O 0 0 0 1 0 1 0 1 1 1 1 0 <p>L'objectif est de renvoyer la valeur de A si S = 0 et de renvoyer (non A) sinon.</p>        {         \"v\": 2,         \"in\": [           {\"pos\": [150, 100], \"id\": 8, \"name\": \"A\", \"val\": 0},           {\"pos\": [150, 220], \"id\": 11, \"name\": \"S\", \"val\": 0}                   ],         \"out\": [{\"pos\": [600, 160], \"id\": 12, \"name\": \"O\"}]      }"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-4","title":"Exercice 4","text":"<p>On consid\u00e8re le circuit suivant : </p> <p></p> <ol> <li>Reproduire ce circuit dans le simulateur ci-dessous.</li> <li>En vous aidant du simulateur, \u00e9tablir la table de v\u00e9rit\u00e9 de ce circuit.</li> <li>Que fait ce circuit ?</li> </ol> <p>Votre r\u00e9ponse ci-dessous : </p> Votre r\u00e9ponse ici ...        {         \"v\": 3       }"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-5","title":"Exercice 5","text":"<p>On peut faire une porte NON avec une porte NAND.</p> <p>En rajoutant les fils manquants, utilisez la porte NAND (non-et) pour que la valeur de Sortie soit la m\u00eame que celle de T\u00e9moin, quelle que soit la valeur de Entr\u00e9e.</p> <ul> <li>Pour rajouter un fil, il suffit de cliquer sur la sortie d'une porte et de faire glisser le fil jusqu'\u00e0 l'entr\u00e9e d'une autre porte.</li> <li>Pour changer la valeur de Entr\u00e9e, il suffit de cliquer dessus.</li> </ul>        {         \"v\": 3,         \"in\": [{\"pos\": [230, 240], \"id\": 0, \"name\": \"Entr\u00e9e\", \"val\": 0}],         \"gates\": [{\"type\": \"NAND\", \"pos\": [370, 190], \"in\": [1, 2], \"out\": 3}, {\"type\": \"NOT\", \"pos\": [370, 280], \"in\": 4, \"out\": 5}],         \"out\": [{\"pos\": [510, 190], \"id\": 6, \"name\": \"Sortie\"}, {\"pos\": [510, 280], \"id\": 7, \"name\": \"T\u00e9moin\"}],         \"wires\": [[3, 6], [0, 4], [5, 7]]       }"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-6","title":"Exercice 6","text":"<p>En rajoutant des portes NAND, disponibles \u00e0 gauche, faites des circuits \u00e9quivalents aux portes ET et OU d\u00e9j\u00e0 install\u00e9es.</p> <ul> <li>En cas d'erreur de manipulation, vous pouvez r\u00e9initialiser en utilisant le bouton \u00e0 droite.</li> </ul>        {         \"v\": 3,         \"in\": [           {\"pos\": [170, 140], \"id\": 31, \"name\": \"A1\", \"val\": 0},           {\"pos\": [170, 180], \"id\": 32, \"name\": \"B1\", \"val\": 0},           {\"pos\": [170, 440], \"id\": 38, \"name\": \"A2\", \"val\": 0},           {\"pos\": [170, 480], \"id\": 39, \"name\": \"B2\", \"val\": 0}         ],         \"gates\": [{\"type\": \"AND\", \"pos\": [320, 240], \"in\": [33, 34], \"out\": 35}, {\"type\": \"OR\", \"pos\": [320, 540], \"in\": [40, 41], \"out\": 42}],         \"out\": [           {\"pos\": [460, 240], \"id\": 36, \"name\": \"T\u00e9moin1\"},           {\"pos\": [460, 100], \"id\": 37, \"name\": \"Sortie1\"},           {\"pos\": [460, 540], \"id\": 43, \"name\": \"T\u00e9moin2\"},           {\"pos\": [460, 400], \"id\": 44, \"name\": \"Sortie2\"}         ],         \"wires\": [[31, 33], [32, 34], [35, 36], [39, 41], [38, 40], [42, 43]]       }"},{"location":"premiere/03_archi_SE/1_neumann/exos_circuits/#exercice-7","title":"Exercice 7","text":"<p>Faire un circuit \u00e9quivalent \u00e0 une porte XOR \u00e0 l'aide de portes ET, OU et NON.</p> <ul> <li>Vous pouvez rajouter une porte XOR et une nouvelle sortie pour tester votre circuit.</li> <li>optionnel Il y a 2 fa\u00e7ons de faire une porte XOR, donc vous pouvez chercher la deuxi\u00e8me construction.</li> <li>optionnel Pour les plus courageux, vous pouvez essayer de faire le m\u00eame circuit avec uniquement des portes NAND.</li> </ul>        {         \"v\": 2,         \"in\": [           {\"pos\": [150, 140], \"id\": 1, \"name\": \"A\", \"val\": 0},           {\"pos\": [150, 180], \"id\": 2, \"name\": \"B\", \"val\": 0}         ],         \"out\": [           {\"pos\": [500, 160], \"id\": 7, \"name\": \"Sortie\"}         ]       }"},{"location":"premiere/03_archi_SE/1_neumann/neumann_TP/","title":"TP - Simulateur AQA","text":"<p>Objectifs</p> <ul> <li> Utiliser un simulateur d'architecture de von Neumann</li> <li> Comprendre une s\u00e9quence d'instructions donn\u00e9e en langage machine</li> <li> Traduire un programme Python simple en assembleur et visualiser son ex\u00e9cution.</li> </ul> <p></p> <p>Crit\u00e8res d'\u00e9valuation</p> <ul> <li> Autonomie dans la r\u00e9alisation du travail demand\u00e9.</li> <li> Qualit\u00e9 du compte-rendu (pr\u00e9cision des r\u00e9ponses aux questions).</li> </ul>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_1/","title":"1. \u00c9volution des ordinateurs","text":"<p>Ce panorama rapide est issu, \u00e0 quelques modifications pr\u00e8s, du cours de Anthony Juton, Professeur agr\u00e9g\u00e9 en Physique appliqu\u00e9e (MOOC NSI : les fondamentaux).</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_1/#1-jusqua-1945","title":"1. Jusqu'\u00e0 1945","text":"<p>Une premi\u00e8re date est la publication par le math\u00e9maticien Muhammad Al-Khw\u00e2rizm\u00ee d'une classification des algorithmes existants au 9\u00e8me si\u00e8cle. Le mot algorithme est issu de son nom.</p> <p>Au 17\u00e8me si\u00e8cle, le philosophe et scientifique Blaise Pascal d\u00e9veloppe une machine d'arithm\u00e9tique capable de faire m\u00e9caniquement des additions et soustractions et, par r\u00e9p\u00e9tition, des multiplications et divisions. On la nomme aujourd'hui pascaline.</p> <p>Au 18\u00e8me si\u00e8cle, l'inventeur fran\u00e7ais Joseph Marie Jacquard automatise les m\u00e9tiers \u00e0 tisser m\u00e9canique. Le motif est cod\u00e9 sous la forme d'une s\u00e9quence d'instructions d\u00e9crite par une carte perfor\u00e9e.</p> <p>En 1840, le math\u00e9maticien anglais Charles Babbage con\u00e7oit une machine \u00e0 calculer m\u00e9canique, \u00e0 vapeur, dont la s\u00e9quence d'instruction est fournie par une carte perfor\u00e9e. La machine fonctionnant en d\u00e9cimal est complexe et jamais il ne terminera sa construction. Cependant, c'est pour cette machine, majoritairement th\u00e9orique, que Ada Lovelace, comtesse anglaise, \u00e9crira les premiers programmes informatiques.</p> <p>Dans les m\u00eames temps, Georges Boole, math\u00e9maticien et philosophe britannique, formalise une alg\u00e8bre binaire s'appuyant sur deux uniques \u00e9tats, 1 et 0. Elle est nomm\u00e9e depuis alg\u00e8bre bool\u00e9enne et, bien adapt\u00e9e au relais, tubes et transistor, elle simplifiera beaucoup la r\u00e9alisation de calculateurs.</p> <p>En 1936, Alan Turing, math\u00e9maticien britannique, propose un mod\u00e8le th\u00e9orique de machine permettant d'ex\u00e9cuter toute op\u00e9ration math\u00e9matique calculable \u00e0 partir de quelques instructions simples, la machine de Turing universelle. Une machine est alors dite Turing-compl\u00e8te si elle permet de faire tout ce que le mod\u00e8le th\u00e9orique d\u00e9crit. Suivent alors plusieurs tentatives de r\u00e9alisation, d'abord avec des relais m\u00e9caniques. Le premier ordinateur Turing-complet serait l'ordinateur \u00e9lectrom\u00e9canique allemand binaire Zuse 3, d\u00e9truit pendant la guerre.</p> <p>En 1945, sous la conduite du physicien am\u00e9ricain John William Mauchly et de son compatriote ing\u00e9nieur Presper Eckert, est d\u00e9velopp\u00e9e une autre r\u00e9alisation mat\u00e9rielle Turing-compl\u00e8te, cette fois utilisable durablement. L'ENIAC (Electronic Numerical Integrator And Computer) est financ\u00e9 par l'arm\u00e9e am\u00e9ricaine pour r\u00e9soudre des probl\u00e8mes de balistique. Contrairement au Z3, il est d\u00e9cimal, ce qui augmente sa complexit\u00e9, et utilise des tubes \u00e0 vides, plus rapides que les relais.</p> <p>L'ENIAC dispose de 17 000 tubes \u00e0 vides, consomme 150 kW et est capable de 5000 additions, 357 multiplications ou 38 divisions par seconde. Les tubes \u00e9taient peu fiables, un insecte, parmi les premiers bugs informatiques, venant souvent mourir sur un tube br\u00fblant pendant la journ\u00e9e, provoquant sa destruction.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_1/#2-apres-1945","title":"2. Apr\u00e8s 1945","text":"<p>En 1947 commence l'histoire moderne de l'informatique. 3 physiciens am\u00e9ricains des laboratoires Bell, William Shockley, John Bardeen, Walter Brattain d\u00e9couvrent l'effet transistor. Dans un semi-conducteur au germanium, un courant \u00e9lectrique permet de contr\u00f4ler l'ouverture d'un circuit \u00e9lectrique. Il devient alors possible de remplacer les co\u00fbteux et peu fiables tubes \u00e0 vide. Le transistor permet rapidement un bond en avant pour l'informatique, l'\u00e9lectronique, les t\u00e9l\u00e9communications et est \u00e0 l'origine de la cr\u00e9ation de l'\u00e9lectronique de puissance. Cette d\u00e9couverte est salu\u00e9e par l'attribution du prix Nobel de physique en 1956.</p> <p>Avec le transistor, complexe \u00e0 fabriquer, appara\u00eet la diff\u00e9renciation entre concepteur de processeur et d\u00e9veloppeur de programme.</p> <p>D\u00e8s 1958, la soci\u00e9t\u00e9 Fairchild semi-conducteurs, fond\u00e9e notamment par Gordon Moore pour d\u00e9velopper des semi-conducteurs \u00e0 base de silicium, sort les premiers circuits int\u00e9gr\u00e9s regroupant de nombreux transistors grav\u00e9s sur la m\u00eame puce de silicium pour assurer des fonctions logiques.</p> <p>En 1968, Gordon Moore encore et 2 associ\u00e9s fondent la soci\u00e9t\u00e9 Intel (pour Integrated Electronic) dans la naissante Silicon Valley et en 1971 commercialisent le premier processeur monolithique (sur une seule puce), l'Intel 4004, avec 2300 Transistors. La largeur de grille des transistors, ici 10 \u00b5m, caract\u00e9rise la finesse de gravure des transistors. </p> <p>Peu de temps apr\u00e8s, Gordon Moore, toujours lui, annonce un doublement du nombre de transistors par circuit int\u00e9gr\u00e9 tous les 2 ans. C'est la loi de Moore. A la fois anticipation et feuille de route de l'industrie micro-\u00e9lectronique, cette loi continue d'\u00eatre v\u00e9rifi\u00e9e 46 ans apr\u00e8s, soit une multiplication par \\(2^23 \\approx 8\\) Millions du nombre de transistors sur une puce.</p> <p>1976 marque l'apparition de l'apple 1, rapidement remplac\u00e9 par l'apple 2. Con\u00e7u pour \u00eatre produits massivement \u00e0 un prix raisonnable, ils contribuent \u00e0 la diffusion de l'informatique. L'interface graphique facilitant son utilisation appara\u00eetra en 1986.</p> <p>En 1981, IBM lance le PC (Personal Computer) bas\u00e9 sur une architecture ouverte qui sera reprise par de nombreux autres constructeurs.</p> <p>Le d\u00e9veloppement des PC avec processeur Intel et dans une moindre mesure des ordinateurs Apple avec processeurs Motorola est tel qu'ils orientent l'\u00e9volution des technologies. Les processeurs g\u00e9n\u00e9ralistes progressent rapidement et les investissements pour suivre en terme de fabrication deviennent colossaux. Les autres architectures plus sp\u00e9cialis\u00e9es comme les machines-langage, optimis\u00e9s pour un langage, ne peuvent suivre et disparaissent.</p> <p>Le mill\u00e9naire se termine avec la victoire aux \u00e9checs du calculateur Deep Blue contre le champion du monde et l'apparition du processeur Intel Pentium 3, comprenant 10 Millions de transistors de largeur de grille 200 nm. Il fonctionne avec une horloge \u00e0 1 GHz.</p> <p>Pour en savoir plus sur l'\u00e9volution des ordinateurs, voir cet article.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/","title":"2. Du transistor au processeur","text":"<p>Dans cette partie, nous allons d\u00e9crire comment on peut, \u00e0 partir de transistors, r\u00e9aliser des op\u00e9rations logiques.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#1-du-transistor-au-circuit-logique","title":"1. Du transistor au circuit logique","text":"<p>On entend souvent dire qu'\"un ordinateur utilise uniquement des \"1\" et des \"0\"\". Cette affirmation m\u00e9rite d'\u00eatre pr\u00e9cis\u00e9e.</p> <p>\u00c0 la base de la plupart des composants d'un ordinateur, on retrouve le transistor. Ce composant \u00e9lectronique a \u00e9t\u00e9 invent\u00e9 fin 1947 par les Am\u00e9ricains John Bardeen, William Shockley et Walter Brattain. L'invention du transistor a \u00e9t\u00e9 un immense progr\u00e8s, mais les premiers ordinateurs sont ant\u00e9rieurs \u00e0 cette invention. En effet, ces premiers ordinateurs, par exemple le Colossus qui date de 1943, \u00e9taient con\u00e7us \u00e0 base de tubes \u00e9lectroniques (on parle aussi de tubes \u00e0 vide) qui, bien que beaucoup plus gros et beaucoup moins fiable que les transistors fonctionnent sur le m\u00eame principe que ce dernier.</p> <p>un transistor : </p> <p>un tube \u00e9lectronique : </p> <p>Autre aspect historique qu'il est important de pr\u00e9ciser : on ne trouve plus, depuis quelque temps d\u00e9j\u00e0, de transistors en tant que composant \u00e9lectronique discret (comme le transistor de la photo ci-dessus). Dans un ordinateur, les transistors sont regroup\u00e9s au sein de ce que l'on appelle des circuits int\u00e9gr\u00e9s. Dans un circuit int\u00e9gr\u00e9, les transistors sont grav\u00e9s sur des plaques de silicium, les connexions entre les millions de transistors qui composent un circuit int\u00e9gr\u00e9 sont, elles aussi, grav\u00e9es directement dans le silicium. Les processus mis en jeu lors de ces gravures d\u00e9passent largement le cadre de ce cours, si ce sujet vous int\u00e9resse, je vous invite \u00e0 visionner cette vid\u00e9o : https://www.youtube.com/watch?v=NFr-WyytNfo</p> <p>un circuit int\u00e9gr\u00e9 : </p> <p>Il n'est pas question de nous pencher en d\u00e9tail sur le fonctionnement d'un transistor, mais vous devez tout de m\u00eame savoir que dans un ordinateur les transistors se comportent comme des interrupteurs : soit le transistor laisse passer le courant \u00e9lectrique (interrupteur ferm\u00e9), soit il ne le laisse pas passer (interrupteur ouvert). Et c'est tout, il n'y a pas d'autre \u00e9tat possible pour un transistor dans un ordinateur : le courant passe ou le courant ne passe pas. Globalement l'ordinateur fonctionne uniquement avec deux \u00e9tats. On parle d'un \u00e9tat \"haut\" et d'un \u00e9tat \"bas\". On symbolise souvent l'\u00e9tat \"haut\" par le chiffre \"1\" et l'\u00e9tat \"bas\" par le chiffre \"0\", mais il faut bien avoir conscience qu'il n'y a pas dans un ordinateur des \"petits 1\" ou des \"petits 0\" qui se \"baladent\", c'est juste une histoire de \"courant qui passe\" ou de \"courant qui ne passe pas\". On travaille donc uniquement avec 2 chiffres, voil\u00e0 pourquoi un ordinateur travaille en base 2 (en binaire) et non pas en base 10 comme dans la vie courante.</p> <p>Plus pr\u00e9cis\u00e9ment, un transistor  se comporte comme un interrupteur command\u00e9 \u00e9lectriquement, sans partie m\u00e9canique. Il dispose de trois bornes : le drain, la grille et la source. Soumise \u00e0 une tension suffisante (\u00e9tat 1), la grille permet le passage du courant entre le drain et la source (interrupteur ferm\u00e9). Dans le cas contraire (\u00e9tat 0), le courant est bloqu\u00e9 (interrupteur ouvert).</p> <p></p> <p>Voyons maintenant comment un circuit compos\u00e9 de plusieurs transistors peut effectuer des op\u00e9rations logiques.</p> <p>On consid\u00e8re le circuit ci-dessous. Il comporte quatre transistors et les deux transistors du haut sont invers\u00e9s (ils laissent passer le courant quand l'entr\u00e9e est \u00e0 0 et le bloquent quand l'entr\u00e9e est \u00e0 1). Vdd est la tension d'alimentation (1,5 V) et Gnd la terre (0 V).</p> <p>En r\u00e9fl\u00e9chissant un peu, nous pouvons justifier la table de v\u00e9rit\u00e9 de ce circuit, donn\u00e9e \u00e0 c\u00f4t\u00e9.</p> <p></p> <p>Il s'agit de l'op\u00e9rateur logique NAND, NON ET.</p> <p>On peut de la m\u00eame fa\u00e7on cr\u00e9er des circuits r\u00e9alisant toutes les op\u00e9rations logiques.</p> <p>Pour en savoir plus sur les transistors voir cet article.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#2-les-circuits-logiques","title":"2. Les circuits logiques","text":"<p>Le transistor est donc l'\u00e9l\u00e9ment de base des circuits logiques. Un circuit logique permet de r\u00e9aliser une op\u00e9ration bool\u00e9enne. Il prend en entr\u00e9e un ou des signaux \u00e9lectriques (chaque entr\u00e9e est dans un \u00e9tat \"haut\" (symbolis\u00e9 par un \"1\") ou \u00e0 un \u00e9tat \"bas\" (symbolis\u00e9 par un \"0\") et donne en sortie un ou des signaux \u00e9lectriques (chaque sortie est aussi dans un \u00e9tat \"haut\" ou \u00e0 un \u00e9tat \"bas\"). Il existe deux cat\u00e9gories de circuits logiques :</p> <ul> <li> <p>les circuits combinatoires (les \u00e9tats en sortie d\u00e9pendent uniquement des \u00e9tats en entr\u00e9e)</p> </li> <li> <p>les circuits s\u00e9quentiels (les \u00e9tats en sortie d\u00e9pendent des \u00e9tats en entr\u00e9e ainsi que du temps et des \u00e9tats ant\u00e9rieurs)</p> </li> </ul> <p>Dans la suite nous nous int\u00e9resserons principalement aux circuits combinatoires.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#la-porte-non-not","title":"la porte NON (NOT)","text":"<p>Le plus simple des circuits combinatoires est la porte \"NON\" (\"NOT\" en anglais) qui inverse l'\u00e9tat en entr\u00e9e : si l'entr\u00e9e de la porte est dans un \u00e9tat \"bas\" alors la sortie sera dans un \u00e9tat \"haut\" et vice versa. Si on symbolise l'\u00e9tat \"haut\" par un \"1\" et l'\u00e9tat \"bas\" pour un \"0\", on retrouve la table de v\u00e9rit\u00e9 de l'op\u00e9rateur bool\u00e9en \"NON\" :</p> E (Entr\u00e9e) S (Sortie) 1 0 0 1 <p>La porte \"NON\" est symbolis\u00e9e par le sch\u00e9ma suivant (les sch\u00e9mas ci-dessous utilisent les symboles \u00e9tasuniens, les plus utilis\u00e9s) :</p> <p></p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#la-porte-ou-or","title":"la porte OU (OR)","text":"<p>La porte \"OU\" a deux entr\u00e9es (E1 et E2) et une sortie S</p> <p></p> <p>Table de v\u00e9rit\u00e9 porte \"OU\" :</p> E1 E2 S 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#la-porte-et-and","title":"la porte ET (AND)","text":"<p>La porte \"ET\" (\"AND\") a deux entr\u00e9es (E1 et E2) et une sortie S</p> <p></p> <p>Table de v\u00e9rit\u00e9 porte \"ET\" :</p> E1 E2 S 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#la-porte-ou-exclusif-xor","title":"la porte OU EXCLUSIF (XOR)","text":"<p>La porte \"OU EXCLUSIF\" (\"XOR\") a deux entr\u00e9es (E1 et E2) et une sortie S</p> <p></p> <p>Table de v\u00e9rit\u00e9 porte \"XOR\" :</p> E1 E2 S 0 0 0 0 1 1 1 0 1 1 1 0"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_2/#ladditionneur","title":"L'additionneur","text":"<p>En combinant les portes logiques, on obtient des circuits plus complexes. Par exemple en combinant 2 portes \"OU EXCLUSIF\", 2 portes \"ET\" et une porte \"OU\" on obtient un additionneur :</p> <p></p> <p>Comme son nom l'indique, l'additionneur permet d'additionner 2 bits (E1 et E2) en tenant compte de la retenue entrante (\"Cin\" \"carry in\" en anglais). En sortie on obtient le r\u00e9sultat de l'addition (S) et la retenue sortante (\"Cout\").</p> E1 E2 Cin Cout S 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 <p>En combinant plusieurs fois le type de circuit d\u00e9crit ci-dessus, on obtient des additionneurs capables d'additionner des nombres sur X bits.</p> <p>Une chose est tr\u00e8s importante \u00e0 bien comprendre : \u00e0 la base nous avons le transistor, une combinaison de transistors (sous forme de circuit int\u00e9gr\u00e9) permet d'obtenir des circuits logiques, la combinaison de circuits logiques permet d'obtenir des circuits plus complexes (exemple : l'additionneur), et ainsi de suite...</p> <p>Au sommet de cet \u00e9difice, nous allons trouver la m\u00e9moire vive (RAM) et le microprocesseur (CPU).</p> <p>Pour en savoir plus sur les portes logiques voir la vid\u00e9o \"Les portes logiques\" dans cet article.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_3/","title":"3. Architecture de von Neumann","text":"<p>John von Neumann (math\u00e9maticien et physicien am\u00e9ricano-hongrois 1903-1957) a eu l'id\u00e9e en 1945 d'utiliser une structure de stockage (m\u00e9moire) unique pour les donn\u00e9es et les instructions : on parle d'architecture de von Neumann</p> <p></p> <p>La premi\u00e8re innovation est la s\u00e9paration nette entre l'unit\u00e9 de commande, qui organise le flot de s\u00e9quencement des instructions, et l'unit\u00e9 arithm\u00e9tique, charg\u00e9e de l'ex\u00e9cution proprement dite de ces instructions. La seconde innovation, la plus fondamentale, est l'id\u00e9e du programme enregistr\u00e9 : les instructions, au lieu d'\u00eatre cod\u00e9es sur un support externe (ruban, cartes, tableau de connexions), sont enregistr\u00e9es dans la m\u00e9moire selon un codage conventionnel. Un compteur ordinal contient l'adresse de l'instruction en cours d'ex\u00e9cution ; il est automatiquement incr\u00e9ment\u00e9 apr\u00e8s ex\u00e9cution de l'instruction, et explicitement modifi\u00e9 par les instructions de branchement.</p> <p>Un emplacement de m\u00e9moire peut contenir indiff\u00e9remment des instructions et des donn\u00e9es, et une cons\u00e9quence majeure (dont toute la port\u00e9e n'avait probablement pas \u00e9t\u00e9 per\u00e7ue \u00e0 l'\u00e9poque) est qu'un programme peut \u00eatre trait\u00e9 comme une donn\u00e9e par d'autres programmes. Cette id\u00e9e, pr\u00e9sente en germe dans la machine de Turing, trouvait ici sa concr\u00e9tisation</p> <p>Pour en savoir plus sur l'aspect historique du mod\u00e8le, voir cet article du site interstices.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_3/#1-le-modele","title":"1. Le mod\u00e8le","text":"<p>L'architecture de Von Neumann est un mod\u00e8le d'architecture d'ordinateur dans lequel une unit\u00e9 de stockage (m\u00e9moire) unique sert \u00e0 conserver \u00e0 la fois les instructions et les donn\u00e9es demand\u00e9es ou produites par le calcul. Les ordinateurs actuels sont tous bas\u00e9s sur des versions am\u00e9lior\u00e9es de cette architecture. </p> <p>L'architecture de Von Neumann d\u00e9compose l'ordinateur en 4 parties distinctes : </p> <ul> <li>L'unit\u00e9 arithm\u00e9tique et logique (UAL ou ALU en anglais) ou unit\u00e9 de traitement : son r\u00f4le est d'effectuer les op\u00e9rations de base ; </li> <li>L'unit\u00e9 de contr\u00f4le (ou de commande), charg\u00e9e du \u00ab s\u00e9quen\u00e7age \u00bb des op\u00e9rations ; </li> <li>La m\u00e9moire qui contient \u00e0 la fois les donn\u00e9es et le programme qui indiquera \u00e0 l'unit\u00e9 de contr\u00f4le quels sont les calculs \u00e0 faire sur ces donn\u00e9es ; </li> <li>Les dispositifs d'entr\u00e9e-sortie, qui permettent de communiquer avec le monde ext\u00e9rieur.</li> </ul> <p></p> <p>De nos jours, le mod\u00e8le a \u00e9volu\u00e9 : </p> <p></p> <ul> <li>Les entr\u00e9es-sorties, initialement command\u00e9es par l'unit\u00e9 centrale, sont depuis le d\u00e9but des ann\u00e9es 1960 sous le contr\u00f4le de processeurs autonomes (canaux d'entr\u00e9e-sortie et m\u00e9canismes assimil\u00e9s). Associ\u00e9e \u00e0 la multiprogrammation (partage de la m\u00e9moire entre plusieurs programmes), cette organisation a notamment permis le d\u00e9veloppement des syst\u00e8mes en temps partag\u00e9.</li> <li>Les ordinateurs comportent maintenant des processeurs multiples, qu'il s'agisse d'unit\u00e9s s\u00e9par\u00e9es ou de \u00ab c\u0153urs \u00bb multiples \u00e0 l'int\u00e9rieur d'une m\u00eame puce. Cette organisation permet d'atteindre une puissance globale de calcul \u00e9lev\u00e9e sans augmenter la vitesse des processeurs individuels, limit\u00e9e par les capacit\u00e9s d'\u00e9vacuation de la chaleur dans des circuits de plus en plus denses.</li> </ul>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_3/#2-le-processeur","title":"2. Le processeur","text":"<p>De nos jours, l'unit\u00e9 arithm\u00e9tique et logique et l'unit\u00e9 de commande sont regroup\u00e9es au sein d'une m\u00eame puce : le processeur (CPU : Central Processing Unit).</p> <p>Le processeur comporte en r\u00e9alit\u00e9 sch\u00e9matiquement trois parties : </p> <ul> <li>L'unit\u00e9 arithm\u00e9tique et logique est charg\u00e9e de l'ex\u00e9cution de tous les calculs que peut r\u00e9aliser le microprocesseur ;</li> <li>Les registres permettent de m\u00e9moriser de l'information (donn\u00e9e ou instruction) au sein m\u00eame du CPU, en tr\u00e8s petite quantit\u00e9 ;</li> <li>L'unit\u00e9 de contr\u00f4le (ou de commande) . C'est le coordinateur g\u00e9n\u00e9ral qui lit les instructions du programme en m\u00e9moire et commande l'UAL pour ex\u00e9cuter ces instructions.</li> </ul> <p></p> <p>Les microprocesseurs sont cadenc\u00e9s par un signal d'horloge (signal oscillant r\u00e9gulier imposant un rythme au transfert entre circuit). Au milieu des ann\u00e9es 1980, ce signal avait une fr\u00e9quence de 4 \u00e0 8 MHz. Dans les ann\u00e9es 2000, cette fr\u00e9quence atteint 3 GHz. Plus cette fr\u00e9quence est \u00e9lev\u00e9e, plus le microprocesseur peut ex\u00e9cuter \u00e0 un rythme \u00e9lev\u00e9 les instructions de base des programmes.</p> <p></p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_3/#3-la-memoire","title":"3. La m\u00e9moire","text":"<p>La m\u00e9moire permet de stocker des donn\u00e9es et des programmes. Elle se divise entre m\u00e9moire volatile donc non permanente (programmes et donn\u00e9es en cours de fonctionnement) et m\u00e9moire permanente (programmes et donn\u00e9es de base de la machine).</p> <p>Dans la plupart des m\u00e9moires, les informations sont class\u00e9es par adresses : chaque octet est accessible par une adresse unique.</p> <p>Pour des raisons \u00e9conomiques, les m\u00e9moires sont en g\u00e9n\u00e9ral divis\u00e9es en plusieurs familles (les ordres de grandeurs sont indiqu\u00e9s pour donner une id\u00e9e, mais ils \u00e9voluent constamment) :</p> <ul> <li> <p>Une m\u00e9moire de masse ou m\u00e9moire de stockage (permanente)</p> <p>Cette m\u00e9moire sert \u00e0 stocker \u00e0 long terme des grandes quantit\u00e9s d'informations. Les technologies les plus courantes de m\u00e9moires de masse sont \u00e9lectrom\u00e9caniques (disques durs - HDD) ou \u00e0 semi-conducteurs (SSD, clefs USB, \u2026). Elles visent \u00e0 obtenir une capacit\u00e9 de stockage \u00e9lev\u00e9e \u00e0 faible co\u00fbt et ont g\u00e9n\u00e9ralement une vitesse inf\u00e9rieure aux autres m\u00e9moires.</p> <p>Ordres de grandeur :</p> <ul> <li>Capacit\u00e9 : jusqu'\u00e0 10 To (HDD)</li> <li>Vitesse : jusqu'\u00e0 500 Mo/s (SSD)</li> </ul> <p></p> </li> <li> <p>La m\u00e9moire vive ou RAM : Random Access Memory (non permanente)</p> <p>Espace principal de stockage du microprocesseur, mais dont le contenu dispara\u00eet lors de la mise hors tension de l'ordinateur.</p> <p>Ordres de grandeur :</p> <ul> <li>Capacit\u00e9 : jusqu'\u00e0 32 Go</li> <li>Vitesse : jusqu'\u00e0 2 Go/s</li> </ul> <p></p> </li> <li> <p>La m\u00e9moire cache</p> <p>Sert \u00e0 conserver un court instant des informations fr\u00e9quemment consult\u00e9es. Les technologies des m\u00e9moires caches visent \u00e0 acc\u00e9l\u00e9rer la vitesse des op\u00e9rations de consultation. Elles ont une tr\u00e8s grande vitesse, et un co\u00fbt \u00e9lev\u00e9 pour une faible capacit\u00e9 de stockage. Cette m\u00e9moire est int\u00e9gr\u00e9e au microprocesseur. Il existe des m\u00e9moires caches \u00e0 diff\u00e9rents niveaux (L1, L2, ...), qui poss\u00e8dent des caract\u00e9ristiques diff\u00e9rentes.</p> <p>Ordres de grandeur :</p> <ul> <li>Capacit\u00e9 : quelques ko (L1) \u00e0 quelques Mo (L2)</li> <li>Vitesse : jusqu'\u00e0 5 Go/s</li> </ul> <p></p> </li> <li> <p>Les registres du processeur</p> <p>Int\u00e9gr\u00e9s au processeur. Ce type de m\u00e9moire est tr\u00e8s rapide mais aussi tr\u00e8s cher et est donc r\u00e9serv\u00e9 \u00e0 une tr\u00e8s faible quantit\u00e9 de donn\u00e9es.</p> <p>Ordres de grandeur :</p> <ul> <li>Capacit\u00e9 : quelques dizaines d'octets</li> <li>Vitesse : jusqu'\u00e0 30 Go/s</li> </ul> <p></p> </li> </ul>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_3/#4-les-bus","title":"4. Les bus","text":"<p>Pour que les donn\u00e9es circulent entre les diff\u00e9rentes parties d'un ordinateur (m\u00e9moire, CPU et les entr\u00e9es/sorties), il existe des syst\u00e8mes de communication appel\u00e9s bus (c'est le squelette de l'architecture). Il en existe de 3 grands types :</p> <ul> <li>Le bus d'adresse permet de faire circuler des adresses. Par exemple, l'adresse d'une donn\u00e9e \u00e0 aller chercher en m\u00e9moire ;</li> <li>Le bus de donn\u00e9es permet de faire circuler des donn\u00e9es ;</li> <li>Le bus de contr\u00f4le permet de sp\u00e9cifier le type d'action. Par exemple : \u00e9criture d'une donn\u00e9e en m\u00e9moire, lecture d'une donn\u00e9e en m\u00e9moire.</li> </ul> <p></p> <p>Pour en savoir plus, voir la vid\u00e9o \"Comment fonctionne un ordinateur ?\" dans cet article.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/","title":"4. Langage machine - Assembleur","text":"<p>Nous avons vu comment un assemblage de transistors pouvait permettre de faire des op\u00e9rations logiques, de construire des m\u00e9moires, des microprocesseurs, ...</p> <p>Dans l'architecture de von Neumann, les instructions et les donn\u00e9es sont stock\u00e9es dans la m\u00eame m\u00e9moire et toutes ces informations transitent sous la forme de signaux \u00e9lectriques entre la m\u00e9moire et les diff\u00e9rents composants du CPU.</p> <p>Toutes ces informations, instructions et donn\u00e9es, sont cod\u00e9es par une suite de 0 et de 1 puisque c'est le seul langage compris au niveau du mat\u00e9riel. Comment cela se passe-t-il ?</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#1-fonctionnement-du-processeur","title":"1. Fonctionnement du processeur","text":"<p>Un processeur donn\u00e9 est capable d'ex\u00e9cuter un certain nombre d'op\u00e9rations de base, celles pour lesquelles il dispose d'un circuit \u00e9lectronique qui les r\u00e9alise.</p> <p>L'ensemble des instructions ex\u00e9cutables directement par le microprocesseur (instructions machines) constitue ce que l'on appelle le \"langage machine\" du processeur.</p> <p>Chaque instruction machine correspond \u00e0 une configuration \u00e9lectronique binaire compos\u00e9e principalement de 2 parties :</p> <ul> <li>Le champ \"code op\u00e9ration\" (opcode) qui indique au processeur le type de traitement \u00e0 r\u00e9aliser. Par exemple, sur un certain mod\u00e8le de processeur, le code \"00100110\" donne l'ordre d'effectuer une multiplication.</li> <li>Le champ \"op\u00e9randes\" indique la nature des donn\u00e9es sur lesquelles l'op\u00e9ration d\u00e9sign\u00e9e par le \"code op\u00e9ration\" doit \u00eatre effectu\u00e9e.</li> </ul> <p>Un op\u00e9rande peut \u00eatre de 3 natures diff\u00e9rentes :</p> <ul> <li>l'op\u00e9rande est une valeur imm\u00e9diate : l'op\u00e9ration est effectu\u00e9e directement sur la valeur donn\u00e9e dans l'op\u00e9rande ;</li> <li>l'op\u00e9rande est un registre du CPU : l'op\u00e9ration est effectu\u00e9e sur la valeur situ\u00e9e dans un des registres (R0,R1, R2,...) ; l'op\u00e9rande indique de quel registre il s'agit ;</li> <li>l'op\u00e9rande est une donn\u00e9e situ\u00e9e en m\u00e9moire vive : l'op\u00e9ration est effectu\u00e9e sur la valeur situ\u00e9e en m\u00e9moire vive \u00e0 l'adresse XXXXX. Cette adresse est indiqu\u00e9e dans l'op\u00e9rande.</li> </ul> <p>Le programme ex\u00e9cut\u00e9 se trouve en RAM, tout comme les donn\u00e9es. Un registre particulier du processeur, nomm\u00e9 IP (instruction pointer), contient l'adresse de la cellule RAM de la prochaine instruction \u00e0 ex\u00e9cuter.</p> <p>Un deuxi\u00e8me registre, IR (instruction register), joue un r\u00f4le important en raison de sa connexion physique au reste du processeur : placer dans ce registre la configuration \u00e9lectronique qui d\u00e9note une instruction provoque l'activation du circuit d\u00e9di\u00e9 \u00e0 la r\u00e9alisation de l'op\u00e9ration sous-jacente.</p> <p>Le CPU a un fonctionnement cyclique :</p> <ul> <li>il copie dans le registre IR le contenu de la RAM \u00e0 l'adresse point\u00e9e par IP ;</li> <li>il d\u00e9code l'instruction contenue dans IR : ceci provoque l'activation du circuit \u00e9lectronique qui r\u00e9alise l'op\u00e9ration vis\u00e9e ;</li> <li>il ex\u00e9cute l'instruction d\u00e9cod\u00e9e ; ceci met aussi \u00e0 jour la valeur de IP pour continuer dans le programme.</li> </ul> <p>La capacit\u00e9 du processeur \u00e0 ex\u00e9cuter tous les programmes s'explique par ce fonctionnement tr\u00e8s souple et par le fait que le jeu d'instructions de base est suffisamment riche pour \u00eatre universel (on dit que le langage machine est Turing-complet).</p> <p>Dans le mod\u00e8le de von Neumann, il y a une seule m\u00e9moire vive pour le programme et les donn\u00e9es : c'est par sa copie dans le registre IR qu'une configuration \u00e9lectronique initialement pr\u00e9sente en RAM joue le r\u00f4le d'une instruction. La m\u00eame configuration pourrait \u00eatre interpr\u00e9t\u00e9e comme une donn\u00e9e (entier, etc.) dans un autre contexte.</p> <p>Historiquement, les instructions machine sont relativement basiques ; on peut se contenter d'\u00e0 peine plus que ce qui est n\u00e9cessaire pour l'universalit\u00e9. Pour des raisons de performance, les processeurs modernes savent ex\u00e9cuter nativement des op\u00e9rations plus complexes, comme la compos\u00e9e addition-produit ou des op\u00e9rations sur des vecteurs de petite dimension.</p> <p>Les op\u00e9rations fondamentales sont de trois sortes :</p> <ul> <li>Les instructions arithm\u00e9tiques (addition, soustraction, multiplication...) effectuent des calculs math\u00e9matiques, soit sur des entiers, soit sur des flottants. Par exemple, on peut avoir une instruction consistant \u00e0 additionner la valeur contenue dans le registre R1 et le nombre 789 et ranger le r\u00e9sultat dans le registre R0.</li> <li>Les instructions de transfert de donn\u00e9es permettent de transf\u00e9rer une donn\u00e9e d'un registre du CPU vers la m\u00e9moire vive et vice versa. Par exemple, on peut avoir une instruction consistant \u00e0 prendre la valeur situ\u00e9e \u00e0 l'adresse m\u00e9moire 487 et la placer dans la registre R2, ou encore prendre la valeur situ\u00e9e dans le registre R1 et la placer \u00e0 l'adresse m\u00e9moire 512.</li> <li>Les instructions de rupture de s\u00e9quence ou instructions de saut. Elles permettent d'agir sur le registre IP qui contient l'adresse de la prochaine instruction \u00e0 ex\u00e9cuter. Les instructions arithm\u00e9tiques ou de transfert de donn\u00e9es, outre leur effet sp\u00e9cifique, incr\u00e9mentent la valeur de IP : de cette fa\u00e7on, l'ex\u00e9cution du programme avance s\u00e9quentiellement (apr\u00e8s avoir ex\u00e9cut\u00e9 l'instruction plac\u00e9e \u00e0 l'adresse 512, on passe \u00e0 l'adresse 513, ...). Les instructions de saut permettent de r\u00e9aliser les autres structures de contr\u00f4le d'ex\u00e9cution, notamment l'alternative et la boucle.</li> </ul> <p>On distingue les instructions de saut inconditionnel, qui modifient toujours IP \u00e0 la valeur donn\u00e9e en op\u00e9rande, et les instructions de saut conditionnel, qui ne font cette modification que selon certaines circonstances, et sinon ont le comportement habituel d'incr\u00e9mentation de IP. Une instruction de saut conditionnel permet par exemple d'agir comme suit : si la valeur contenue dans le registre R1 est strictement sup\u00e9rieure \u00e0 0 alors la prochaine instruction \u00e0 ex\u00e9cuter est celle situ\u00e9e \u00e0 l'adresse m\u00e9moire 4521.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#2-le-langage-assembleur","title":"2. Le langage Assembleur","text":"<p>Programmer en langage machine est extr\u00eamement difficile (tr\u00e8s longue suite de 0 et de 1), pour pallier cette difficult\u00e9, les informaticiens ont remplac\u00e9 les codes binaires abscons par des symboles mn\u00e9moniques (plus facile \u00e0 retenir qu'une suite de \"1\" et de \"0\"), cela donne l'assembleur. </p> <p>Par exemple un \"ADD R1,R2,#125\" sera \u00e9quivalent \u00e0 \"11100010100000100001000001111101\".</p> <p>Le processeur est uniquement capable d'interpr\u00e9ter le langage machine, un programme appel\u00e9 \"assembleur\" assure donc le passage de \"ADD R1,R2,#125\" \u00e0 \"11100010100000100001000001111101\". Par extension, on dit que l'on programme en assembleur quand on \u00e9crit des programmes avec ces symboles mn\u00e9moniques \u00e0 la place de suite de \"0\" et de \"1\".</p> <p>Il n'est pas question d'apprendre \u00e0 programmer en assembleur, mais vous devez \u00eatre capables de comprendre l'ex\u00e9cution d'une s\u00e9quence d'instructions simples en assembleur.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#3-exemples-dinstructions","title":"3. Exemples d'instructions","text":"Assembleur<pre><code>LDR R1,78\n</code></pre> <p>Place la valeur stock\u00e9e \u00e0 l'adresse m\u00e9moire 78 dans le registre R1 (par souci de simplification, nous continuons \u00e0 utiliser des adresses m\u00e9moire cod\u00e9es en base 10)</p> Assembleur<pre><code>STR R3,125\n</code></pre> <p>Place la valeur stock\u00e9e dans le registre R3 en m\u00e9moire vive \u00e0 l'adresse 125</p> Assembleur<pre><code>ADD R1,R0,#128\n</code></pre> <p>Additionne le nombre 128 (une valeur imm\u00e9diate est identifi\u00e9e gr\u00e2ce au symbole #) et la valeur stock\u00e9e dans le registre R0, place le r\u00e9sultat dans le registre R1</p> Assembleur<pre><code>ADD R0,R1,R2\n</code></pre> <p>Additionne la valeur stock\u00e9e dans le registre R1 et la valeur stock\u00e9e dans le registre R2, place le r\u00e9sultat dans le registre R0</p> Assembleur<pre><code>SUB R1,R0,#128\n</code></pre> <p>Soustrait le nombre 128 de la valeur stock\u00e9e dans le registre R0, place le r\u00e9sultat dans le registre R1</p> Assembleur<pre><code>SUB R0,R1,R2\n</code></pre> <p>Soustrait la valeur stock\u00e9e dans le registre R2 de la valeur stock\u00e9e dans le registre R1, place le r\u00e9sultat dans le registre R0</p> Assembleur<pre><code>MOV R1, #23\n</code></pre> <p>Place le nombre 23 dans le registre R1</p> Assembleur<pre><code>MOV R0, R3\n</code></pre> <p>Place la valeur stock\u00e9e dans le registre R3 dans le registre R0</p> Assembleur<pre><code>B 45\n</code></pre> <p>Nous avons une structure de rupture de s\u00e9quence, la prochaine instruction \u00e0 ex\u00e9cuter se situe en m\u00e9moire vive \u00e0 l'adresse 45</p> Assembleur<pre><code>CMP R0, #23\n</code></pre> <p>Compare la valeur stock\u00e9e dans le registre R0 et le nombre 23. Cette instruction CMP doit pr\u00e9c\u00e9der une instruction de branchement conditionnel BEQ, BNE, BGT, BLT (voir ci-dessous)</p> Assembleur<pre><code>CMP R0, R1\n</code></pre> <p>Compare la valeur stock\u00e9e dans le registre R0 et la valeur stock\u00e9e dans le registre R1.</p> Assembleur<pre><code>CMP R0, #23\nBEQ 78\n</code></pre> <p>La prochaine instruction \u00e0 ex\u00e9cuter se situe \u00e0 l'adresse m\u00e9moire 78 si la valeur stock\u00e9e dans le registre R0 est \u00e9gale \u00e0 23</p> Assembleur<pre><code>CMP R0, #23\nBNE 78\n</code></pre> <p>La prochaine instruction \u00e0 ex\u00e9cuter se situe \u00e0 l'adresse m\u00e9moire 78 si la valeur stock\u00e9e dans le registre R0 n'est pas \u00e9gale \u00e0 23</p> Assembleur<pre><code>CMP R0, #23\nBGT 78\n</code></pre> <p>La prochaine instruction \u00e0 ex\u00e9cuter se situe \u00e0 l'adresse m\u00e9moire 78 si la valeur stock\u00e9e dans le registre R0 est plus grand que 23</p> Assembleur<pre><code>CMP R0, #23\nBLT 78\n</code></pre> <p>La prochaine instruction \u00e0 ex\u00e9cuter se situe \u00e0 l'adresse m\u00e9moire 78 si la valeur stock\u00e9e dans le registre R0 est plus petit que 23</p> Assembleur<pre><code>HALT\n</code></pre> <p>Arr\u00eate l'ex\u00e9cution du programme</p> <p>Encore une fois, il n'est pas question d'apprendre \u00e0 programmer en assembleur, les instructions ci-dessus sont uniquement des exemples.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#utilisation-des-labels","title":"Utilisation des labels","text":"<p>En fait, les instructions assembleur B, BEQ, BNE, BGT et BLT n'utilisent pas directement l'adresse m\u00e9moire de la prochaine instruction \u00e0 ex\u00e9cuter, mais des \"labels\". Un label correspond \u00e0 une adresse en m\u00e9moire vive (c'est l'assembleur qui fera la traduction \"label\" \\(\\longrightarrow\\) \"adresse m\u00e9moire\"). L'utilisation d'un label \u00e9vite donc d'avoir \u00e0 manipuler des adresses m\u00e9moires en binaire ou en hexad\u00e9cimal. Voici un exemple qui montre comment utiliser un label :</p> Assembleur<pre><code>CMP R4, #18\nBGT monLabel\nMOV R0,#14\nHALT\nmonLabel:\nMOV R0,#18\nHALT\n</code></pre> <p>Dans l'exemple ci-dessus, nous avons choisi \"monLabel\" comme nom de label. La ligne \"MOV R0,#18\" a pour label \"monLabel\" car elle est situ\u00e9e juste apr\u00e8s la ligne \"monLabel:\". Concr\u00e8tement, voici ce qui se passe avec ce programme : si la valeur stock\u00e9e dans le registre R4 est sup\u00e9rieure \u00e0 18 on place le nombre 18 dans le registre R0 sinon on place le nombre 14 dans le registre R0. ATTENTION : la pr\u00e9sence du \"HALT\" juste apr\u00e8s la ligne \"MOV R0,#14\" est indispensable, car sinon, la ligne \"MOV R0,#18\" sera aussi ex\u00e9cut\u00e9e (m\u00eame si la valeur stock\u00e9e dans le registre R4 est inf\u00e9rieure \u00e0 18 )</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#4-du-langage-de-haut-niveau-a-lassembleur","title":"4. Du langage de haut niveau \u00e0 l'assembleur","text":"<p>Les langages de programmation \u00ab \u00e9volu\u00e9s \u00bb (Python, C++, \u2026), destin\u00e9s \u00e0 \u00eatre utilis\u00e9s par des humains, se composent d'instructions complexes, op\u00e9rant sur des types de donn\u00e9es beaucoup plus complexes que des bool\u00e9ens. Il faudra donc passer par une \u00e9tape de \u00ab conversion \u00bb du langage \u00e9volu\u00e9 vers le langage machine, chaque instruction du langage \u00ab \u00e9volu\u00e9 \u00bb donnant lieu \u00e0 un grand nombre d'instructions \u00ab \u00e9l\u00e9mentaires \u00bb du langage machine. On distinguera l'op\u00e9ration de compilation (conversion de tout le code \u00e9volu\u00e9 en langage machine) de l'op\u00e9ration d'interpr\u00e9tation (la conversion est r\u00e9alis\u00e9e au fur et \u00e0 mesure du d\u00e9roulement du code).</p> <p>Python, par exemple, est un langage interpr\u00e9t\u00e9 : un programme, l'interpr\u00e9teur Python, se charge de traduire les instructions du langage en code assembleur au fur et \u00e0 mesure de son ex\u00e9cution.</p> <p>Voici ce que pourrait donner la \"transformation\" d'un programme Python tout simple en langage machine (plus  pr\u00e9cis\u00e9ment ici en assembleur).</p> <p>Voici le programme Python :</p> \ud83d\udc0d Script Python<pre><code>x = 4\ny = 8\nif x == 10:\n    y = 9\nelse :\n    x=x+1\nz=6\n</code></pre> <p>et voici maintenant voici son \u00e9quivalent en assembleur :</p> Assembleur<pre><code>MOV R0, #4\nSTR R0,30\nMOV R0, #8\nSTR R0,75\nLDR R0,30\nCMP R0, #10\nBNE else\nMOV R0, #9\nSTR R0,75\nB endif\nelse:\nLDR R0,30\nADD R0, R0, #1\nSTR R0,30\nendif:\nMOV R0, #6\nSTR R0,23\nHALT\n</code></pre> <p>Comme vous  pouvez  le constater le moindre programme Python donne un programme assembleur relativement complexe.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_cours_4/#5-complements-dinformations","title":"5. Compl\u00e9ments d'informations","text":"<ul> <li>Le mod\u00e8le de von Neumann sur interstices</li> <li>M\u00e9moire et unit\u00e9 centrale, un couple d\u00e9di\u00e9 \u00e0 l'ex\u00e9cution des programmes sur interstices</li> <li>Une histoire de l'architecture des ordinateurs  sur Lumni</li> </ul>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/","title":"S3 - Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation","text":""},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#1-modele-darchitecture-de-von-neumann","title":"1. Mod\u00e8le d'architecture de von Neumann","text":""},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#1-evolution-des-ordinateurs","title":"1. \u00c9volution des ordinateurs","text":"<p>On retiendra que des machines automatiques ont tr\u00e8s t\u00f4t \u00e9t\u00e9 imagin\u00e9es par les scientifiques.</p> <p>Les premi\u00e8res machines \u00e9lectriques ont \u00e9t\u00e9 mises au points vers 1945 et, \u00e0 la m\u00eame \u00e9poque, des math\u00e9maticiens ont \u00e9labor\u00e9 une th\u00e9orie abstraite de l'ordinateur et de l'information (Turing, Shannon, ...).</p> <p>L'invention du transistor marque un tournant d\u00e9cisif et, tout au long de la seconde moiti\u00e9 du XX\u00e8me si\u00e8cle, la miniaturisation et le parall\u00e9lisme n'ont cess\u00e9 de permettre de mettre au point des machines toujours plus performantes.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#2-du-transistor-au-processeur","title":"2. Du transistor au processeur","text":"<p>Un transistor se comporte comme un interrupteur command\u00e9 \u00e9lectriquement : le courante passe (\u00e9tat 1), le courant ne passe pas (\u00e9tat 0).</p> <p>Tous les op\u00e9rateurs bool\u00e9ens de base peuvent \u00eatre r\u00e9alis\u00e9s \u00e0 l'aide d'un circuit comportant plusieurs transistors.</p> <p>L'association de nombreux circuits de ce type permet de r\u00e9aliser des op\u00e9rations complexes et, in fine, on aboutit aux m\u00e9moires et aux processeurs.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#3-architecture-de-von-neumann","title":"3. Architecture de von Neumann","text":"<p>L'architecture de Von Neumann est un mod\u00e8le d'architecture d'ordinateur dans lequel une unit\u00e9 de stockage (m\u00e9moire) unique sert \u00e0 conserver \u00e0 la fois les instructions et les donn\u00e9es demand\u00e9es ou produites par le calcul. Les ordinateurs actuels sont tous bas\u00e9s sur des versions am\u00e9lior\u00e9es de cette architecture. </p> <p>L'architecture de Von Neumann d\u00e9compose l'ordinateur en 4 parties distinctes : </p> <ul> <li>L'unit\u00e9 arithm\u00e9tique et logique (UAL ou ALU en anglais) ou unit\u00e9 de traitement : son r\u00f4le est d'effectuer les op\u00e9rations de base ; </li> <li>L'unit\u00e9 de contr\u00f4le (ou de commande), charg\u00e9e du \u00ab s\u00e9quen\u00e7age \u00bb des op\u00e9rations ; </li> <li>La m\u00e9moire qui contient \u00e0 la fois les donn\u00e9es et le programme qui indiquera \u00e0 l'unit\u00e9 de contr\u00f4le quels sont les calculs \u00e0 faire sur ces donn\u00e9es ; </li> <li>Les dispositifs d'entr\u00e9e-sortie, qui permettent de communiquer avec le monde ext\u00e9rieur.</li> </ul> <p></p> <p>Les ordinateurs comportent maintenant des processeurs multiples, qu'il s'agisse d'unit\u00e9s s\u00e9par\u00e9es ou de \u00ab c\u0153urs \u00bb multiples \u00e0 l'int\u00e9rieur d'une m\u00eame puce. Cette organisation permet d'atteindre une puissance globale de calcul \u00e9lev\u00e9e sans augmenter la vitesse des processeurs individuels, limit\u00e9e par les capacit\u00e9s d'\u00e9vacuation de la chaleur dans des circuits de plus en plus denses.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#le-processeur","title":"Le processeur","text":"<p>Le processeur comporte en r\u00e9alit\u00e9 sch\u00e9matiquement trois parties : </p> <ul> <li>L'unit\u00e9 arithm\u00e9tique et logique est charg\u00e9e de l'ex\u00e9cution de tous les calculs que peut r\u00e9aliser le microprocesseur ;</li> <li>Les registres permettent de m\u00e9moriser de l'information (donn\u00e9e ou instruction) au sein m\u00eame du CPU, en tr\u00e8s petite quantit\u00e9 ;</li> <li>L'unit\u00e9 de contr\u00f4le (ou de commande) . C'est le coordinateur g\u00e9n\u00e9ral qui lit les instructions du programme en m\u00e9moire et commande l'UAL pour ex\u00e9cuter ces instructions.</li> </ul>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#la-memoire","title":"La m\u00e9moire","text":"<p>La m\u00e9moire permet de stocker des donn\u00e9es et des programmes. Elle se divise entre m\u00e9moire volatile donc non permanente (programmes et donn\u00e9es en cours de fonctionnement) et m\u00e9moire permanente (programmes et donn\u00e9es de base de la machine).</p> <p>Diff\u00e9rents types de m\u00e9moire : m\u00e9moire de masse, persistante (HDD, SSD) ; m\u00e9moire vive, non persistante (RAM) ; m\u00e9moire cache, non persistante, int\u00e9gr\u00e9e \u00e0 la CPU ; registres de la CPU.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#le-bus","title":"Le bus","text":"<p>Les bus permettent la circulation de l'information entre les diff\u00e9rents composants de la machine.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_essentiel/#4-langage-machine-assembleur","title":"4. Langage machine - Assembleur","text":"<p>L'ensemble des instructions ex\u00e9cutables directement par le microprocesseur (instructions machines) constitue ce que l'on appelle le \"langage machine\" du processeur.</p> <p>Chaque instruction machine correspond \u00e0 une configuration \u00e9lectronique binaire compos\u00e9e principalement de 2 parties :</p> <ul> <li>Le champ \"code op\u00e9ration\" (opcode) qui indique au processeur le type de traitement \u00e0 r\u00e9aliser. Par exemple, sur un certain mod\u00e8le de processeur, le code \"00100110\" donne l'ordre d'effectuer une multiplication.</li> <li>Le champ \"op\u00e9randes\" indique la nature des donn\u00e9es sur lesquelles l'op\u00e9ration d\u00e9sign\u00e9e par le \"code op\u00e9ration\" doit \u00eatre effectu\u00e9e.</li> </ul> <p>Programmer en langage machine est extr\u00eamement difficile (tr\u00e8s longue suite de 0 et de 1), pour pallier cette difficult\u00e9, les informaticiens ont remplac\u00e9 les codes binaires abscons par des symboles mn\u00e9moniques (plus facile \u00e0 retenir qu'une suite de \"1\" et de \"0\"), cela donne l'assembleur. </p> <p>Par exemple un \"ADD R1,R2,#125\" sera \u00e9quivalent \u00e0 \"11100010100000100001000001111101\".</p> <p>Les instructions des langages de haut niveau, comme Python, plus faciles \u00e0 manipuler pour un \u00eatre humain, sont transform\u00e9es en langage machine par un interpr\u00e9teur (langage interpr\u00e9t\u00e9) ou un compilateur (langage compil\u00e9) avant d'\u00eatre ex\u00e9cut\u00e9es par le processeur.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/","title":"Exercices (von Neumann)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#architecture","title":"Architecture","text":""},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#exercice-1-qcm","title":"Exercice 1 (QCM)","text":""},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#assembleur","title":"Assembleur","text":""},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#exercice-2","title":"Exercice 2","text":"<ol> <li> <p>Expliquez bri\u00e8vement par une phrase, les instructions suivantes :</p> <ul> <li>ADD R0, R1, #42</li> <li>LDR R5,98</li> <li>CMP R4, #18</li> <li>BGT 77</li> <li>STR R0,15</li> <li>B 100</li> </ul> </li> <li> <p>\u00c9crire les instructions en assembleur correspondant aux phrases suivantes : </p> <ul> <li>\u00ab Additionne la valeur stock\u00e9e dans le registre R0 et la valeur stock\u00e9e dans le registre R1, le r\u00e9sultat est stock\u00e9 dans le registre R5 \u00bb</li> <li>\u00ab Place la valeur stock\u00e9e \u00e0 l'adresse m\u00e9moire 878 dans le registre R0 \u00bb</li> <li>\u00ab Place le contenu du registre R0 en m\u00e9moire vive \u00e0 l'adresse 124 \u00bb</li> <li>\u00ab La prochaine instruction \u00e0 ex\u00e9cuter se situe en m\u00e9moire vive \u00e0 l'adresse 478 \u00bb</li> <li>\u00ab Si la valeur stock\u00e9e dans le registre R0 est \u00e9gale 42 alors la prochaine instruction \u00e0 ex\u00e9cuter se situe \u00e0 l'adresse m\u00e9moire 85 \u00bb</li> </ul> </li> </ol>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#exercice-3","title":"Exercice 3","text":"<p>On consid\u00e8re le programme Python donn\u00e9 \u00e0 la fin du cours et sa traduction en Python.</p> \ud83d\udc0d Script Python<pre><code>x = 4\ny = 8\nif x == 10:\n    y = 9\nelse :\n    x=x+1\nz=6\n</code></pre> <p>et voici maintenant voici son \u00e9quivalent en assembleur :</p> Assembleur<pre><code>MOV R0, #4\nSTR R0,30\nMOV R0, #8\nSTR R0,75\nLDR R0,30\nCMP R0, #10\nBNE else\nMOV R0, #9\nSTR R0,75\nB endif\nelse:\nLDR R0,30\nADD R0, R0, #1\nSTR R0,30\nendif:\nMOV R0, #6\nSTR R0,23\nHALT\n</code></pre> <ol> <li>\u00c0 quoi sert la ligne B endif  ?</li> <li>\u00c0 quoi correspondent les adresses m\u00e9moires 23, 75 et 30 ?</li> </ol>"},{"location":"premiere/03_archi_SE/1_neumann/neumann_exos/#exercice-4","title":"Exercice 4","text":"<p>Le module <code>dis</code> de Python permet de \"d\u00e9sassembler\" du code Python, c'est-\u00e0-dire d'afficher les instructions machines correspondant \u00e0 des instructions Python.</p> <ol> <li> <p>En console interactive, entrer les lignes suivantes et interpr\u00e9ter le r\u00e9sultat.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; code = \"\"\"\na = 5\na = a + 3\n\"\"\"\n&gt;&gt;&gt; dis.dis(code)\n</code></pre> </li> <li> <p>Recommencer en rempla\u00e7ant le code analys\u00e9 par le code de l'exercice pr\u00e9c\u00e9dent. Expliquer les diff\u00e9rences entre l'assembleur Python et l'assembleur utilis\u00e9 dans l'exercice pr\u00e9c\u00e9dent.</p> </li> </ol>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/","title":"2. Syst\u00e8mes d'exploitation","text":""},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#1-a-quoi-sert-un-systeme-dexploitation","title":"1. \u00c0 quoi sert un syst\u00e8me d'exploitation ?","text":"<p>Un syst\u00e8me informatique a pour objectif d'automatiser le traitement de l'information. Il est constitu\u00e9 de deux entit\u00e9s: le mat\u00e9riel (hardware) et le logiciel (software).</p> <p>Du c\u00f4t\u00e9 mat\u00e9riel, un ordinateur est compos\u00e9 de:</p> <ul> <li>L'Unit\u00e9 Centrale (UC) pour les traitements</li> <li>La M\u00e9moire Centrale (MC) pour le stockage</li> <li>Les P\u00e9riph\u00e9riques: disque dur, clavier, souris, , carte r\u00e9seau... accessibles via des pilotes de p\u00e9riph\u00e9riques</li> </ul> <p>Du c\u00f4t\u00e9 logiciel, il existe deux niveaux bien distincts: le syst\u00e8me d'exploitation et les applications.</p> <p>L'objectif de la partie logicielle est d'offrir aux utilisateurs des fonctionnalit\u00e9s adapt\u00e9es \u00e0 leurs besoins.</p> <p>Objectifs d'un syst\u00e8me d'exploitation :</p> <p>Les trois objectifs majeurs d'un syst\u00e8me d'exploitation sont:</p> <ul> <li>faire l'interface entre le mat\u00e9riel et l'utilisateur (et par \"utilisateur\" on entend aussi bien l'utilisateur humain que des applications non syst\u00e8me) ; exemple :<ul> <li>communication de l'utilisateur vers le mat\u00e9riel : on appuie sur une touche du clavier et on s'attend \u00e0 ce que le caract\u00e8re concern\u00e9 apparaisse \u00e0 l'\u00e9cran ;</li> <li>communication du mat\u00e9riel vers l'utilisateur : si un fichier qu'on essaye d'atteindre n'existe pas, on a un message d'erreur.</li> </ul> </li> <li>isoler le code utilisateur du mat\u00e9riel, permettant ainsi par exemple :<ul> <li>de changer le mat\u00e9riel de fa\u00e7on transparente (ou presque) pour l'utilisateur (il faudra parfois installer des modules ou drivers suppl\u00e9mentaires, mais une fois cela fait, on continue \u00e0 fonctionner comme pr\u00e9c\u00e9demment) ;</li> <li>d'assurer l'int\u00e9grit\u00e9 des donn\u00e9es : par exemple le syst\u00e8me assure qu'un utilisateur autre ne peut acc\u00e9der \u00e0 des donn\u00e9es pour lesquelles il n'a pas les droits d'acc\u00e8s ; mais il assure aussi qu'aucun utilisateur ne puisse d\u00e9truire la coh\u00e9rence de l'ensemble des donn\u00e9es ;</li> </ul> </li> <li>faire en sorte que tous les programmes puissent s'ex\u00e9cuter de fa\u00e7on \u00e9quitable (un programme qui demande l'utilisation d'une ressource y aura acc\u00e8s en un temps \"raisonnable\").</li> </ul> <p>Le troisi\u00e8me point sera approfondi en terminale.</p> <p></p> <p>On abr\u00e9gera \"Syst\u00e8me d'exploitation par SE (en fran\u00e7ais) ou pas OS (operating system en anglais).</p> <p>Le syst\u00e8me d'exploitation est le premier logiciel qui d\u00e9marre quand on allume un ordinateur. Aujourd'hui, il est install\u00e9 sur le disque dur ou le disque SSD de l'ordinateur. Dans les ann\u00e9es 80-90 du 20\u00e8me si\u00e8cle, les ordinateurs personnels n'avaient souvent pas de disque dur. Le SE \u00e9tait fourni sur une ou plusieurs disquettes de d\u00e9marrage, support de m\u00e9moire amovible qui a disparu depuis, qui devait \u00eatre ins\u00e9r\u00e9e dans le lecteur de disquette \u00e0 chaque d\u00e9marrage.</p> <p></p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#2-differents-systemes-dexploitation","title":"2. Diff\u00e9rents syst\u00e8mes d'exploitation","text":"<p>Nous distinguerons les OS propri\u00e9taires et les OS libres.</p> <p>Voyons comment la notion de logiciel libre est d\u00e9finie par la Free Software Foundation (ONG am\u00e9ricaine dont la mission est la promotion du logiciel libre et la d\u00e9fense des utilisateurs) : </p> <p>Logiciel libre</p> <p>Un logiciel est consid\u00e9r\u00e9 comme libre, au sens de la Free Software Foundation, s'il conf\u00e8re \u00e0 son utilisateur quatre libert\u00e9s (num\u00e9rot\u00e9es de 0 \u00e0 3) :</p> <ul> <li>la libert\u00e9 d'ex\u00e9cuter le programme, pour tous les usages ;</li> <li>la libert\u00e9 d'\u00e9tudier le fonctionnement du programme et de l'adapter \u00e0 ses besoins ;</li> <li>la libert\u00e9 de redistribuer des copies du programme (ce qui implique la possibilit\u00e9 aussi bien de donner que de vendre des copies) ;</li> <li>la libert\u00e9 d'am\u00e9liorer le programme et de distribuer ces am\u00e9liorations au public, pour en faire profiter toute la communaut\u00e9.</li> </ul> <p>L'acc\u00e8s au code source est une condition d'exercice des libert\u00e9s 1 et 3. </p> <p>Un logiciel propri\u00e9taire, est tout simplement un logiciel qui n'est pas libre, c'est-\u00e0-dire qui ne respecte pas l'une ou plusieurs des quatre libert\u00e9s \u00e9nonc\u00e9es ci-dessus.</p> <p>Attention \u00e0 ne pas confondre libre et gratuit : un logiciel libre peut tr\u00e8s bien \u00eatre payant tout comme un logiciel propri\u00e9taire peut \u00eatre gratuit. La confusion vient souvent de l'anglais o\u00f9 le terme free signifie \u00e0 la fois libre et gratuit.</p> <p>Les syst\u00e8mes d'exploitations les plus r\u00e9pandus sont :</p> <ul> <li>Unix (1970) : l'un des premiers OS multi-utilisateurs. Il s'agit d'un OS propri\u00e9taire : le code source n'est pas accessible.</li> <li>GNU-Linux (1991) : syst\u00e8me d'exploitation libre, imitant Unix.</li> <li>MS-DOS (1981) : de l'entreprise Microsoft, OS propri\u00e9taire qui conna\u00eetra diff\u00e9rentes \u00e9volutions.</li> <li>Windows (1985) : de l'entreprise Microsoft, OS propri\u00e9taire qui conna\u00eetra diff\u00e9rentes \u00e9volutions. D'abord simple extension de MS-DOS, Windows est devenu un syst\u00e8me d'exploitation ind\u00e9pendant avec les ann\u00e9es et a connu de nombreuses \u00e9volutions.</li> <li>MacOS (1998) : de l'entreprise Apple, OS propri\u00e9taire qui a connu diff\u00e9rentes \u00e9volutions.</li> </ul> <p>Compl\u00e9ments : </p> <ul> <li>voir sur le blog la vid\u00e9o \"Un syst\u00e8me d'exploitation, c'est quoi ?\" dans cet article.</li> <li>des explications plus pouss\u00e9es dans cette vid\u00e9o.</li> <li>vid\u00e9o pr\u00e9sentant l'histoire d'Unix.</li> <li>vid\u00e9o pr\u00e9sentant l'histoire de Linux.</li> <li>vid\u00e9o plus compl\u00e8te pour approfondir l'histoire de GNU-Linux.</li> </ul> <p>Le programme de NSI nous incite \u00e0 utiliser un syst\u00e8me d'exploitation libre. Nous allons donc dans le paragraphe suivant \u00e9tudier de plus pr\u00e8s le syst\u00e8me Linux.</p> <p></p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#3-la-ligne-de-commande","title":"3. La ligne de commande","text":"<p>Aux d\u00e9buts des syst\u00e8mes d'exploitation, ces derniers \u00e9taient d\u00e9pourvus d'interface graphique (syst\u00e8me de fen\u00eatres \"pilotables\" \u00e0 la souris), toutes les interactions \"syst\u00e8me d'exploitation - utilisateur\" se faisaient par l'interm\u00e9diaire de lignes de commandes (suites de caract\u00e8res saisies par l'utilisateur). Aujourd'hui, m\u00eame si les interfaces graphiques modernes permettent d'effectuer la plupart des op\u00e9rations, il est important de conna\u00eetre quelques-unes de ces lignes de commandes.</p> <p>Les utilisateurs avanc\u00e9s, notamment ceux qui utilisent Linux, trouvent en effet un grand int\u00e9r\u00eat \u00e0 la ligne de commande qui permet indubitablement, quand on en ma\u00eetrise la syntaxe, de r\u00e9aliser certaines op\u00e9rations plus rapidement qu'avec la souris, de mani\u00e8re plus contr\u00f4l\u00e9e et s\u00fbre.</p> <p>Pour saisir des lignes de commandes, nous allons utiliser une console, ou terminal. Tous les OS en poss\u00e8dent une. Derri\u00e8re ce logiciel s'en cache un autre : le shell qui est en fait l'interpr\u00e9teur des lignes de commandes. Il s'agit d'un langage de programmation. Sous Linux, bash est un shell tr\u00e8s r\u00e9pandu.</p> <p>Sous Windows, nous avons par exemple le terminale PowerShell</p> <p></p> <p>Sous Linux, suivant la distribution utilis\u00e9e, le terminal peut poss\u00e9der des noms diff\u00e9rents (Terminal, Konsole, ...). L'image ci-dessous montre le terminal de la distribution Lubuntu, appel\u00e9 Qterminal :</p> <p></p> <p>Remarque : les commandes que nous allons \u00e9tudier sont des commandes de base du shell pour Linux. Cependant, dans les versions r\u00e9centes de Windows, PowerShell est capable d'interpr\u00e9ter ces commandes et elles fonctionneront donc parfaitement aussi.</p> <p>Sur l'image ci-dessus, nous voyons ci-dessus le terminal de l'utilisateur \"fabrice\" qui utilise un ordinateur qui se nomme \"fabrice-linux\" (\"fabrice@fabrice-linux\").</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#4-arborescence-du-systeme-de-fichier","title":"4. Arborescence du syst\u00e8me de fichier","text":"<p>On a l'habitude de dire que sous Linux, tout est fichier. Les diff\u00e9rents fichiers, r\u00e9pertoires, p\u00e9riph\u00e9riques, liens sont en effet tous repr\u00e9sent\u00e9s par des fichiers de diff\u00e9rents types rang\u00e9s dans une arborescence bien pr\u00e9cise de r\u00e9pertoires. Cette organisation est h\u00e9rit\u00e9e du syst\u00e8me Unix et se retrouve dans tous les syst\u00e8mes apparent\u00e9s, comme par exemple MacOs.</p> <p>Sur la figure ci-dessous, une partie de l'arborescence est pr\u00e9sent\u00e9e.</p> <p></p> <p>Dans le sch\u00e9ma ci-dessus on trouve des r\u00e9pertoires (noms entour\u00e9s d'un rectangle, exemple : \"home\") et des fichiers (uniquement des noms \"grub.cfg\").</p> <p>On parle d'arborescence, car ce syst\u00e8me de fichier ressemble \u00e0 un arbre \u00e0 l'envers.</p> <p>Comme vous pouvez le constater, la base de l'arbre s'appelle la racine de l'arborescence et se repr\u00e9sente par un \"/\"</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#chemin-absolu-et-chemin-relatif","title":"Chemin absolu et chemin relatif","text":"<p>Pour indiquer la position d'un fichier (ou d'un r\u00e9pertoire) dans l'arborescence, il existe 2 m\u00e9thodes : indiquer un chemin absolu ou indiquer un chemin relatif. </p> <ul> <li> <p>Le chemin absolu doit indiquer \"le chemin\" depuis la racine. Par exemple le chemin absolu du fichier compte_rendu.odt sera : /home/marie/Documents/compte_rendu.odt</p> <p>Remarquez que nous d\u00e9marrons bien de la racine / (attention les symboles de s\u00e9paration sont aussi des /)</p> </li> <li> <p>Le chemin relatif indique le chemin non pas depuis la racine, mais depuis un r\u00e9pertoire quelconque : le chemin relatif permettant d'acc\u00e9der au fichier \"img_486.jpg\" depuis le r\u00e9pertoire \"home\" est : \"fabrice/Images/img_486.jpg\"</p> <p>Remarquez l'absence du / au d\u00e9but du chemin (c'est cela qui nous permettra de distinguer un chemin relatif et un chemin absolu).</p> <p>Imaginons maintenant que nous d\u00e9sirions indiquer le chemin relatif pour acc\u00e9der au fichier \"mon_film.mp4\" depuis le r\u00e9pertoire \"Documents\". Il faut \"remonter\" d'un \"niveau\" dans l'arborescence pour se retrouver dans le r\u00e9pertoire \"marie\" et ainsi pouvoir repartir vers la bonne \"branche\". Pour ce faire il faut utiliser 2 points : ..</p> <p>On \u00e9crira : \"../Vid\u00e9os/mon_film.mp4\".</p> <p>Il est tout \u00e0 fait possible de remonter de plusieurs \"crans\" : \"../../\" depuis le r\u00e9pertoire \"Documents\" permet de \"remonter\" dans le r\u00e9pertoire \"home\".</p> </li> </ul> <p>Comme d\u00e9j\u00e0 \u00e9voqu\u00e9 plus haut, les syst\u00e8mes de type \"Unix\" sont des syst\u00e8mes \"multi-utilisateurs\" : chaque utilisateur poss\u00e8de son propre compte. Chaque utilisateur poss\u00e8de un r\u00e9pertoire \u00e0 son nom, ces r\u00e9pertoires personnels se situent traditionnellement dans le r\u00e9pertoire \"home\". Dans l'arborescence ci-dessus, nous avons 2 utilisateurs : \"fabrice\" et \"marie\". Par d\u00e9faut, quand un utilisateur ouvre une console, il se trouve dans son r\u00e9pertoire personnel.</p> <p>\u00c0 retenir</p> <p>Le symbole <code>~</code> repr\u00e9sente le dossier personnel de l'utilisateur connect\u00e9. Par exemple, si l'utilisateur \"marie\" est connect\u00e9, <code>~``` repr\u00e9sente</code>/home/marie/``.</p> <p>Attention : les syst\u00e8mes de type \"Unix\" sont \"sensibles \u00e0 la casse\" (il faut diff\u00e9rencier les caract\u00e8res majuscules et les caract\u00e8res minuscules) : le r\u00e9pertoire \"Documents\" et le r\u00e9pertoire \"documents\" sont 2 r\u00e9pertoires diff\u00e9rents.</p> <p>Il est important de savoir que si le double point (\"../\") permet de remonter d'un cran dans l'arborescence, le simple point \"./\" repr\u00e9sente le r\u00e9pertoire courant. Si vous vous trouvez dans le r\u00e9pertoire \"home\" un \"./document\" repr\u00e9sente le r\u00e9pertoire \"document\" qui se trouve dans le r\u00e9pertoire \"home\".</p> <p>Touche Tab</p> <p>Dans un terminal, on peut compl\u00e9ter automatiquement une commande ou un chemin en utilisant la touche de tabulation .</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#5-les-commandes-pour-manipuler-les-fichiers-et-les-repertoires","title":"5. Les commandes pour manipuler les fichiers et les r\u00e9pertoires","text":""},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#a-la-commande-cd","title":"a) la commande cd","text":"<p>La commande <code>cd</code> permet de changer le r\u00e9pertoire courant (cd = change directory). Il suffit d'indiquer le chemin (relatif ou absolu) qui permet d'atteindre le nouveau r\u00e9pertoire.</p> <p>Par exemple (en utilisant l'arborescence ci-dessous) :</p> <ul> <li>si le r\u00e9pertoire courant est le r\u00e9pertoire \"marie\" et que vous \"voulez vous rendre\" dans le r\u00e9pertoire \"Documents\", il faudra saisir la commande : <code>cd Documents</code> (relatif) ou <code>cd /home/marie/Documents</code> (absolu).</li> <li>si le r\u00e9pertoire courant est le r\u00e9pertoire \"Documents\" et que vous \"voulez vous rendre\" dans le r\u00e9pertoire \"Vid\u00e9os\", il faudra saisir la commande : <code>cd ../Vid\u00e9os</code> (relatif) ou <code>cd /home/marie/Vid\u00e9os</code> (absolu)</li> <li>si le r\u00e9pertoire courant est le r\u00e9pertoire \"Images\" et que vous \"voulez vous rendre\" dans le r\u00e9pertoire \"fabrice\", il faudra saisir la commande : <code>cd ..</code> (relatif) ou <code>cd /home/fabrice</code> (absolu)</li> </ul>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#b-la-commande-ls","title":"b) la commande ls","text":"<p>La commande <code>ls</code> permet de lister le contenu du r\u00e9pertoire courant.</p> <p></p> <p>Dans l'exemple ci-dessus, depuis le r\u00e9pertoire personnel de l'utilisateur \"fabrice\", nous passons dans le r\u00e9pertoire \"Documents\" \u00e0 l'aide d'un <code>cd Documents</code>, puis nous affichons le contenu de ce r\u00e9pertoire \"Documents\" \u00e0 l'aide de la commande <code>ls</code>. Nous trouvons dans le r\u00e9pertoire \"Documents\" : 3 fichiers (adresses.txt, Nouvelles.odt et screen.jpg) et deux r\u00e9pertoires (Travail et Loisirs).</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#c-la-commande-pwd","title":"c) la commande pwd","text":"<p>La commande <code>pwd</code> permet de conna\u00eetre le r\u00e9pertoire courant (permet d'afficher le chemin d'acc\u00e8s vers le r\u00e9pertoire courant depuis la racine, pwd = path to working directory).</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#d-la-commande-mkdir","title":"d) La commande mkdir","text":"<p>La commande <code>mkdir</code> permet de cr\u00e9er un r\u00e9pertoire dans le r\u00e9pertoire courant. La commande est de la forme <code>mkdir nom_du_r\u00e9pertoire</code>.</p> <p></p> <p>Remarque : il est pr\u00e9f\u00e9rable de ne pas utiliser de caract\u00e8res accentu\u00e9s dans les noms de r\u00e9pertoire (ou de fichier). Il en est de m\u00eame pour les espaces (\u00e0 remplacer par des caract\u00e8res tirets bas \"_\").</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#e-la-commande-rm","title":"e) La commande rm","text":"<p>La commande <code>rm</code> permet de supprimer un fichier ou un r\u00e9pertoire. La commande est de la forme <code>rm nom_du_r\u00e9pertoire_ou_nom_du_fichier</code>.</p> <p></p> <p>La plupart des commandes Linux peuvent \u00eatre utilis\u00e9es avec une ou des options. Par exemple, pour supprimer un r\u00e9pertoire non vide, il est n\u00e9cessaire d'utiliser la commande <code>rm</code> avec l'option <code>-r</code> : <code>rm -r nom_du_r\u00e9pertoire</code>.</p> <p></p> <p>En fait l'option -r permet de supprimer un r\u00e9pertoire et ses sous r\u00e9pertoire.</p> <p>ATTENTION : cette commande est relativement \"dangereuse\", il faut donc la manipuler prudemment. Par exemple la commande <code>rm *</code> efface tous les fichiers du r\u00e9pertoire courant (le * signifie tous les fichiers et tous les r\u00e9pertoires). Pour effacer tous les fichiers et tous les r\u00e9pertoires pr\u00e9sents dans le r\u00e9pertoire courant il faut donc utiliser <code>rm -r *</code>.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#f-la-commande-touch","title":"f) La commande touch","text":"<p>La commande <code>touch</code> permet de cr\u00e9er un fichier vide. La commande est de la forme <code>touch nom_du_fichier_\u00e0_cr\u00e9er</code>.</p> <p></p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#g-la-commande-cat","title":"g) La commande cat","text":"<p>La commande <code>cat</code> permet d'afficher dans la console le contenu d'un fichier.</p> <p></p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#h-la-commande-cp","title":"h) La commande cp","text":"<p>La commande <code>cp</code> permet de copier un fichier. La commande est de la forme <code>cp /r\u00e9pertoire_source/nom_fichier_\u00e0_copier /r\u00e9pertoire_destination/nom_fichier</code>.</p> <p></p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#i-la-commande-mv","title":"i) La commande mv","text":"<p>La commande <code>mv</code> (move) permet de d\u00e9placer un fichier dans un r\u00e9pertoire. Par exemple un <code>mv toto.txt titi</code> d\u00e9placera le fichier <code>toto.txt</code> dans le r\u00e9pertoire <code>titi</code> (attention on parle bien de d\u00e9placement pas de copie).</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#j-la-commande-man","title":"j) La commande man","text":"<p>La commande <code>man</code> permet d'obtenir la documentation d'une autre commande. Par exemple, <code>man ls</code> vous donnera la documentation de la commande <code>ls</code>.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_cours/#6-gestion-des-utilisateurs-et-des-groupes","title":"6. Gestion des utilisateurs et des groupes","text":"<p>Les syst\u00e8mes de type \"Unix\" sont des syst\u00e8mes multi-utilisateurs, plusieurs utilisateurs peuvent donc partager un m\u00eame ordinateur, chaque utilisateur poss\u00e9dant un environnement de travail qui lui est propre.</p> <p>Chaque utilisateur poss\u00e8de certains droits lui permettant d'effectuer certaines op\u00e9rations et pas d'autres. Le syst\u00e8me d'exploitation permet de g\u00e9rer ces droits tr\u00e8s finement. Un utilisateur un peu particulier est autoris\u00e9 \u00e0 modifier tous les droits : ce super utilisateur est appel\u00e9 administrateur ou root. L'administrateur pourra donc attribuer ou retirer des droits aux autres utilisateurs. Au lieu de g\u00e9rer les utilisateurs un par un, il est possible de cr\u00e9er des groupes d'utilisateurs. L'administrateur attribue des droits \u00e0 un groupe au lieu d'attribuer des droits particuliers \u00e0 chaque utilisateur.</p> <p>Comme nous venons de le voir, chaque utilisateur poss\u00e8de des droits qui lui ont \u00e9t\u00e9 octroy\u00e9s par le \"super utilisateur\". Nous nous int\u00e9resserons ici uniquement aux droits li\u00e9s aux fichiers, mais vous devez savoir qu'il existe d'autres droits li\u00e9s aux autres \u00e9l\u00e9ments du syst\u00e8me d'exploitation (imprimante, installation de logiciels...).</p> <p>Les fichiers et les r\u00e9pertoires poss\u00e8dent 3 types de droits :</p> <ul> <li>les droits en lecture (symbolis\u00e9s par la lettre r pour Read) : est-il autoris\u00e9 de lire le contenu de ce fichier ?</li> <li>les droits en \u00e9criture (symbolis\u00e9s par la lettre w pour Write) : est-il autoris\u00e9 de modifier le contenu de ce fichier ?</li> <li>les droits en ex\u00e9cution (symbolis\u00e9s par la lettre x pour eXecute) : est-il autoris\u00e9 d'ex\u00e9cuter le contenu de ce fichier (quand le fichier contient du code ex\u00e9cutable) ?</li> </ul> <p>Il existe 3 types d'utilisateurs pour un fichier ou un r\u00e9pertoire :</p> <ul> <li>le propri\u00e9taire du fichier (par d\u00e9faut c'est la personne qui a cr\u00e9\u00e9 le fichier), il est symbolis\u00e9 par la lettre u (User) ;</li> <li>le groupe, tous les utilisateurs appartenant \u00e0 ce groupe poss\u00e8dent des droits particuliers sur ce fichier. Le groupe est symbolis\u00e9 par la lettre g ;</li> <li>les autres utilisateurs (ceux qui ne sont pas le propri\u00e9taire du fichier et qui n'appartiennent pas au groupe associ\u00e9 au fichier). Ces utilisateurs sont symbolis\u00e9s la lettre o (Other).</li> </ul> <p>Il est possible d'utiliser la commande <code>ls</code> avec l'option <code>-l</code> afin d'avoir des informations suppl\u00e9mentaires concernant les droits des fichiers.</p> <p></p> <p>Prenons la premi\u00e8re ligne :</p> Terminal<pre><code>-rw-rw-r-- 1 fabrice fabrice     0 juil.  1 22:01 exercice.txt\n</code></pre> <p>Lisons cette ligne de gauche \u00e0 droite :</p> <ul> <li>le premier symbole \"-\" signifie que l'on a affaire \u00e0 un fichier, dans le cas d'un r\u00e9pertoire, nous aurions un \"d\" (voir la 2e ligne) ;</li> <li>les 3 symboles suivants \"rw-\"donnent les droits du propri\u00e9taire du fichier : lecture autoris\u00e9e \u00ae, \u00e9criture autoris\u00e9e (w), ex\u00e9cution interdite (- \u00e0 la place de x) ;</li> <li>les 3 symboles suivants \"rw-\"donnent les droits du groupe li\u00e9 au fichier : lecture autoris\u00e9e \u00ae, \u00e9criture autoris\u00e9e (w), ex\u00e9cution interdite (- \u00e0 la place de x) ;</li> <li>les 3 symboles suivants \"r--\"donnent les droits des autres utilisateurs : lecture autoris\u00e9e \u00ae, \u00e9criture interdite (- \u00e0 la place de w), ex\u00e9cution interdite (- \u00e0 la place de x) ;</li> <li>le caract\u00e8re suivant \"1\" donne le nombre de liens (nous n'\u00e9tudierons pas cette notion ici) ;</li> <li>le premier \"fabrice\" repr\u00e9sente le nom du propri\u00e9taire du fichier ;</li> <li>le second \"fabrice\" repr\u00e9sente le nom du groupe li\u00e9 au fichier ;</li> <li>le \"0\" repr\u00e9sente la taille du fichier en octet (ici notre fichier est vide) ;</li> <li>\"juil.  1 22:01\" donne la date et l'heure de la derni\u00e8re modification du fichier ;</li> <li>\"exercice.txt\" est le nom du fichier.</li> </ul> <p>Prenons la deuxi\u00e8me ligne :</p> Terminal<pre><code>drwxrwxr-x 2 fabrice fabrice  4096 juil.  1 21:12 Loisirs\n</code></pre> <p>Lisons cette ligne de gauche \u00e0 droite :</p> <ul> <li>le premier symbole \"d\" signifie que l'on a un r\u00e9pertoire ;</li> <li>les 3 symboles suivants \"rwx\" donnent les droits du propri\u00e9taire du r\u00e9pertoire : lecture du contenu du r\u00e9pertoire autoris\u00e9e \u00ae, modification du contenu du r\u00e9pertoire autoris\u00e9e (w), il est possible de parcourir le r\u00e9pertoire (voir le contenu du r\u00e9pertoire) (x) ;</li> <li>les 3 symboles suivants \"rwx\" donnent les m\u00eames droits au groupe li\u00e9 au r\u00e9pertoire ;</li> <li>les 3 symboles suivants \"r-x\"donnent les droits des autres utilisateurs : modification du contenu du r\u00e9pertoire interdite (- \u00e0 la place de w) ;</li> <li>le caract\u00e8re suivant \"2\" donne le nombre de liens (nous n'\u00e9tudierons pas cette notion ici) ;</li> <li>le premier \"fabrice\" repr\u00e9sente le nom du propri\u00e9taire du r\u00e9pertoire ;</li> <li>le second \"fabrice\" repr\u00e9sente le nom du groupe li\u00e9 au r\u00e9pertoire ;</li> <li>le \"4096\" repr\u00e9sente la taille du r\u00e9pertoire en octets ;</li> <li>\"juil.  1 21:12\" donne la date et l'heure de la derni\u00e8re modification du contenu du r\u00e9pertoire ;</li> <li>\"Loisirs\" est le nom du r\u00e9pertoire</li> </ul> <p>Il est important de ne pas perdre de vu que l'utilisateur root a la possibilit\u00e9 de modifier les droits de tous les utilisateurs.</p> <p>Le propri\u00e9taire d'un fichier peut modifier les permissions d'un fichier ou d'un r\u00e9pertoire \u00e0 l'aide de la commande <code>chmod</code>. Pour utiliser cette commande, il est n\u00e9cessaire de conna\u00eetre certains symboles :</p> <ul> <li>les symboles li\u00e9s aux utilisateurs : \"u\" correspond au propri\u00e9taire, \"g\" correspond au groupe li\u00e9 au fichier (ou au r\u00e9pertoire), \"o\" correspond aux autres utilisateurs et \"a\" correspond \u00e0 \"tout le monde\" (all : permet de modifier \"u\", \"g\" et \"o\" en m\u00eame temps) ;</li> <li>les symboles li\u00e9s \u00e0 l'ajout ou la suppression des permissions : \"+\" on ajoute une permission, \"-\" on supprime une permission, \"=\" les permissions sont r\u00e9initialis\u00e9es (permissions par d\u00e9faut) ;</li> <li>les symboles li\u00e9s aux permissions : \"r\" : lecture, \"w\" : \u00e9criture, \"x\" : ex\u00e9cution.</li> </ul> <p>La commande <code>chmod</code> \u00e0 cette forme :</p> Terminal<pre><code>chmod [u g o a] [+ - =] [r w x] nom_du_fichier\n</code></pre> <p>par exemple</p> Terminal<pre><code>chmod o+w toto.txt\n</code></pre> <p>attribuera la permission \"\u00e9criture\" pour le fichier \"toto.txt\" \"aux autres utilisateurs\".</p> <p>Il est possible de combiner les symboles :</p> Terminal<pre><code>chmod g-wx toto.txt\n</code></pre> <p>La commande <code>chmod</code> ci-dessus permet de supprimer la permission \"\u00e9criture\" et la permission \"ex\u00e9cution\" pour le fichier toto.txt \"au groupe li\u00e9 au fichier\".</p> <p>Une fois de plus, \"root\" a tous les droits sur l'ensemble des fichiers et des r\u00e9pertoires, il peut donc utiliser la commande <code>chmod</code> sur tous les r\u00e9pertoires et tous les fichiers.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/","title":"S3 - Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation","text":""},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#2-systemes-dexploitation","title":"2. Syst\u00e8mes d'exploitation","text":""},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#1-a-quoi-sert-un-systeme-dexploitation","title":"1. \u00c0 quoi sert un syst\u00e8me d'exploitation ?","text":"<p>Objectifs d'un syst\u00e8me d'exploitation :</p> <p>Les trois objectifs majeurs d'un syst\u00e8me d'exploitation sont:</p> <ul> <li>faire l'interface entre le mat\u00e9riel et l'utilisateur ;</li> <li>isoler le code utilisateur du mat\u00e9riel ;</li> <li>faire en sorte que tous les programmes puissent s'ex\u00e9cuter de fa\u00e7on \u00e9quitable.</li> </ul>"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#2-differents-systemes-dexploitation","title":"2. Diff\u00e9rents syst\u00e8mes d'exploitation","text":"<p>Logiciel libre</p> <p>Un logiciel est consid\u00e9r\u00e9 comme libre, au sens de la Free Software Foundation, s'il conf\u00e8re \u00e0 son utilisateur quatre libert\u00e9s (num\u00e9rot\u00e9es de 0 \u00e0 3) :</p> <ul> <li>la libert\u00e9 d'ex\u00e9cuter le programme, pour tous les usages ;</li> <li>la libert\u00e9 d'\u00e9tudier le fonctionnement du programme et de l'adapter \u00e0 ses besoins ;</li> <li>la libert\u00e9 de redistribuer des copies du programme (ce qui implique la possibilit\u00e9 aussi bien de donner que de vendre des copies) ;</li> <li>la libert\u00e9 d'am\u00e9liorer le programme et de distribuer ces am\u00e9liorations au public, pour en faire profiter toute la communaut\u00e9.</li> </ul> <p>L'acc\u00e8s au code source est une condition d'exercice des libert\u00e9s 1 et 3. </p> <p>Un logiciel propri\u00e9taire, est tout simplement un logiciel qui n'est pas libre, c'est-\u00e0-dire qui ne respecte pas l'une ou plusieurs des quatre libert\u00e9s \u00e9nonc\u00e9es ci-dessus.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#3-la-ligne-de-commande","title":"3. La ligne de commande","text":"<p>Les lignes de commande sont entr\u00e9e dans le terminal, appel\u00e9 aussi console ou, abusivement, shell.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#4-arborescence-du-systeme-de-fichier","title":"4. Arborescence du syst\u00e8me de fichier","text":"<p>Les syst\u00e8mes d\u00e9riv\u00e9s de Unix partagent une organisation des dossiers en arborescence.</p> <p></p> <ul> <li>Le chemin absolu doit indiquer \"le chemin\" depuis la racine. Par exemple \"/home/marie/Documents/compte_rendu.odt\".</li> <li> <p>Le chemin relatif indique le chemin non pas depuis la racine, mais depuis un r\u00e9pertoire quelconque. Par exemple : \"fabrice/Images/img_486.jpg\".</p> <p>Remarquez l'absence du / au d\u00e9but du chemin (c'est cela qui nous permettra de distinguer un chemin relatif et un chemin absolu).</p> <p>Pour \"remonter\" d'un \"niveau\" dans l'arborescence,  il faut utiliser 2 points : .., par exemple \"../../marie/Vid\u00e9os/mon_film.mp4\".</p> </li> </ul>"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#5-les-commandes-pour-manipuler-les-fichiers-et-les-repertoires","title":"5. Les commandes pour manipuler les fichiers et les r\u00e9pertoires","text":"Commande Effet cd changer de r\u00e9pertoire ls (ls -l) afficher le contenu du r\u00e9pertoire pwd afficher le nom du r\u00e9pertoire courant mkdir cr\u00e9er un r\u00e9pertoire dans le r\u00e9pertoire courant rm (rm -r) supprimer un fichier ou un r\u00e9pertoire touch cr\u00e9er un fichier vide cat afficher le contenu d'un fichier cp copier un fichier dans un r\u00e9pertoire mv d\u00e9placer un fichier dans un r\u00e9pertoire man afficher la documentation d'une autre commande"},{"location":"premiere/03_archi_SE/2_SE/SE_essentiel/#6-gestion-des-utilisateurs-et-des-groupes","title":"6. Gestion des utilisateurs et des groupes","text":"<p>Pour un fichier ou un r\u00e9pertoire, Linux distingue le propri\u00e9taire (u), le groupe (g) et les autres utilisateurs (o).</p> <p>Les droits associ\u00e9s sont la modification (w), la lecture ( r ) et l'ex\u00e9cution (x).</p> <p>La commande <code>ls -l</code> permet d'afficher la liste des fichiers et des r\u00e9pertoires avec les droits associ\u00e9s.</p> <p>La commande <code>chmod [u g o a] [+ - =] [r w x] nom_du_fichier</code> permet de modifier les droits associ\u00e9s \u00e0 un fichier ou \u00e0 un r\u00e9pertoire.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_exos/","title":"Exercices (SE)","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_exos/#qcm","title":"QCM","text":""},{"location":"premiere/03_archi_SE/2_SE/SE_exos/#exercice-1","title":"Exercice 1","text":"<p>En utilisant l'arborescence ci-dessous, quelle est la commande \u00e0 saisir si le r\u00e9pertoire courant est le r\u00e9pertoire \"home\" et que vous \"voulez vous rendre\" dans le r\u00e9pertoire \"Documents\" (vous utiliserez d'abord un chemin absolu puis un chemin relatif).</p> <p></p> <p>Consignes pour les exercices 2 et 3</p> <p>Les exercices 2 et 3 doivent \u00eatre r\u00e9alis\u00e9s sur un syst\u00e8me Linux. Ne disposant pas d'ordinateurs sous Linux au lyc\u00e9e, nous utiliserons un simulateur de terminale en ligne disponible \u00e0 l'adresse suivante : https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&amp;mem=192</p> <p>Une fois l'\u00e9mulateur d\u00e9marr\u00e9, entrer la commande <code>cd /</code> pour vous rendre \u00e0 la racine de l'arborescence du syst\u00e8me de fichier Linux. Tapez <code>ls</code> pour v\u00e9rifier la liste des dossiers qui s'affiche.</p> <p>Vous pouvez maintenant faire les exercices.</p> <p>Remarque : dans le terminale, la fl\u00e8che \"montante\" du clavier permet de remonter dans l'historique des commandes et la touche de tabulation permet la compl\u00e9tion automatique des commandes et des chemins.</p>"},{"location":"premiere/03_archi_SE/2_SE/SE_exos/#exercice-2","title":"Exercice 2","text":"<p>Faites les actions suivantes en utilisant des lignes de commande. Pour chaque question, recopier la liste des commandes utilis\u00e9es.</p> <ul> <li>Rendez-vous dans votre r\u00e9pertoire personnel <code>/home</code> ;</li> <li>Cr\u00e9ez un r\u00e9pertoire <code>doc</code> ;</li> <li>Placez-vous dans le r\u00e9pertoire <code>doc</code> ;</li> <li>Cr\u00e9ez un r\u00e9pertoire <code>texte</code> ;</li> <li>Cr\u00e9ez un r\u00e9pertoire <code>mesDoc</code> ;</li> <li>Placez-vous dans le r\u00e9pertoire <code>texte</code> ;</li> <li>Cr\u00e9ez un fichier <code>toto.txt</code> ;</li> <li>Ouvrez l'\u00e9diteur de texte <code>nano</code> pour \u00e9diter le fichier <code>toto.txt</code> : pour cela, entrer la commande <code>nano toto.txt</code> dans le terminal.</li> <li>Entrez le texte \"Bonjour Linux !\", enregistrez (CTRL O et valider) et quittez (CTRL X) <code>nano</code>.</li> <li>Affichez dans le terminal le contenu du fichier <code>toto.txt</code>.</li> <li>Placez-vous dans le r\u00e9pertoire <code>doc</code> ;</li> <li>Copiez le fichier <code>toto.txt</code> dans le r\u00e9pertoire <code>mesDoc</code> ;</li> <li>Placez-vous dans le r\u00e9pertoire <code>mesDoc</code> et v\u00e9rifiez que le fichier <code>toto.txt</code> est bien pr\u00e9sent dans ce r\u00e9pertoire ;</li> <li>Placez-vous dans le r\u00e9pertoire <code>doc</code> ;</li> <li>Effacez le fichier <code>toto.txt</code> du r\u00e9pertoire <code>texte</code> ;</li> <li>D\u00e9placez le fichier <code>toto.txt</code> du r\u00e9pertoire <code>mesDoc</code> vers le r\u00e9pertoire <code>doc</code> ;</li> <li>Effacez le r\u00e9pertoire <code>mesDoc</code> ;</li> <li>Effacez le r\u00e9pertoire <code>texte</code> ;</li> <li>Effacez le fichier <code>toto.txt</code>.</li> </ul>"},{"location":"premiere/03_archi_SE/2_SE/SE_exos/#exercice-3","title":"Exercice 3","text":"<p>Faites les actions suivantes en utilisant des lignes de commande (en partant de votre r\u00e9pertoire de travail). Recopier la liste des commandes utilis\u00e9es.</p> <ul> <li>Cr\u00e9ez un r\u00e9pertoire <code>doc</code> ;</li> <li>Placez-vous dans le r\u00e9pertoire <code>doc</code> et cr\u00e9ez un fichier <code>toto.txt</code> ;</li> <li>Listez les droits (r, w et x) pour les diff\u00e9rents utilisateurs (u, g et o) sur le fichier <code>toto.txt</code> ;</li> <li>Supprimez le droit en lecture pour les utilisateurs g sur le fichier <code>toto.txt</code>.</li> </ul>"},{"location":"premiere/04_representation_2/","title":"S4-Repr\u00e9sentation de donn\u00e9es - types construits","text":""},{"location":"premiere/04_representation_2/#programme","title":"Programme","text":"<p>\u00c0 partir des types de base se constituent des types construits, qui sont introduits au fur et \u00e0 mesure qu'ils sont n\u00e9cessaires.</p> <p>Il s'agit de pr\u00e9senter tour \u00e0 tour les p-uplets (tuples), les enregistrements qui collectent des valeurs de types diff\u00e9rents dans des champs nomm\u00e9s et les tableaux qui permettent un acc\u00e8s calcul\u00e9 direct aux \u00e9l\u00e9ments. En pratique, on utilise les appellations de Python, qui peuvent \u00eatre diff\u00e9rentes de celles d'autres langages de programmation.</p> Contenus Capacit\u00e9s attendues Commentaires p-uplets. p-uplets nomm\u00e9s \u00c9crire une fonction renvoyant un p-uplet de valeurs. Tableau index\u00e9, tableau donn\u00e9 en compr\u00e9hension Lire et modifier les \u00e9l\u00e9ments d'un tableau gr\u00e2ce \u00e0 leurs index. Construire un tableau par compr\u00e9hension. Utiliser des tableaux de tableaux pour repr\u00e9senter des matrices : notation a [i] [j]. It\u00e9rer sur les \u00e9l\u00e9ments d'un tableau. Seuls les tableaux dont les \u00e9l\u00e9ments sont du m\u00eame type sont pr\u00e9sent\u00e9s. Aucune connaissance des tranches (slices) n'est exigible. L'aspect dynamique des tableaux de Python n'est pas \u00e9voqu\u00e9. Python identifie listes et tableaux. Il n'est pas fait r\u00e9f\u00e9rence aux tableaux de la biblioth\u00e8que NumPy. Dictionnaires par cl\u00e9s et valeurs Construire une entr\u00e9e de dictionnaire. It\u00e9rer sur les \u00e9l\u00e9ments d'un dictionnaire. Il est possible de pr\u00e9senter les donn\u00e9es EXIF d'une image sous la forme d'un enregistrement. En Python, les p-uplets nomm\u00e9s sont impl\u00e9ment\u00e9s par des dictionnaires. Utiliser les m\u00e9thodes keys(), values () et items ()."},{"location":"premiere/04_representation_2/dicos/","title":"3. Dictionnaires","text":"<p>Tout comme les p-uplets et les tableaux, les dictionnaires sont un type construit de donn\u00e9es pouvant contenir plusieurs \u00e9l\u00e9ments. Mais \u00e0 la diff\u00e9rence des deux autres structures \u00e9tudi\u00e9es, les \u00e9l\u00e9ments contenus dans un dictionnaire ne sont pas ordonn\u00e9s et ils ne sont pas index\u00e9s par un entier, mais par une cl\u00e9 qui peut \u00eatre de diff\u00e9rents types.</p>"},{"location":"premiere/04_representation_2/dicos/#1-definition-et-creation-dun-dictionnaire","title":"1. D\u00e9finition et cr\u00e9ation d'un dictionnaire","text":"<p>D\u00e9finition</p> <p>Un dictionnaire est une collection de paires de la forme <code>cl\u00e9:valeur</code>.</p> <p>En Python, ils sont impl\u00e9ment\u00e9s par le type <code>dict</code> et sont d\u00e9limit\u00e9s par des accolades.</p> <p>On peut d\u00e9finir un dictionnaire de diff\u00e9rentes fa\u00e7ons :</p> <ul> <li> <p>en \u00e9crivant les couples les uns \u00e0 la suite des autres, s\u00e9par\u00e9s par des virgules, le tout entre accolades.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; capitales = {\"France\":\"Paris\", \"Allemagne\":\"Berlin\", \"Italie\":\"Rome\", \"Espagne\":\"Madrid\", \"Suisse\":\"Berne\",\n                 \"Luxembourg\":\"Luxembourg\", \"Belgique\":\"Bruxelles\", \"Pays-Bas\":\"Amsterdam\", \"Royaume-Uni\":\"Londres\"}\n&gt;&gt;&gt; type(capitales)\n&lt;class 'dict'&gt;  \n</code></pre> </li> <li> <p>en compr\u00e9hension, comme avec les tableaux.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; d = {chr(65+i): i for i in range(26)}\n&gt;&gt;&gt; d\n{'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25}\n</code></pre> </li> <li> <p>\u00e9l\u00e9ment par \u00e9l\u00e9ment apr\u00e8s avoir d\u00e9fini un dictionnaire vide.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; superficie = {}\n&gt;&gt;&gt; superficie[\"France\"] = 543940\n&gt;&gt;&gt; superficie[\"Allemagne\"] = 357588\n&gt;&gt;&gt; superficie[\"Espagne\"] = 505992\n&gt;&gt;&gt; superficie\n{'France': 543940, 'Allemagne': 357588, 'Espagne': 505992}\n</code></pre> </li> </ul> <p>Attention !</p> <p>Les cl\u00e9s et les valeurs peuvent \u00eatre de diff\u00e9rents types, mais avec des restrictions concernant les cl\u00e9s. Celles-ci ne peuvent prendre que des types immuables, c'est-\u00e0-dire non modifiables. Un tableau ne pourra par exemple pas servir de cl\u00e9. Par contre, un tuple le peut s'il ne contient que des \u00e9l\u00e9ments eux-m\u00eames immuables.</p> <p>On utilisera comme cl\u00e9s des \u00e9l\u00e9ments du type : <code>str</code>, <code>int</code>, <code>float</code>, <code>tuple</code>.</p> <p>Un dictionnaire est un objet variable, il ne peut donc pas servir de cl\u00e9.</p> <p>Les valeurs, par contre, peuvent \u00eatre de n'importe quel type, y compris des dictionnaires. Dans un m\u00eame dictionnaire, les diff\u00e9rentes cl\u00e9s peuvent \u00eatre de types diff\u00e9rents et les diff\u00e9rentes valeurs \u00e9galement.</p> <p>Une cl\u00e9 donn\u00e9e ne peut appara\u00eetre qu'une fois dans un dictionnaire. Si une cl\u00e9 existante est \u00e0 nouveau sp\u00e9cifi\u00e9e, la nouvelle valeur \u00e9crase la pr\u00e9c\u00e9dente.</p> <p>Par contre, une m\u00eame valeur peut appara\u00eetre plusieurs fois, associ\u00e9e \u00e0 des cl\u00e9s diff\u00e9rentes.</p>"},{"location":"premiere/04_representation_2/dicos/#2-manipulation-des-dictionnaires","title":"2. Manipulation des dictionnaires","text":""},{"location":"premiere/04_representation_2/dicos/#acces-aux-elements","title":"Acc\u00e8s aux \u00e9l\u00e9ments","text":"<p>On acc\u00e8de \u00e0 une valeur en utilisant sa cl\u00e9 comme indice :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; capitales[\"Espagne\"]\n'Madrid'\n</code></pre> <p>L'utilisation d'une cl\u00e9 inexistante renvoie une erreur. Pour \u00e9viter cela, on peut aussi utiliser la m\u00e9thode <code>get()</code> qui va renvoyer <code>None</code> si la cl\u00e9 n'existe pas.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; capitales[\"Autriche\"]\nTraceback (most recent call last):\n  File \"C:\\Users\\fabri\\AppData\\Local\\Programs\\Python\\Python310\\lib\\code.py\", line 90, in runcode\nexec(code, self.locals)\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'Autriche'\n&gt;&gt;&gt; capitales.get(\"Autriche\")\n&gt;&gt;&gt; print(capitales.get(\"Autriche\"))\nNone\n</code></pre> <p>Les m\u00e9thodes <code>keys()</code>, <code>values()</code> et <code>items()</code> permettent respectivement d'acc\u00e9der \u00e0 la liste des cl\u00e9s, \u00e0 la liste des valeurs et \u00e0 la liste des couples (cl\u00e9s, valeurs).</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; capitales.keys()\ndict_keys(['France', 'Allemagne', 'Italie', 'Espagne', 'Suisse', 'Luxembourg', 'Belgique', 'Pays-Bas', 'Royaume-Uni'])\n&gt;&gt;&gt; capitales.values()\ndict_values(['Paris', 'Berlin', 'Rome', 'Madrid', 'Berne', 'Luxembourg', 'Bruxelles', 'Amsterdam', 'Londres'])\n&gt;&gt;&gt; capitales.items()\ndict_items([('France', 'Paris'), ('Allemagne', 'Berlin'), ('Italie', 'Rome'), ('Espagne', 'Madrid'), ('Suisse', 'Berne'), ('Luxembourg', 'Luxembourg'), ('Belgique', 'Bruxelles'), ('Pays-Bas', 'Amsterdam'), ('Royaume-Uni', 'Londres')])\n</code></pre> <p>On peut tester l'appartenance \u00e0 un dictionnaire avec le mot cl\u00e9 <code>in</code> : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; \"Uruguay\" in capitales.keys()\nFalse\n&gt;&gt;&gt; \"Berlin\" in capitales.values()\nTrue\n</code></pre>"},{"location":"premiere/04_representation_2/dicos/#autres-operations","title":"Autres op\u00e9rations","text":"<p>Remarque</p> <ul> <li>Comme dit plus haut, les dictionnaires sont des structures modifiables : on peut changer la valeur associ\u00e9e \u00e0 une cl\u00e9 donn\u00e9e dans un programme.</li> <li>Par contre, on ne peut pas modifier une cl\u00e9.</li> </ul> <p>L'instruction <code>del</code> permet de supprimer une valeur d\u00e9sign\u00e9e par sa cl\u00e9.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; superficie\n{'France': 543940, 'Allemagne': 357588, 'Espagne': 505992}\n&gt;&gt;&gt; del superficie[\"France\"]\n&gt;&gt;&gt; superficie\n{'Allemagne': 357588, 'Espagne': 505992}\n</code></pre> <p>La fonction <code>len</code> renvoie le nombre de valeurs contenues dans le dictionnaire.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; len(capitales)\n9\n</code></pre> <p>Copie d'un dictionnaire : Les comportements sont similaires \u00e0 ceux rencontr\u00e9s avec les tableaux en particulier si les valeurs sont des tableaux. Il est donc conseill\u00e9 d'utiliser la fonction <code>deepcopy</code> du module <code>copy</code> pour \u00eatre certain d'obtenir une \"vraie\" copie.</p>"},{"location":"premiere/04_representation_2/dicos/#3-iterer-sur-les-elements-dun-dictionnaire","title":"3. It\u00e9rer sur les \u00e9l\u00e9ments d'un dictionnaire","text":"<p>On peut parcourir un dictionnaire \u00e0 partir de ses cl\u00e9s :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; superficie = {}\n&gt;&gt;&gt; superficie[\"France\"] = 543940\n&gt;&gt;&gt; superficie[\"Allemagne\"] = 357588\n&gt;&gt;&gt; superficie[\"Espagne\"] = 505992\n&gt;&gt;&gt; for pays in superficie.keys():\n        print(pays)\n\nFrance\nAllemagne\nEspagne\n</code></pre> <p>On peut parcourir un dictionnaire \u00e0 partir de ses valeurs :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; for valeur in superficie.values():\n        print(valeur)\n\n543940\n357588\n505992\n</code></pre> <p>On peut parcourir un dictionnaire \u00e0 partir des couples (cl\u00e9, valeur) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; for pays, valeur in superficie.items():\n        print(f\"La superficie du pays {pays} est de {valeur} km\u00b2\")\n\nLa superficie du pays France est de 543940 km\u00b2\nLa superficie du pays Allemagne est de 357588 km\u00b2\nLa superficie du pays Espagne est de 505992 km\u00b2\n</code></pre> <p>Remarque importante</p> <p>Un gros avantage des dictionnaires est que leur impl\u00e9mentation optimise la recherche d'un \u00e9l\u00e9ment. Il est beaucoup plus rapide de recherche une valeur dans un dictionnaire que dans un tableau, surtout si ceux-ci contiennent un grand nombre d'\u00e9l\u00e9ments. La raison de cette diff\u00e9rence sera \u00e9voqu\u00e9e en terminale.</p> <p>Pour les curieux, la vid\u00e9o propos\u00e9e par Lumni en lien ici permet d'approfondir la notion de dictionnaire.</p>"},{"location":"premiere/04_representation_2/enonce/","title":"Mini-projet : St\u00e9ganographie","text":"<p>Cette activit\u00e9 est fortement inspir\u00e9e du dossier paru sur le site bibmath.</p> <p>Les images utilis\u00e9es sont toutes issues du site Pixabay et libres de droits.</p> <p>La st\u00e9ganographie, du grec stegano (dissimuler), est une m\u00e9thode de cryptographie qui consiste, plut\u00f4t que de crypter un message, \u00e0 le cacher dans une image selon un proc\u00e9d\u00e9 plus ou moins complexe.</p> <p>On s'int\u00e9resse en particulier \u00e0 la dissimulation d'une image dans une autre image.</p> <p>Avant de commencer, il est n\u00e9cessaire de prendre en main le module Python PIL (Python Imaging Library) qui permet de manipuler des images.</p>"},{"location":"premiere/04_representation_2/enonce/#1-le-module-pil","title":"1. Le module PIL","text":""},{"location":"premiere/04_representation_2/enonce/#quest-ce-que-la-librairie-pil-","title":"Qu'est-ce que la librairie PIL ?","text":"<p>PIL est l'acronyme pour Python Imaging Library. Il s'agit d'une librairie additionnelle qui fournit des fonctions de traitement d'images et de manipulations graphiques \u00e0 Python. Elle supporte de nombreux formats d'images.</p> <p>La \"v\u00e9ritable\" biblioth\u00e8que PIL, c'est-\u00e0-dire la biblioth\u00e8que d'origine, n'a jamais \u00e9t\u00e9 port\u00e9e pour Python 3. Nous utiliserons donc une version d\u00e9riv\u00e9e, nomm\u00e9e Pillow (les informaticiens ont beaucoup d'humour...) qui est, elle, compatible avec les derni\u00e8res versions de Python 3. On pourra consulter le site de Pillow. La biblioth\u00e8que Pillow est d\u00e9j\u00e0 install\u00e9e dans la distribution EduPython.</p> <p>Attention</p> <p>Toutes les images utilis\u00e9es dans ce mini-projet sont t\u00e9l\u00e9chargeables en cliquant ici : images.zip</p> <p>Pour faire ce travail, il est n\u00e9cessaire d'avoir t\u00e9l\u00e9charg\u00e9 les images et de les avoir plac\u00e9es dans le m\u00eame dossier que votre programme.</p> <p>Le travail pourra \u00eatre fait dans EduPython, ou dans la console Python accessible dans le menu ci-dessus. Dans ce cas, les images devront \u00eatre charg\u00e9es dans la console en utilisant le bouton repr\u00e9sentant un dossier.</p> <p></p>"},{"location":"premiere/04_representation_2/enonce/#commandes-utiles-pour-une-utilisation-de-base","title":"Commandes utiles pour une utilisation de base","text":"<p>Avant toute chose, on importera la biblioth\u00e8que en ajoutant la ligne suivante en d\u00e9but de programme :</p> \ud83d\udc0d Script Python<pre><code>from PIL import Image\n</code></pre> <ul> <li>Exemple d'ouverture d'un fichier et acc\u00e8s \u00e0 ses informations</li> </ul> \ud83d\udc0d Script Python<pre><code># ouverture du fichier image\nimg = Image.open(\"chat.png\")\n# nom du fichier\nprint(img.filename)\n# taille du fichier\nprint(img.size)\nprint(img.width)\nprint(img.height)\n</code></pre> \ud83d\udc0d Script Python<pre><code># Affichage de l'image\nimg.show()\n</code></pre> <p></p> <ul> <li> <p>Un fichier image peut avoir trois modes diff\u00e9rents :</p> <ul> <li>\"l\" (lettre l minuscule) pour un fichier en noir et blanc     (uniquement deux couleurs) ;</li> <li>\"L\" pour un fichier en niveaux de gris ;</li> <li>\"RGB\" pour une image en couleur.</li> </ul> <p>Une image est repr\u00e9sent\u00e9e par un tableau de pixels. Chaque pixel est rep\u00e9r\u00e9 par ses coordonn\u00e9es \\((x;y)\\) o\u00f9 \\(x\\) est la ligne o\u00f9 se trouve le pixel et \\(y\\) la colonne. Chaque pixel poss\u00e8de une valeur.</p> <p>Dans le cas d'une image en noir et blanc, la valeur d'un pixel est 0 (blanc) ou 1 (noir).</p> <p>Dans le cas d'une image en niveaux de gris, la valeur d'un pixel est un entier compris entre 0 (noir) et 255 (blanc).</p> <p>Dans le cas d'une image en couleurs RGB, la valeur d'un pixel est un 3-uplet \\((R, G, B)\\) dans lequel chaque \u00e9l\u00e9ment est un entier compris entre 0 et 255 qui repr\u00e9sente respectivement la prorportion de rouge, de vert et de bleu dans la couleur du pixel en question.</p> </li> <li> <p>Acc\u00e9der \u00e0 la valeur d'un pixel : <code>img.getpixel((x, y))</code>. Cette     fonction retourne un entier (dans le cas d'une image noir et blanc     ou en niveaux de gris) ou un triplet (dans le cas d'une image en     couleurs). Attention \u00e0 la syntaxe : il n'y a qu'un seul argument,     qui est un couple de coordonn\u00e9es (donc doubles parenth\u00e8ses).</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>print(img.mode)\nimg.getpixel((48,75)) # attention aux parenth\u00e8ses !\n</code></pre> <ul> <li>Commandes pour cr\u00e9er un fichier image et d\u00e9finir la valeur de ses     pixels :</li> </ul> \ud83d\udc0d Script Python<pre><code>largeur = 200\nhauteur = 100\n# Cr\u00e9ation d'une nouvelle image en niveaux de gris en m\u00e9moire\nnouvelle_image = Image.new(\"L\", (largeur, hauteur))\n# D\u00e9finition de la valeur d'un pixel particulier\nnouvelle_image.putpixel((48,75), 189)\n\n# Double boucle pour parcourir tous les pixels et affecter une valeur al\u00e9atoire\nfrom random import randint\n\nfor i in range(largeur):\n    for j in range(hauteur):\n        nouvelle_image.putpixel((i,j), randint(0,255))\n\n# Enregistrement du fichier\nnouvelle_image.save(\"mon_image.png\")\n\n# Affichage dans le notebook\nnouvelle_image.show()\n</code></pre> <p></p>"},{"location":"premiere/04_representation_2/enonce/#2-st\u00e9ganographie-dans-une-image-en-niveaux-de-gris","title":"2. St\u00e9ganographie dans une image en niveaux de gris","text":""},{"location":"premiere/04_representation_2/enonce/#le-principe","title":"Le principe","text":"<p>Consid\u00e9rons deux images en niveau de gris. Chaque pixel est donc cod\u00e9 par un entier compris en 0 et 255. Nous supposons de plus ces deux images de m\u00eame taille.</p> <p>La premi\u00e8re image <code>image1.pgm</code> est la suivante (dimensions : 640x426) :</p> <p></p> <p>La seconde image <code>image2.pgm</code> est la suivante (dimensions : 640x426) :</p> <p></p> <p>Nous utilisons des images au format PGM qui est non compress\u00e9. L'utilisation d'un format compress\u00e9 du type JPG ou PNG emp\u00eacherait notre m\u00e9thode de fonctionner. Ce type d'image s'affiche dans le logiciel GIMP.</p> <p>L'objectif est de cacher l'image 2 dans l'image 1. Comment faire ?</p> <p>Chaque pixel de chacune des deux images est cod\u00e9 par un entier compris entre 0 et 255. \u00c9crit en base 2, cet entier s'\u00e9crit avec 8 chiffres (en ajoutant \u00e9ventuellement des z\u00e9ros inutiles au d\u00e9but du nombre). Prenons par exemple un pixel de la premi\u00e8re image cod\u00e9 par le nombre binaire <code>1011 0101</code> : les quatre premiers chiffres ont plus de poids dans la valeur de ce nombre que les quatre derniers puisqu'ils sont associ\u00e9s \u00e0 de plus grandes puissances de 2. Nous les appellerons bits de poids lourds. Les quatre derniers sont donc des bits de poids faible.</p> <p>Si on remplace ce nombre par un nombre dont on ne modifie que les quatre bits de poids faible (les quatre derniers), alors l'image sera assez peu modifi\u00e9e. C'est cette remarque qui permet de cacher l'image 2 dans l'image 1. Il suffit de cr\u00e9er une nouvelle image dont chaque pixel est form\u00e9 des bits de poids lourd de chacune des deux images de d\u00e9part.</p> <p>Pour chaque pixel des deux images :</p> Image 1 Image 2 Image crypt\u00e9e 1011 0101 0110 1100 1011 0110 <p>Comme on n'a modifi\u00e9 que les bits de poids faible de l'image 1, l'image crypt\u00e9e ressemblera beaucoup \u00e0 l'image 1, mais un programmeur averti saura en extraire l'image 2 ...</p> <p>Voici, \u00e0 gauche, l'image 1 et, \u00e0 droite, l'image crypt\u00e9e (la pauvre vache est perdue dans la ville !).</p> Image 1 Image crypt\u00e9e"},{"location":"premiere/04_representation_2/enonce/#mini-projet","title":"Mini-projet","text":"<p>Ta mission, si tu l'acceptes, consiste en deux choses :</p> <ol> <li>Programmer un algorithme permettant de cr\u00e9er l'image crypt\u00e9e \u00e0     partir des deux images de d\u00e9part. Il s'agit de d\u00e9finir une     fonction qui prend en arguments deux images de m\u00eames     dimensions et qui retourne l'image crypt\u00e9e.</li> <li>Programmer un algorithme permettant de retrouver l'image cach\u00e9e     dans une image crypt\u00e9e. Il s'agit de d\u00e9finir une fonction qui     prend en argument une image crypt\u00e9e et qui retourne l'image     cach\u00e9e.</li> </ol> <p>En cas de besoin, quelques indications :</p> <ul> <li>La fonction <code>bin()</code> permet de convertir un entier en sa     repr\u00e9sentation binaire sous forme de cha\u00eene de caract\u00e8res.     Cependant, le r\u00e9sultat ne contient pas les z\u00e9ros inutiles en d\u00e9but     de cha\u00eene !!! Par exemple <code>bin(45)</code> retourne <code>'0b101101'</code>.</li> <li>Pour acc\u00e9der aux \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8res, on utilise     les crochets comme pour les tableaux. Un indice n\u00e9gatif indique que     l'on part de la fin de la cha\u00eene. Par exemple, si     <code>mot = \"indication\"</code>, <code>mot[2:-2]</code> retourne <code>\"dicati\"</code>.</li> </ul> <p>Une premi\u00e8re \u00e9tape dans la r\u00e9alisation de ce projet consiste donc en l'\u00e9criture d'une fonction permettant d'obtenir la repr\u00e9sentation binaire d'un entier compris entre 0 et 255 sous la forme d'une cha\u00eene de caract\u00e8res de longueur exactement 8. Tu peux compl\u00e9ter la fonction ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>def bin_8_car(x):\n\"\"\"x est un entier compris entre 0 et 255\n    la fonction renvoie une cha\u00eene de 8 caract\u00e8res\n    repr\u00e9sentant x en binaire\"\"\"\n    nb = bin(x)\n    nb = nb[2:] # on enl\u00e8ve '0b'\n    # on ajoute des z\u00e9ros pour arriver \u00e0 8 caract\u00e8res\n    while ... :\n        nb = ... + nb\n    return nb\n</code></pre> <p>Ex\u00e9cute les tests ci-dessous pour v\u00e9rifier la fonction.</p> \ud83d\udc0d Script Python<pre><code># tests de la fonction bin_8_car\nassert bin_8_car(54) == \"00110110\"\nassert bin_8_car(255) == \"11111111\"\nprint(\"Tests r\u00e9ussis !\")\n</code></pre> <p>Compl\u00e9te ci-dessous la fonction <code>crypte</code> r\u00e9alisant la premi\u00e8re t\u00e2che demand\u00e9e :</p> \ud83d\udc0d Script Python<pre><code>def crypte(img1, img2):\n\"\"\"Cette fonction cache l'image 2 dans l'image 1\"\"\"\n    largeur, hauteur = img1.size\n    imgCrypt = Image.new(\"L\", (largeur, hauteur))\n    for i in range(...):\n        for j in range(...):\n            pixel_img1 = img1.getpixel((i,j))\n            pixel_img2 = img2.getpixel((i,j))\n            ...\n            ...\n            ...\n            imgCrypt.putpixel((i,j), ...)\n    return imgCrypt\n</code></pre> \ud83d\udc0d Script Python<pre><code># test de la fonction crypte : il est normal que cela prenne quelques secondes\n# ici, on cache l'image de la vache dans l'image de la ville\nimg1 = Image.open('image1.pgm')\nimg2= Image.open('image2.pgm')\nimage_cryptee = crypte(img1, img2)\nimage_cryptee.save(\"vache_perdue.pgm\")\nimage_cryptee\n</code></pre> <p>Compl\u00e9te ci-dessous la fonction <code>decrypte</code> r\u00e9alisant la seconde t\u00e2che demand\u00e9e :</p> \ud83d\udc0d Script Python<pre><code>def decrypte(imgCrypt):\n\"\"\"Cette fonction retourne l'image cach\u00e9e dans imgCrypt\"\"\"\n    largeur, hauteur = imgCrypt.size\n    img = Image.new(\"L\", (largeur, hauteur))\n    ...\n    return img\n</code></pre> <p>Pour tester cette fonction, voici une image en niveaux de gris qui contient un message secret. Le fichier est nomm\u00e9 <code>image_crypte.pgm</code>.</p> <p></p> \ud83d\udc0d Script Python<pre><code># test de la fonction decrypte\n# ou ouvre une image qui contient une image crypt\u00e9e\nimageCryptee = Image.open(\"image_crypte.pgm\")\n# on d\u00e9crypte\nimage = decrypte(imageCryptee)\n# on affiche l'image qui \u00e9tait cach\u00e9e\nimage\n</code></pre> <p>Maintenant, tu peux t'amuser \u00e0 cr\u00e9er d'autres images crypt\u00e9es et \u00e0 les d\u00e9crypter pour tester tes fonctions sur plusieurs exemples.</p>"},{"location":"premiere/04_representation_2/enonce/#d\u00e9fi-","title":"D\u00e9fi !!!","text":"<p>Dans une image en couleur au format <code>RGB</code>, chaque pixel est cod\u00e9 par trois entiers compris entre 0 et 255.</p> <p>On peut donc y cacher trois images en niveaux de gris diff\u00e9rentes : une dans chaque composante de couleur.</p> <p>En suivant cette id\u00e9e, j'ai cach\u00e9 trois messages dans l'image ci-dessous, nomm\u00e9e <code>defi_steg.ppm</code>. Sauras-tu retrouver les trois messages cach\u00e9s ?</p> <p></p> \ud83d\udc0d Script Python<pre><code>### \u00e0 compl\u00e9ter ...\ndef decrypte_image_couleurs(img):\n    pass\n</code></pre>"},{"location":"premiere/04_representation_2/essentiel/","title":"S4-Repr\u00e9sentation de donn\u00e9es - Types construits","text":"<p>Les trois structures de donn\u00e9es pr\u00e9sent\u00e9es dans ce chapitre permettent de regrouper des valeurs dans une seule structure.</p>"},{"location":"premiere/04_representation_2/essentiel/#1-p-uplets","title":"1. p-uplets","text":"<p>Les p_uplets sont :</p> <ul> <li>d\u00e9limit\u00e9s par des parenth\u00e8ses ;</li> <li>ordonn\u00e9s : chaque \u00e9l\u00e9ment est associ\u00e9 \u00e0 son indice entier (on commence par z\u00e9ro) ;</li> <li>immuables : ils ne peuvent \u00eatre modifi\u00e9s apr\u00e8s avoir \u00e9t\u00e9 cr\u00e9\u00e9s ;</li> <li>compos\u00e9s d'\u00e9l\u00e9ments qui ne sont pas obligatoirement tous du m\u00eame type ;</li> <li>impl\u00e9ment\u00e9s par le type <code>tuple</code> en Python.</li> </ul>"},{"location":"premiere/04_representation_2/essentiel/#2-tableaux","title":"2. Tableaux","text":"<p>Les tableaux sont :</p> <ul> <li>d\u00e9limit\u00e9s par des crochets ;</li> <li>ordonn\u00e9s : chaque \u00e9l\u00e9ment est associ\u00e9 \u00e0 son indice entier (on commence par z\u00e9ro) ;</li> <li>variables : leurs \u00e9l\u00e9ments peuvent \u00eatre modifi\u00e9s au cours d'un programme. Pour palier \u00e0 d'\u00e9ventuelles surprises, on utilise la fonction <code>deepcopy</code> du module <code>copy</code> pour cr\u00e9er une copie d'un tableau compl\u00e8tement ind\u00e9pendante de l'original ;</li> <li>compos\u00e9s d'\u00e9l\u00e9ments qui sont tous du m\u00eame type ;</li> <li>impl\u00e9ment\u00e9s par le type <code>list</code> en Python.</li> </ul>"},{"location":"premiere/04_representation_2/essentiel/#3-dictionnaires","title":"3. Dictionnaires","text":"<p>Les dictionnaires sont :</p> <ul> <li>d\u00e9limit\u00e9s par des accolades ;</li> <li>non ordonn\u00e9es : les couples (cl\u00e9, valeur) ne sont pas ordonn\u00e9s a priori ;</li> <li>variables : leurs \u00e9l\u00e9ments peuvent \u00eatre modifi\u00e9s au cours d'un programme. Pour palier \u00e0 d'\u00e9ventuelles surprises, on utilise la fonction <code>deepcopy</code> du module <code>copy</code> pour cr\u00e9er une copie d'un dictionnaire compl\u00e8tement ind\u00e9pendante de l'original ;</li> <li>compos\u00e9s de valeurs et de cl\u00e9s qui ne sont pas forc\u00e9ment du m\u00eame type. Cependant, les clefs doivent toujours \u00eatre dans un type immuable (<code>int</code>, <code>float</code>, <code>str</code>, <code>tuple</code>) ;</li> <li>impl\u00e9ment\u00e9s par le type <code>dict</code> en Python.</li> </ul> <p>Ce n'est pas tout !</p> <p>Je vous renvoie au cours pour le d\u00e9tail des instructions relatives \u00e0 chacune de ces structures.</p> <p>Vous devez savoir :</p> <ul> <li> D\u00e9finir un p-uplet.</li> <li> \u00c9crire une fonction renvoyant un p-uplet de valeurs.</li> <li> Lire et modifier les \u00e9l\u00e9ments d'un tableau gr\u00e2ce \u00e0 leurs index.</li> <li> Construire un tableau en compr\u00e9hension.</li> <li> Utiliser des tableaux \u00e0 deux dimensions (matrices).</li> <li> It\u00e9rer sur les \u00e9l\u00e9ments d'un tableau.</li> <li> D\u00e9finir un dictionnaire. Ajouter une entr\u00e9e.</li> <li> It\u00e9rer sur les \u00e9l\u00e9ments d'un dictionnaire.</li> </ul>"},{"location":"premiere/04_representation_2/exos_dicos/","title":"Exercices sur les dictionnaires","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-1","title":"Exercice 1","text":"<ol> <li> <p>Le dictionnaire suivant donne des informations sur l'adresse d'une personne.</p> <p><code>adresse = {(\"numero\", 13), (\"rue\", \"rue des Lilas\"), (\"codepostal\", 78340), (\"ville\", \"P\u00e9taouchnoc\"){</code></p> <p>Cette instruction ne respecte pas la syntaxe du langage Python, la corriger.</p> </li> <li> <p>Le dictionnaire suivant donne des informations sur l'identit\u00e9 d'une personne.</p> <p><code>identite = {\"nom\":\"Durand\", \"prenom\":\"Christophe\", \"prenom\":\"Jean\", 52:\"age\"}</code></p> <p>Expliquer ce qui n'est pas correct dans cette d\u00e9claration et corriger.</p> </li> </ol>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-2","title":"Exercice 2","text":"<p>Un film peut \u00eatre d\u00e9fini par un certain nombre de caract\u00e9ristiques : son titre, son r\u00e9alisateur, sa dur\u00e9e, son ann\u00e9e de sortie. On d\u00e9finit pour cela le dictionnaire suivant :</p> \ud83d\udc0d Script Python<pre><code>film = {\"titre\":\"Star Wars\", \"auteur\":\"G.Lucas\", \"duree\":121, \"annee\":1977}\n</code></pre> <ol> <li>Corriger l'instruction suivante : <code>print(\"Mon film pr\u00e9f\u00e9r\u00e9\", film[0], \"est sorti en\", film(\"annee\"), \"!\")</code></li> <li> <p>Qu'est-ce qui est affich\u00e9 par les instructions suivantes :</p> \ud83d\udc0d Script Python<pre><code>print(film[\"auteur\"],\"est mon dieu vivant.\")\nprint(film[\"titre\"],\"c'est\",film[\"dur\u00e9e\"],\"minutes d'extase !\")\n</code></pre> </li> <li> <p>Qu'est-ce qui est affich\u00e9 par les instructions suivantes ?</p> \ud83d\udc0d Script Python<pre><code>print(\"Qui est l'\",film[\"G.Lucas\"],\"de ce film ?\")\nprint(film[\"acteur\"],\"est trop beau dans de ce film !\")\n</code></pre> </li> </ol>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-3","title":"Exercice 3","text":"<p>Le dictionnaire suivant donne les articles choisis par un visiteur sur un site internet, et la quantit\u00e9 de chaque article.</p> \ud83d\udc0d Script Python<pre><code>panier = {\"stylo\": 10, \"crayon\": 15, \"gomme\": 3, \"tube de colle\": 2, \"cahier\": 5}\npanier[\"gomme\"] = panier[\"gomme\"] + 2\npanier[\"crayon\"] = 12\ndel panier[\"tube de colle\"]\npanier[\"scoth\"] = 1\n</code></pre> <p>Quels sont les \u00e9l\u00e9ments du dictionnaire apr\u00e8s l'ex\u00e9cution de ces instructions ?</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-4","title":"Exercice 4","text":"<p>\u00c0 l'issue d'une \u00e9lection \u00e0 scrutin uninominal, on r\u00e9cup\u00e8re un tableau contenant tous les noms inscrits sur les bulletins trouv\u00e9s dans l'urne :</p> \ud83d\udc0d Script Python<pre><code>urne = [\"Maurice\",\"Roger\",\"Maurice\",\"Marie\",\"Marie\",\"Jeanne\",\"Roger\",\n             \"Roger\",\"Maurice\",\"Roger\",\"Maurice\",\"Marie\",\"Marie\",\"Roger\",\"Marie\"]\n</code></pre> <p>Nous voulons cr\u00e9er un dictionnaire qui \u00e0 chaque nom associera son nombre de voix : <code>scorescandidats = {}</code>.</p> <p>Par exemple, Maurice a obtenu 4 voix, un des couples du dictionnaire sera : <code>\"Maurice\": 4</code></p> <p>L'avantage d'un dictionnaire est qu'il n'y a pas besoin de savoir \u00e0 l'avance qui sont les candidats, ni m\u00eame combien il y en a.</p> <p>Copier ce tableau dans un fichier python. Cr\u00e9er un dictionnaire vide, et parcourir le tableau.</p> <p>Pour chaque \u00e9l\u00e9ment du tableau : </p> <ul> <li>soit le nom n'est pas encore dans le dictionnaire, et dans ce cas on l'ajoute au dictionnaire en lui donnant 1 premi\u00e8re voix ;</li> <li>soit le nom est d\u00e9j\u00e0 dans le dictionnaire, et dans ce cas on augmente son nombre de voix de 1.</li> </ul> <p>\u00c9crire et tester un programme r\u00e9alisant ces op\u00e9rations.</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-5","title":"Exercice 5","text":"<p>Le dictionnaire suivant donne les noms et les nationalit\u00e9s des visiteurs d'un site.</p> \ud83d\udc0d Script Python<pre><code>visiteurs = {\"STARK\": \"usa\", \"TOR\": \"rus\", \"MACRON\": \"fr\", \"JOHNSON\": \"en\",\n             \"DUBOIS\": \"fr\", \"MACARTHUR\": \"usa\", \"HOLMES\": \"en\",\n             \"BERNARD\": \"fr\", \"DURAND\": \"fr\", \"HOLLANDE\": \"fr\",\n             \"OBAMA\": \"usa\", \"POPOV\": \"rus\"}\n</code></pre> <p>\u00c9crire une fonction qui renvoie le nombre de clients fran\u00e7ais.</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-6","title":"Exercice 6","text":"<p>Le dictionnaire suivant donne la liste des couples identifiant/mots de passe des adh\u00e9rents d'un site.</p> \ud83d\udc0d Script Python<pre><code>identifiants = {\"joe.durand\": \"Joe-la-terreur\",\n                \"dupond15\": \"Dd152017\",\n                \"bfournier\": \"#14;P@gh\",\n                \"bonnetjohn\": \"Kamikaze2038\",\n                \"d.dubois\": \"15022001\",\n                \"martin\": \"youhou\",\n                \"Bernard.71\": \"bebertpower2001\"}\n</code></pre> <p>Par exemple, le premier adh\u00e9rent a pour identifiant \"joe.durand\" et son mot de passe est  \"Joe-la-terreur\".</p> <p>\u00c9crire un programme qui demande \u00e0 l'utilisateur de saisir son identifiant et son mot de passe. On v\u00e9rifie ensuite si ce couple identifiant/mot de passe est pr\u00e9sent dans le dictionnaire. Si c'est le cas, on affiche le message \"Identification r\u00e9ussie, bienvenue sur notre site\", et sinon le message \"Nous ne vous connaissons pas\".</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-7","title":"Exercice 7","text":"<p>On donne ci-dessous un dictionnaire de conversion du binaire en hexad\u00e9cimal, dont les couples sont compos\u00e9s d'un nombre binaire et de sa conversion en hexad\u00e9cimal :</p> \ud83d\udc0d Script Python<pre><code>Convbinaire = {\"0000\": \"0\", \"0001\": \"1\", \"0010\": \"2\", \"0011\": \"3\", \"0100\": \"4\", \"0101\": \"5\",\n               \"0110\": \"6\", \"0111\": \"7\", \"1000\": \"8\", \"1001\": \"9\", \"1010\": \"A\", \"1011\": \"B\",\n               \"1100\": \"C\", \"1101\": \"D\", \"1110\": \"E\", \"1111\": \"F\"}\n</code></pre> <p>\u00c9crire une fonction qui cr\u00e9e le dictionnaire invers\u00e9 <code>Convhexa</code> dont les couples sont compos\u00e9s d'un nombre hexad\u00e9cimal et de sa conversion en binaire.</p>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-8","title":"Exercice 8","text":"<p>Voici un tableau qui r\u00e9pertorie des informations sur les adh\u00e9rents d'un site internet, certaines informations n'\u00e9tant pas compl\u00e8tes :</p> Nom Sexe Avatar Age Ann\u00e9e d'adh\u00e9sion Mot de passe F Bebert 19 2019 Bibi2019* Bonbon 2017 45trd ;*%GR DUBET M Bud 17 2018 Bud17 DURAND M 2018 OuahOuah FOURNIER F 2016 12051995 Tinmar 2017 Titidu15 <p>On peut le repr\u00e9senter par un tableau de dictionnaires partageant les m\u00eames cl\u00e9s (un dictionnaire pour chaque adh\u00e9rent) :</p> \ud83d\udc0d Script Python<pre><code>ListeAdherents = [\n    {\"sexe\": \"F\", \"avat\": \"Bebert\", \"age\": 19, \"an\": 2019, \"pw\": \"Bibi2019*\"},\n    {\"avat\": \"Bonbon\", \"an\": 2017, \"password\": \"45trd ;*%GR\"},\n    {\"nom\": \"DUBET\", \"sexe\": \"M\", \"avat\": \"Bud\", \"age\": 17, \"an\": 2018, \"pw\": \"Bud17\"},\n    {\"nom\": \"DURAND\", \"sexe\": \"M\", \"an\": 2018, \"pw\": \"OuahOuah\"},\n    {\"nom\": \"FOURNIER\", \"sexe\": \"F\", \"an\": 2016, \"pw\": \"12051995\"},\n    {\"avat\": \"Tinmar\", \"an\": 2017, \"password\": \"Titidu15\"}]\n</code></pre> <ol> <li> <p>Sans utiliser l'ordinateur, pr\u00e9voir ce qui est affich\u00e9 par les instructions suivantes :</p> <ul> <li><code>print(ListeAdherents[1])</code></li> <li><code>print(ListeAdherents[\"avat\"][2])</code></li> <li><code>print(ListeAdherents[2][\"age\"])</code></li> <li><code>print(ListeAdherents[\"pw\"])</code></li> <li><code>print(ListeAdherents[4][\"avat\"])</code></li> </ul> </li> <li> <p>\u00c9crire une fonction qui renvoie la liste des avatars de tous les adh\u00e9rents qui en ont un (utiliser une boucle for).</p> </li> </ol>"},{"location":"premiere/04_representation_2/exos_dicos/#exercice-9-qcm","title":"Exercice 9 : QCM","text":"<ol> <li> <p>On d\u00e9finit :</p> \ud83d\udc0d Script Python<pre><code>T = [{'fruit': 'banane', 'nombre': 25}, {'fruit': 'orange', 'nombre': 124},\n    {'fruit': 'pomme', 'nombre': 75}, {'fruit': 'kiwi', 'nombre': 51}] \n</code></pre> <p>Quelle expression a pour valeur le nombre de pommes ?</p> <ul> <li> <code>T[2]['nombre']</code></li> <li> <code>T[2,'nombre']</code></li> <li> <code>T[3]['nombre']</code></li> <li> <code>T[3,'nombre']</code></li> </ul> </li> <li> <p>On ex\u00e9cute le script suivant :</p> \ud83d\udc0d Script Python<pre><code>inventaire = {'pommes': 430, 'bananes': 312,\n            'oranges': 274, 'poires': 137}\n\nstock = 0\nfor fruit in inventaire.keys():\n    if fruit != 'bananes':\n        stock = stock + inventaire[fruit]\n</code></pre> <p>Que contient la variable <code>stock</code> \u00e0 la fin de cette ex\u00e9cution ?</p> <ul> <li> <code>{430, 274, 137}</code></li> <li> <code>312</code></li> <li> <code>841</code></li> <li> <code>{ 'pommes', 'oranges', 'poires' }</code></li> </ul> </li> <li> <p>On dispose du dictionnaire <code>regions</code> ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>regions = {'Mayotte': 376, 'Pays de la Loire': 32082,\n        'La R\u00e9union': 2504, 'Grand Est': 57441,\n        'Martinique': 1128, 'Corse': 8680,\n        'Bretagne': 27208, 'Nouvelle-Aquitaine': 84036}\n</code></pre> <p>Parmi les instructions suivantes, laquelle permet d'ajouter une nouvelle r\u00e9gion ?</p> <ul> <li> <code>INSERT \"'Hauts de France':31806\" INTO regions</code></li> <li> <code>regions = dict(['Hauts de France'] = 31806)</code></li> <li> <code>regions('Hauts de France') = 31806</code></li> <li> <code>regions['Hauts de France'] = 31806</code></li> </ul> </li> <li> <p>On d\u00e9finit :</p> \ud83d\udc0d Script Python<pre><code>contacts = {'Toto': 'toto@nsi.fr', 'Chlo\u00e9': 'chloe@nsi.com',\n            'Paul': 'paul@nsi.net', 'Cl\u00e9mence': 'clemence@nsi.org'}\n</code></pre> <p>Parmi les propositions suivantes, laquelle est exacte ?</p> <ul> <li> 'Chlo\u00e9' est une valeur de la variable contacts</li> <li> 'Chlo\u00e9' est une cl\u00e9 de la variable contacts</li> <li> 'Chlo\u00e9' est un attribut de la variable contacts</li> <li> 'Chlo\u00e9' est un champ de la variable contacts</li> </ul> </li> <li> <p>On consid\u00e8re le code suivant : </p> \ud83d\udc0d Script Python<pre><code>D = {'a': '1', '2': 'a', 'b': 'a', 'c': '3'}\n</code></pre> <p>Que vaut <code>D['a']</code> \u00e0 la fin de son ex\u00e9cution ?</p> <ul> <li> <code>'1'</code></li> <li> <code>2</code></li> <li> <code>['2', 'b']</code></li> <li> <code>['1', '3']</code></li> </ul> </li> </ol>"},{"location":"premiere/04_representation_2/exos_tabs/","title":"Exercices sur les tableaux","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-1","title":"Exercice 1","text":"<p>Donner les valeurs des tableaux T1, T2, T3, T4, T5, T6 suivants \u00e9crits en compr\u00e9hension :</p> \ud83d\udc0d Script Python<pre><code>T1 = [3 * i for i in range(10)]\nT2 = ['A' for i in range(7)]\nT3 = [randint(1, 6) for k in range(10)]\nT4 = [10 ** i for i in range(5)]\nT5 = [x * x for x in T4]\nListe = [-5, 2, 3, -7, 42, 7]\nT6 = [elt for elt in Liste if elt &gt; 0]\n</code></pre>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-2","title":"Exercice 2","text":"<p>Chercher la diff\u00e9rence entre les deux commandes python suivantes :</p> \ud83d\udc0d Script Python<pre><code>T1 = [[0] * 5 for i in range(3)]\nT2 = [[0] * 5] * 3\n</code></pre> <p>On pourra observer les r\u00e9sultats de l'affectation de <code>tableau[0][1]=7</code> pour les deux tableaux.</p>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-3","title":"Exercice 3","text":"<ol> <li>Cr\u00e9er un tableau en compr\u00e9hension contenant toutes les lettres majuscules de l'alphabet.</li> <li>Cr\u00e9er en compr\u00e9hension le tableau suivant : <code>[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]</code></li> <li>Cr\u00e9er en compr\u00e9hension en utilisant le tableau pr\u00e9c\u00e9dent : <code>[10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 2]</code></li> <li>Cr\u00e9er en compr\u00e9hension le tableau donnant les 6 premiers multiples de 16.</li> <li>Cr\u00e9er en compr\u00e9hension le tableau : [1, 0.5, 0.25, 0.125, ..., \\(2^{-6}\\)].</li> </ol>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-4","title":"Exercice 4","text":"<p>Le tableau suivant est le relev\u00e9 de notes d'un \u00e9l\u00e8ve par mati\u00e8res :</p> Math\u00e9matiques 16 18 14 17 20 Algorithmique 11 15 13 10 14 Programmation 12 8 13 7 16 <p>On le repr\u00e9sente par le tableau suivant :</p> \ud83d\udc0d Script Python<pre><code>Notes = [[16, 18, 14, 17, 20],\n         [11, 15, 13, 10, 14],\n         [12, 8, 13, 7, 16]]\n</code></pre> <p>Quelles valeurs vont \u00eatre affich\u00e9es en console ?</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; Notes[2][2]\n&gt;&gt;&gt; Notes[0][2]\n&gt;&gt;&gt; Notes[0]\n</code></pre>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-5","title":"Exercice 5","text":"<p>Quelles sont les valeurs contenues dans le tableau T \u00e0 la suite de cette s\u00e9rie d'instructions ?</p> \ud83d\udc0d Script Python<pre><code>T = [[9, 20, 13, 4],\n     [17, 15, 3, 7],\n     [8, 6, 10, 21]]\nT[2][1] = 22\nT[1][2] = 27\nT[0][3] = T[0][3] + 8\nT[1][3] = T[2][0] + 5\n</code></pre>"},{"location":"premiere/04_representation_2/exos_tabs/#exercice-6","title":"Exercice 6","text":"<p>La matrice suivant donne les notes d'un \u00e9l\u00e8ve dans diff\u00e9rentes mati\u00e8res. </p> \ud83d\udc0d Script Python<pre><code>NotesEleve = [[16, 7, 5, 8, 10],\n              [11, 3, 4, 12, 7],\n              [1, 9, 13, 2, 5]]\n</code></pre> <ol> <li>\u00c9crire une fonction qui remplace chaque note de la matrice inf\u00e9rieure \u00e0 10 par un 10.</li> <li>\u00c9crire une fonction <code>remplace(Tab)</code> qui prend en param\u00e8tre une matrice (tableau de tableaux) contenant des nombres et qui renvoie une matrice dans laquelle les nombres inf\u00e9rieurs \u00e0 10 sont remplac\u00e9s par 10 (il faudra cr\u00e9er dans la fonction une autre matrice qui sera renvoy\u00e9e car il est bien utile de conserver la premi\u00e8re en l'\u00e9tat !).</li> </ol>"},{"location":"premiere/04_representation_2/exos_tabs/#qcm","title":"QCM","text":"<ol> <li> <p>On d\u00e9finit : <code>L = [1, 2, 3, 4, 5, 6]</code>. Quelle est la valeur de <code>L[3]</code> ?</p> <ul> <li> <code>[1, 2, 3]</code></li> <li> <code>3</code></li> <li> <code>4</code></li> <li> <code>[4, 5, 6]</code></li> </ul> </li> <li> <p>On d\u00e9finit : <code>T = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></p> <p>Laquelle des expressions suivantes a pour valeur 7 ?</p> <ul> <li> <code>T[3, 1]</code></li> <li> <code>T[3][1]</code></li> <li> <code>T[2, 0]</code></li> <li> <code>T[2][0]</code></li> </ul> </li> <li> <p>Quelle est l'expression qui a pour valeur le tableau <code>[1, 4, 9, 16, 25, 36]</code> ?</p> <ul> <li> <code>[n*n  for n in range(0, 6)]</code></li> <li> <code>[n*n  for n in range(6)]</code></li> <li> <code>[n*n  for n in range(1, 7)]</code></li> <li> <code>[n*n  for n in range(1, 6)]</code></li> </ul> </li> <li> <p>Si la variable note est d\u00e9finie par  <code>note = [\"do\", \"r\u00e9\", \"mi\", \"fa\", \"sol\", \"la\", \"si\"]</code> alors :</p> <ul> <li> l'index de \"sol\" est 5</li> <li> l'index de note est 0</li> <li> l'index de \"si\" est 7</li> <li> l'index de \"mi\" est 2</li> </ul> </li> <li> <p>On d\u00e9finit une grille G remplie de 0, sous la forme d'un tableau de tableaux, o\u00f9 tous les sous-tableaux ont le m\u00eame nombre d'\u00e9l\u00e9ments.</p> \ud83d\udc0d Script Python<pre><code>G = [[0, 0, 0, ..., 0],\n    [0, 0, 0, ..., 0],\n    [0, 0, 0, ..., 0],\n    ...\n    [0, 0, 0, ..., 0]]\n</code></pre> <p>On appelle hauteur de la grille le nombre de sous-tableaux contenus dans G et largeur de la grille le nombre d'\u00e9l\u00e9ments dans chacune de ces sous-tableaux. Comment peut-on les obtenir ?</p> <ul> <li> <code>hauteur = len(G[0])</code> et <code>largeur = len(G)</code></li> <li> <code>hauteur = len(G)</code> et <code>largeur = len(G[0])</code></li> <li> <code>hauteur = len(G[0])</code> et <code>largeur = len(G[1])</code></li> <li> <code>hauteur = len(G[1])</code> et <code>largeur = len(G[0])</code></li> </ul> </li> <li> <p>Quelle est la valeur de l'expression <code>[2 * k + 1 for k in range(4)]</code> ?</p> <ul> <li> <code>[1, 3, 5, 7]</code></li> <li> <code>[0, 1, 2, 3]</code></li> <li> <code>[3, 5, 7, 9]</code></li> <li> <code>[1, 2, 3, 4]</code></li> </ul> </li> <li> <p>De quelle expression le tableau suivante est-il la valeur : <code>[[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2]]</code> ?</p> <ul> <li> <code>[[i] * 4 for i in range(4)]</code></li> <li> <code>[[i] * 3 for i in range(4)]</code></li> <li> <code>[[i] * 4 for i in range(3)]</code></li> <li> <code>[[i] * 3 for i in range(3)]</code></li> </ul> </li> <li> <p>Quelle est la valeur de l'expression : <code>[(a, b) for a in range(3) for b in range(3) if a &gt; b]</code> ?</p> <ul> <li> <code>[(a, b), (a, b), (a, b), (a, b), (a, b), (a, b), (a, b), (a, b), (a, b)]</code></li> <li> <code>[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</code></li> <li> <code>[(1, 0), (2, 0), (2, 1)]</code></li> <li> <code>[(0 ,0), (0 ,1), (0, 2), (1, 0), (1, 1), (1, 2), (1, 0), (1, 1), (1, 2)]</code></li> </ul> </li> </ol>"},{"location":"premiere/04_representation_2/exos_tuples/","title":"Exercices sur les p_uplets","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/04_representation_2/exos_tuples/#exercice-1","title":"Exercice 1","text":"<p>La notation fran\u00e7aise pour les dates est jj/mm/aa, alors que la notation anglaise est aa/mm/jj.</p> <p>Une date \u00e9tant compos\u00e9e de trois informations, elle peut \u00eatre repr\u00e9sent\u00e9e par un tuple, par exemple : <code>date = (21,11,18)</code> pour le 21 novembre 2018.</p> <ol> <li>Tester le programme ci-dessous et le corriger :</li> </ol> \ud83d\udc0d Script Python<pre><code>date = (24, 12, 20)\njour, mois = date\nif jour == 24 and mois == 12:\n    print(\"C'est No\u00ebl demain, les petits !\")\n</code></pre> <ol> <li> <p>\u00c9crire un programme qui \u00e0 partir du tuple <code>date = (21,11,18)</code> affiche la date selon les deux formats :</p> </li> <li> <p>Format fran\u00e7ais : 21/11/18</p> </li> <li>Format anglais : 18/11/21</li> </ol>"},{"location":"premiere/04_representation_2/exos_tuples/#exercice-2","title":"Exercice 2","text":"<p>Un point \\(A\\) de coordonn\u00e9es \\(A(2 ; 7)\\) peut \u00eatre repr\u00e9sent\u00e9 par un tuple :  <code>A = (2,7)</code>.</p> <p>L'abscisse et l'ordonn\u00e9e d'un point \\(A\\) sont en g\u00e9n\u00e9ral not\u00e9es \\(x_A\\) et \\(y_A\\).</p> <p>On consid\u00e8re la fonction :</p> \ud83d\udc0d Script Python<pre><code>def milieu(A, B):\n    xA, yA = A\n    xB, yB = B\n    xM = (xA + xB) / 2\n    yM = (yA + yB) / 2\n    return xM, yM\n</code></pre> <ol> <li> <p>Parmi les appels suivants, quel est celui qui correct ?</p> <p>a. <code>milieu((2, 3, 4, 9))</code> b. <code>milieu(2, 3, 4, 9)</code> c. <code>milieu((2, 3), (4, 9))</code> d. <code>milieu((2 ; 3), (4 ; 9))</code></p> </li> <li> <p>Quelle est la valeur retourn\u00e9e par l'appel suivant  : <code>milieu((2,3),(4,9))</code> ?</p> </li> <li> <p>On utilise cette fonction dans le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>C = (2, 3)\nD = (4, 9)\nxE = milieu(C, D)\nprint(\"Le milieu a pour abscisse :\", xE)\n</code></pre> <p>Corriger ce programme pour qu'il fonctionne.</p> </li> </ol>"},{"location":"premiere/04_representation_2/exos_tuples/#exercice-3","title":"Exercice 3","text":"<p>Cet exercice doit \u00eatre fait apr\u00e8s avoir \u00e9tudi\u00e9 le tableaux.</p> <p>Voici un tableau qui r\u00e9pertorie des informations sur les adh\u00e9rents d'un site internet :</p> Nom Sexe Avatar Age Ann\u00e9e d'adh\u00e9sion Mot de passe BERNARD F Bebert 19 2019 Bibi2019* BONNET M Bonbon 22 2017 45trd ;*%GR DUBET M Bud 17 2018 Bud17 DURAND M Rantanplan 15 2018 OuahOuah FOURNIER F Fifou 21 2016 12051995 MARTIN M Tinmar 23 2017 Titidu15 <p>On peut le repr\u00e9senter par un tableau de tuples (un tuple pour chaque adh\u00e9rent) :</p> \ud83d\udc0d Script Python<pre><code>ListeAdherents = [(\"BERNARD\", \"F\", \"Bebert\", 19, 2019, \"Bibi2019*\"), (\"BONNET\", \"M\", \"Bonbon\", 22, 2017, \"45trd ;*%GR\"),\n                  (\"DUBET\", \"M\", \"Bud\", 17, 2018, \"Bud17\"), (\"DURAND\", \"M\", \"Rantanplan\", 15, 2018, \"OuahOuah\"),\n                  (\"FOURNIER\", \"F\", \"Fifou\", 21, 2016, \"12051995\"), (\"MARTIN\", \"M\", \"Tinmar\", 23, 2017, \"Titidu15\")]\n</code></pre> <ol> <li> <p>Sans utiliser l'ordinateur, pr\u00e9voir ce qui est affich\u00e9 par les instructions suivantes :</p> <ul> <li><code>print(ListeAdherents[1])</code></li> <li><code>print(ListeAdherents[1,2])</code></li> <li><code>print(ListeAdherents[1][2])</code></li> <li><code>print(ListeAdherents[2][1])</code></li> <li><code>print(ListeAdherents[4][5])</code></li> </ul> </li> <li> <p>\u00c9crire une fonction qui prend en param\u00e8tre le dictionnaire <code>ListeAdherents</code>, qui affiche la liste des avatars de tous les adh\u00e9rents, et qui renvoie l'\u00e2ge moyen de tous les adh\u00e9rents (utiliser une boucle for).</p> </li> </ol>"},{"location":"premiere/04_representation_2/p_uplets/","title":"1. p-uplets","text":""},{"location":"premiere/04_representation_2/p_uplets/#1-introduction-les-sequences-en-python","title":"1 Introduction : Les s\u00e9quences en Python","text":"<p>Nous connaissons les types de donn\u00e9es simples en Python. Ce sont les type <code>int</code> (nombres entiers), <code>float</code> (nombres flottants), <code>bool</code> (bool\u00e9ens). Le type <code>str</code> est aussi utilis\u00e9. Il est un peu moins simple. Un objet de type <code>str</code> est une cha\u00eene de caract\u00e8res qui s'\u00e9crit entre des guillemets ou des apostrophes. Un caract\u00e8re est, pour simplifier, ce que l'on obtient par exemple avec les touches d'un clavier. Dans une cha\u00eene, chaque caract\u00e8re est rep\u00e9r\u00e9 par un indice qui commence \u00e0 0. Avec la cha\u00eene <code>ch =\"exemple\"</code>, <code>ch[0]</code> est le caract\u00e8re \"e\", <code>ch[1]</code> est le caract\u00e8re \"x\", et ainsi de suite.</p> <p>Ces types simples ne sont plus suffisants si nous avons besoin de garder en m\u00e9moire un grand nombre de valeurs comme dans le cas d'un traitement de donn\u00e9es statistiques. Il en est de m\u00eame si l'on souhaite regrouper des valeurs, par exemple afin d'avoir une variable repr\u00e9sentant les coordonn\u00e9es d'un point.</p> <p>L'objectif est donc de construire un type de variable capable de contenir plusieurs valeurs. Nous pouvons nous inspirer du type <code>str</code> et utiliser des indices pour rep\u00e9rer les \u00e9l\u00e9ments. Ceci am\u00e8ne \u00e0 la construction des p-uplets, type <code>tuple</code>, et des tableaux, type <code>list</code>. Comme pour le type <code>str</code>, un objet <code>t</code> de type <code>tuple</code> n'est pas modifiable par une affectation <code>t[i]=valeur</code>. Un objet de type <code>list</code> est lui modifiable par une affectation ce qui autorise de nombreuses m\u00e9thodes applicables \u00e0 ces objets mais en contrepartie une grande vigilance sur leur utilisation. Un troisi\u00e8me type est pr\u00e9sent\u00e9, le type <code>dict</code> pour les dictionnaires. La principale diff\u00e9rence avec les listes est qu'un dictionnaire n'est pas ordonn\u00e9. Un \u00e9l\u00e9ment n'est pas rep\u00e9r\u00e9 par un indice entier mais par une \"cl\u00e9\".</p>"},{"location":"premiere/04_representation_2/p_uplets/#2-les-p-uplets-en-python","title":"2. Les p-uplets en Python","text":"<p>D\u00e9finition</p> <p>Un objet de type tuple, un p-uplet, est une suite ordonn\u00e9e d'\u00e9l\u00e9ments qui peuvent \u00eatre chacun de n'importe quel type. On parlera indiff\u00e9remment de p-uplet ou de tuple.</p>"},{"location":"premiere/04_representation_2/p_uplets/#21-creation-dun-p-uplet","title":"2.1 Cr\u00e9ation d'un p-uplet","text":"<p>Pour cr\u00e9er un p-uplet non vide, on \u00e9crit n valeurs s\u00e9par\u00e9es par des virgules et plac\u00e9es entre des parenth\u00e8ses. Par exemple :</p> <ul> <li><code>t = (\"a\", \"b\", \"c\", 3)</code> pour un tuple \u00e0 4 \u00e9l\u00e9ments ;</li> <li><code>t = (\"a\", )</code>pour un tuple \u00e0 1 \u00e9l\u00e9ments (attention \u00e0 la virgule) ;</li> <li><code>t = ()</code> pour un tuple \u00e0 0 \u00e9l\u00e9ments (ici, pas de virgule, mais des parenth\u00e8ses).</li> </ul> <p>On peut aussi, quand il n'y a pas d'ambigu\u00eft\u00e9, ne pas \u00e9crire les parenth\u00e8ses : <code>t = 1, 2, 3, 4</code>. Mais les parenth\u00e8ses peuvent am\u00e9liorer la lisibilit\u00e9 et on les utilisera de pr\u00e9f\u00e9rence.</p> <p>On dit aussi qu'on empaquette les valeurs 1, 2, 3 et 4 dans le quadruplet <code>t</code>.</p>"},{"location":"premiere/04_representation_2/p_uplets/#22-operations","title":"2.2. Op\u00e9rations","text":"<p>Nous avons deux op\u00e9rateurs de concat\u00e9nation qui s'utilisent comme avec les cha\u00eenes de caract\u00e8res, ce sont les op\u00e9rateurs + et *.</p> <p>De nouveaux p-uplets sont cr\u00e9\u00e9s.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t1 = (\"a\", \"b\")\n&gt;&gt;&gt; t2 = (\"c\", \"d\")\n&gt;&gt;&gt; t1 + t2\n('a', 'b', 'c', 'd')\n&gt;&gt;&gt; 3 * t1\n('a', 'b', 'a', 'b', 'a', 'b')\n</code></pre>"},{"location":"premiere/04_representation_2/p_uplets/#23-appartenance","title":"2.3. Appartenance","text":"<p>Pour tester l'appartenance d'un \u00e9l\u00e9ment \u00e0 un tuple, on utilise l'op\u00e9rateur <code>in</code> :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = (\"a\", \"b\", \"c\")\n&gt;&gt;&gt; \"a\" in t\nTrue\n&gt;&gt;&gt; \"d\" in t\nFalse\n</code></pre>"},{"location":"premiere/04_representation_2/p_uplets/#24-utilisation-des-indices","title":"2.4. Utilisation des indices","text":"<p>Les indices permettent d'acc\u00e9der aux diff\u00e9rents \u00e9l\u00e9ments d'un tuple. Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment d'indice <code>i</code> d'un tuple <code>t</code>, la syntaxe est <code>t[i]</code>. L'indice <code>i</code> peut prendre les valeurs enti\u00e8res de 0 \u00e0 \\(n \u2212 1\\) o\u00f9 \\(n\\) est la longueur du tuple. Cette longueur s'obtient avec la fonction <code>len</code>. Exemple :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = (\"a\", 1, \"b\", 2, \"c\", 3)\n&gt;&gt;&gt; len(t)\n6\n&gt;&gt;&gt; t[2]\n'b'\n</code></pre> <p>Les indices commencent toujours \u00e0 0 et par exemple le troisi\u00e8me \u00e9l\u00e9ment a pour indice 2. Le dernier \u00e9l\u00e9ment d'un tuple <code>t</code> a pour indice <code>len(t)-1</code>. On acc\u00e8de ainsi au dernier \u00e9l\u00e9ment avec <code>t[len(t)-1]</code> qui peut s'abr\u00e9ger en <code>t[-1]</code>. Les indices n\u00e9gatifs permettent donc d'acc\u00e9der aux \u00e9l\u00e9ments du tuple \"en partant de la fin\".</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = (\"a\", 1, \"b\", 2, \"c\", 3)\n&gt;&gt;&gt; t[-1]\n3\n&gt;&gt;&gt; t[-2]\n'c'\n</code></pre> <p>Exemple avec des tuples embo\u00eet\u00e9s (un tuple contenant des tuples) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = ((\"a\", \"b\"), (\"c\", \"d\"))\n&gt;&gt;&gt; t[1][0]\n'c'\n</code></pre> <p>Explication : <code>t[1]</code> est le tuple <code>(\"c\", \"d\")</code> et <code>'c'</code> est l'\u00e9l\u00e9ment d'indice 0 de ce tuple.</p> <p>Rappelons ce qui a \u00e9t\u00e9 annonc\u00e9 plus haut : les \u00e9l\u00e9ments d'un tuple ne sont pas modifiables par une affectation de la forme <code>t[i]=valeur</code> qui provoque une erreur et arr\u00eate le programme.</p>"},{"location":"premiere/04_representation_2/p_uplets/#25-affectation-multiple","title":"2.5. Affectation multiple","text":"<p>Prenons pour exemple l'affectation <code>a, b, c = 1, 2, 3</code>. Ceci signifie que le tuple <code>(a, b, c)</code> prend pour valeur le tuple <code>(1, 2, 3)</code>, autrement dit, les valeurs respectives des variables <code>a</code>, <code>b</code> et <code>c</code> sont 1, 2 et 3.</p> <p>En particulier, l'instruction <code>a, b = b, a</code> permet d'\u00e9changer les valeurs des deux variables <code>a</code> et <code>b</code>.</p> <p>Les valeurs des \u00e9l\u00e9ments d'un tuple peuvent ainsi \u00eatre stock\u00e9es dans des variables.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = (1, 2, 3)\n&gt;&gt;&gt; a, b, c = t\n&gt;&gt;&gt; b\n2\n</code></pre> <p>Cette syntaxe s'utilise souvent avec une fonction qui renvoie un tuple.</p> <p>Voici un exemple avec une fonction qui calcule et renvoie les longueurs des trois c\u00f4t\u00e9s d'un triangle ABC. La fonction prend en param\u00e8tres trois p-uplets repr\u00e9sentant les coordonn\u00e9es des trois points. On importe au pr\u00e9alable la fonction racine carr\u00e9e <code>sqrt</code> du module <code>math</code>.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef longueurs(A, B, C):\n    xA, yA = A\n    xB, yB = B\n    xC, yC = C\n    dAB = sqrt((xB - xA) ** 2 + (yB - yA) ** 2)\n    dBC = sqrt((xC - xB) ** 2 + (yC - yB) ** 2)\n    dAC = sqrt((xC - xA) ** 2 + (yC - yA) ** 2)\n    return dAB, dBC, dAC\n</code></pre> <p>Dans cette fonction, les variables <code>A</code>, <code>B</code> et <code>C</code> sont des 2-uplets repr\u00e9sentant les coordonn\u00e9es des points A, B et C. Aux lignes 4, 5, 6, on d\u00e9paquette ces 2-uplets pour proc\u00e9der \u00e0 une affectation multiple.</p> <p>La fonction \u00e9tant d\u00e9finie, nous l'utilisons dans l'interpr\u00e9teur :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; M = (3.4, 7.8)\n&gt;&gt;&gt; N = (5, 1.6)\n&gt;&gt;&gt; P = (-3.8, 4.3)\n&gt;&gt;&gt; dMN, dNP, dMP = longueurs(M, N, P)\n&gt;&gt;&gt; dMN\n6.403124237432848\n</code></pre>"},{"location":"premiere/04_representation_2/p_uplets/#26-parcours-dun-tuple-avec-une-boucle-for","title":"2.6. Parcours d'un tuple avec une boucle for","text":"<p>Une boucle <code>for</code> permet de parcourir chacun des \u00e9l\u00e9ments d'un tuple, comme le montre la suite d'instruction suivante, entr\u00e9e dans la console Python :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = (1,2,3,4)\n&gt;&gt;&gt; for k in t: \n        print(k)\n1\n2\n3\n4\n</code></pre> <p>\u00c0 retenir</p> <ul> <li>Un p-uplet, ou tuple, est une structure ordonn\u00e9e qui permet de contenir plusieurs \u00e9l\u00e9ments qui sont tous accessibles.</li> <li>Un m\u00eame p-uplet peut contenir des \u00e9l\u00e9ments de types diff\u00e9rents. Un p-uplet peut contenir d'autres p-uplets.</li> <li>Un p-uplet est immuable, c'est-\u00e0-dire non modifiable : on ne peut pas proc\u00e9der \u00e0 une affectation de la forme <code>t[i]=valeur</code></li> </ul> <p>Remarque : en fran\u00e7ais, un objet non modifiable \u00e9l\u00e9ment par \u00e9l\u00e9ment apr\u00e8s sa cr\u00e9ation est dit immuable. En anglais, on dit immutable.</p> <p>Remarque : p-uplets nomm\u00e9s</p> <p>Dans le programme, il est fait mention de p-uplets nomm\u00e9s. Ce type de variable est semblable aux p-uplets, avec toutes leurs propri\u00e9t\u00e9s, mais les \u00e9l\u00e9ments ne sont pas index\u00e9s par un entier 0, 1, 2 ..., mais par un descripteur qui peut par exemple \u00eatre une cha\u00eene de caract\u00e8res :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; monsieurX = {\"nom\": \"X\", \"\u0301prenom\": \"Monsieur\", \"age\": 47}\n&gt;&gt;&gt; monsieurX[\"age\"]\n47\n</code></pre> <p>Le type p-uplet nomm\u00e9 n'existe pas en Python (ou alors il faut utiliser une biblioth\u00e8que suppl\u00e9mentaire). Nous utiliserons \u00e0 la place des dictionnaires (voir le cours sur les dictionnaires).</p>"},{"location":"premiere/04_representation_2/quiz/","title":"Quiz","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Ce documents regroupe des petites questions rapides pour s'assurer que tout est bien compris</p>"},{"location":"premiere/04_representation_2/quiz/#exercice-1","title":"Exercice 1","text":"<p>Cet exercice est une suite de petites \"questions flash\". Vous pouvez v\u00e9rifier vos r\u00e9ponses dans la console Python.</p> <ol> <li>Compl\u00e9tez le programme suivant afin que la variable <code>a</code> ait pour valeur 8 :</li> </ol> \ud83d\udc0d Script Python<pre><code>mon_tuple = (5, 8, 6, 9)\na = mon_tuple[...]\n</code></pre> <ol> <li>Compl\u00e9tez le programme ci-dessous pour qu'apr\u00e8s ex\u00e9cution de ce dernier, le tableau <code>mon_tab</code> soit compos\u00e9 des \u00e9l\u00e9ments suivants : <code>[15, 8, 6,  9]</code></li> </ol> \ud83d\udc0d Script Python<pre><code>mon_tab = [5, 8, 6, 9]\nmon_tab[...] = 15\n</code></pre> <ol> <li>Soit le tableau suivant :</li> </ol> <p>\ud83d\udc0d Script Python<pre><code>tab = [3,3,6,9]\n</code></pre> Quelle sera la composition de ce tableau si on ex\u00e9cute la ligne suivante :</p> \ud83d\udc0d Script Python<pre><code>tab.append(0)\n</code></pre> <ol> <li>Donnez  la composition du tableau <code>mon_tab</code>  apr\u00e8s l'ex\u00e9cution du programme  ci-dessous :</li> </ol> \ud83d\udc0d Script Python<pre><code>mon_tab = [1, 2, 3, 4]\ndel mon_tab[1]\n</code></pre> <ol> <li>Quelle  est la valeur de la variable <code>a</code>  apr\u00e8s  l'ex\u00e9cution du programme ci-dessus ?</li> </ol> \ud83d\udc0d Script Python<pre><code>mon_tab = [5, 8, 6, 9, 15,  0]\na = len(mon_tab)\n</code></pre> <ol> <li>Quelle est la valeur de la variable <code>s</code> apr\u00e8s  l'ex\u00e9cution du programme  ci-dessus. V\u00e9rifiez  votre r\u00e9ponse \u00e0 l'aide de la console.</li> </ol> \ud83d\udc0d Script Python<pre><code>tab = [1, 2, 3]\ns = 0\nfor t in tab:\n    s = s + t\n</code></pre> <ol> <li>Soit le programme suivant :</li> </ol> <p>\ud83d\udc0d Script Python<pre><code>m = [[1, 3, 4],\n     [5, 6, 8],\n     [2, 1, 3],\n     [7, 8, 15]]\na  = m[0][1]\n</code></pre> Quelle est la valeur de la variable <code>a</code> apr\u00e8s  l'ex\u00e9cution de ce programme ? V\u00e9rifiez  votre r\u00e9ponse \u00e0 l'aide de la console.</p>"},{"location":"premiere/04_representation_2/quiz/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>tab = [5, 3, 4, 8]\nmon_tab = [2*t for t in tab if t &gt; 4]\n</code></pre> <p>Quelle est la composition du tableau <code>mon_tab</code> apr\u00e8s  l'ex\u00e9cution du programme  ci-dessus. V\u00e9rifiez  votre r\u00e9ponse \u00e0 l'aide de la console.</p>"},{"location":"premiere/04_representation_2/quiz/#exercice-3","title":"Exercice 3","text":"\ud83d\udc0d Script Python<pre><code>m = [[1, 3],\n     [5, 8],\n     [2, 3]]\nnb_colonne = 2\nnb_ligne = 3\na = 0\nfor i in range(0, nb_ligne):\n    for j in range(0, nb_colonne):\n        a = a + m[i][j]\n</code></pre> <p>Quelle est la valeur de la variable <code>a</code> apr\u00e8s  l'ex\u00e9cution de ce programme ? V\u00e9rifiez  votre r\u00e9ponse \u00e0 l'aide de la console.</p>"},{"location":"premiere/04_representation_2/quiz/#exercice-4","title":"Exercice 4","text":"<p>Compl\u00e9ter la fonction ci-dessous pour qu'elle r\u00e9ponde \u00e0 sa sp\u00e9cification. Tester votre code.</p> <p>Par exemple, <code>recherche_max([4, 3, 0, 5])</code> renvoie 5.</p> \ud83d\udc0d Script Python<pre><code>def recherche_max(tab: list) -&gt; int:\n\"\"\"Retourne la plus grande valeur contenue dans le tableau\n    tab: tableau d'entiers naturels\"\"\"\n    maxi = ...\n    for t in tab :\n        if ... &gt; maxi :\n            maxi = ...\n    return ...\n</code></pre>"},{"location":"premiere/04_representation_2/quiz/#exercice-5","title":"Exercice 5","text":"<p>Compl\u00e9ter la fonction ci-dessous pour qu'elle r\u00e9ponde \u00e0 sa sp\u00e9cification. Tester votre code.</p> \ud83d\udc0d Script Python<pre><code>def somme(tab: list) -&gt; int:\n\"\"\"Retourne la somme des \u00e9l\u00e9ments du tableau\n    tab: tableau d'entiers\"\"\"\n    s = ...\n    for t in ... :\n        s = s + ...\n    return ...\n</code></pre> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; somme([3,5,8,4])\n20\n</code></pre>"},{"location":"premiere/04_representation_2/quiz/#exercice-6","title":"Exercice 6","text":"\ud83d\udc0d Script Python<pre><code>d = {\"voiture\": 25, \"v\u00e9lo\": 55, \"train\": 20}\ntr = d['v\u00e9lo']\n</code></pre> <p>Quelle est la valeur de la variable <code>tr</code>apr\u00e8s l'ex\u00e9cution du programme ci-dessus. V\u00e9rifiez votre r\u00e9ponse \u00e0 l'aide de la console.</p>"},{"location":"premiere/04_representation_2/quiz/#exercice-7","title":"Exercice 7","text":"<ol> <li> <p>Quelle est la valeur de la variable <code>tab</code> apr\u00e8s l'ex\u00e9cution de ce programme ?</p> \ud83d\udc0d Script Python<pre><code>tab = []\nd = {\"voiture\": 25, \"v\u00e9lo\": 55, \"train\": 20}\nfor t in d.values():\n    if t &lt; 40 :\n        tab.append(t)\n</code></pre> </li> <li> <p>Quelle est la valeur de la variable <code>tab</code> apr\u00e8s l'ex\u00e9cution de ce programme ?</p> \ud83d\udc0d Script Python<pre><code>tab = []\nd = {\"voiture\": 25, \"v\u00e9lo\": 55, \"train\": 20}\nfor v,t in d.items():\n    if t &lt; 40 :\n        tab.append(v)\n</code></pre> </li> </ol>"},{"location":"premiere/04_representation_2/quiz/#exercice-8","title":"Exercice 8","text":"<p>On utilise un tableau contenant des dictionnaires afin de stocker les notes des \u00e9l\u00e8ves Titi, Toto et Tutu :</p> \ud83d\udc0d Script Python<pre><code>[{'nom':'Titi', 'note':12}, {'nom':'Tutu', 'note':11}, {'nom':'Toto', 'note':17}]\n</code></pre> <p>La fonction <code>moyenne</code> prend en param\u00e8tre un tableau contenant des dictionnaires (comme celui ci-dessus) et renvoie la moyenne des notes.</p> <p>\u00c9crivez la fonction <code>moyenne</code>.</p>"},{"location":"premiere/04_representation_2/tableaux/","title":"2. Tableaux","text":"<p>Tableaux et listes</p> <p>Dans ce cours, conform\u00e9ment au programme, nous allons employer le terme \"tableau\". Ce termer d\u00e9signe une structure de donn\u00e9es abstraite en informatique. Dans le langage Python, on utilise des objets du type <code>list</code> pour cette structure. Cependant, les objets de type <code>list</code> en Python sont bien plus que des tableaux au sens du cours. Pour \u00e9viter toute confusion, notamment par rapport \u00e0 d'autres structures de donn\u00e9es qui seront abord\u00e9es en terminale, nous nous efforcerons d'employer \"tableau\" \u00e0 la place de \"liste\".</p> <p>D\u00e9finition</p> <p>Un tableau est une suite ordonn\u00e9e d'\u00e9l\u00e9ments qui sont tous du m\u00eame type.</p>"},{"location":"premiere/04_representation_2/tableaux/#1-creation-dun-tableau","title":"1. Cr\u00e9ation d'un tableau","text":"<p>Pour cr\u00e9er un tableau en Python, nous utilisons un objet de type <code>list</code>. Un tel objet ressemble \u00e0 un p-uplet : un ensemble ordonn\u00e9 d'\u00e9l\u00e9ments avec des indices pour les rep\u00e9rer. Les \u00e9l\u00e9ments d'un tableau sont s\u00e9par\u00e9s par des virgules et entour\u00e9s de crochets.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab1 = [\"a\", \"b\", \"c\"] # un tableau \u00e0 3 \u00e9l\u00e9ments\n&gt;&gt;&gt; tab2 = [1] # un tableau contenant un seul \u00e9l\u00e9ment\n&gt;&gt;&gt; tab3 = [[1, 2], [3, 4]] # un tableau de tableaux\n&gt;&gt;&gt; tab_vide = [] # un tableau vide\n</code></pre> <p>Pour cr\u00e9er rapidement un tableau d'entiers, nous pouvons utiliser les fonctions <code>list</code> et <code>range</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = list(range(2, 10, 3)) # [2, 5, 8]\n</code></pre> <p>Pour ajouter les \u00e9l\u00e9ments un par un en fin de tableau, nous pouvons utiliser la m\u00e9thode <code>append</code> :</p> \ud83d\udc0d Script Python<pre><code>multiples_de_3 = [0, 3]\nmultiples_de_3.append(6) # [0, 3, 6]\n</code></pre>"},{"location":"premiere/04_representation_2/tableaux/#2-construction-par-comprehension","title":"2. Construction par compr\u00e9hension","text":"<p>Il est aussi possible de cr\u00e9er un tableau par compr\u00e9hension. Il s'agit de d\u00e9crire les \u00e9l\u00e9ments du tableaux par une boucle, des conditions, ...</p> <p>L'instruction de base s'\u00e9crit sous la forme <code>[expression(i) for i in objet]</code>. Ce type de construction est tr\u00e8s sp\u00e9cifique au langage Python. En voici deux exemples :</p> \ud83d\udc0d Script Python<pre><code>multiples_de_3 = [3 * i for i in range(100)]\nmultiples_de_6 = [2 * n for n in multiples_de_3]\n</code></pre> <p>Si on dispose d'une fonction <code>f</code> et d'un tableau d'abscisses <code>x</code> :</p> \ud83d\udc0d Script Python<pre><code>images = [f(x) for x in abscisses]\n</code></pre> <p>On peut aussi ajouter des conditions. Par exemple l'instruction ci-dessous est une autre fa\u00e7on de d\u00e9finir le tableau des multiples de 3 :</p> \ud83d\udc0d Script Python<pre><code>multiples_de_3 = [n for n in range(301) if n % 3 == 0]\n</code></pre>"},{"location":"premiere/04_representation_2/tableaux/#3-utilisation-des-tableaux","title":"3. Utilisation des tableaux","text":"<p>La fonction <code>len</code> renvoie la longueur d'un tableau, le nombre d'\u00e9l\u00e9ments du tableau.</p> <p>On acc\u00e8de aux diff\u00e9rents \u00e9l\u00e9ments d'un tableau avec les indices comme pour les p-uplets. Dans le cas d'un tableau de tableaux, on utilise des doubles crochets : <code>tab[1][0]</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = [\"a\", \"b\", \"c\"]\n&gt;&gt;&gt; tab[1]\n'b'\n&gt;&gt;&gt; tab = [[\"a\", \"b\"], [\"c\", \"d\"]]\n&gt;&gt;&gt; tab[1][0]\n'c'\n</code></pre> <p>\u00c0 la diff\u00e9rence des tuples, un tableau est un objet modifiable (on dit mutable en anglais). On peut donc r\u00e9affecter un \u00e9l\u00e9ment d'un tableau d\u00e9j\u00e0 cr\u00e9\u00e9.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = [1, 2, 3, 4]\n&gt;&gt;&gt; tab[0] = 17\n&gt;&gt;&gt; tab\n[17, 2, 3, 4]\n</code></pre>"},{"location":"premiere/04_representation_2/tableaux/#4-operations-sur-les-tableaux","title":"4. Op\u00e9rations sur les tableaux","text":"<p>Le type d'une variable d\u00e9finit les valeurs qui peuvent \u00eatre affect\u00e9es \u00e0 cette variable ainsi que les op\u00e9rateurs et les fonctions utilisables. Les fonctions propres \u00e0 un type donn\u00e9 sont appel\u00e9es des m\u00e9thodes. La fonction <code>len</code> par exemple, s'applique aux cha\u00eenes de caract\u00e8res, aux p-uplets, aux tableaux. La m\u00e9thode <code>append</code>, pr\u00e9sent\u00e9e plus haut, est par contre propre aux tableaux.</p> <p>Attention \u00e0 la syntaxe : on \u00e9crit <code>len(tab)</code>, mais <code>tab.append(...)</code>. Le nom de la variable est suivi d'un point puis du nom de la m\u00e9thode. Cette notation est issue de la programmation orient\u00e9e objets qui sera abord\u00e9e en terminale.</p> <p>Voici quelques m\u00e9thodes pour le tableaux :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = [\"a\", \"b\", \"c\"]\n&gt;&gt;&gt; tab.insert(1, \"d\") # insertion \u00e0 l'indice 1 de l'\u00e9l\u00e9ment \"d\"\n&gt;&gt;&gt; tab\n['a', 'd', 'b', 'c']\n&gt;&gt;&gt; tab.remove(\"b\") # suppression de la premi\u00e8re occurrence de l'\u00e9l\u00e9ment \"b\"\n&gt;&gt;&gt; tab\n['a', 'd', 'c']\n&gt;&gt;&gt; x = tab.pop() # supprime et retourne le dernier \u00e9l\u00e9ment\n&gt;&gt;&gt; x\n'c'\n&gt;&gt;&gt; tab\n['a', 'd']\n&gt;&gt;&gt; tab.reverse() # renverse l'ordre des \u00e9l\u00e9ments\n&gt;&gt;&gt; tab\n['d', 'a']\n&gt;&gt;&gt; tab.sort() # trie les \u00e9l\u00e9ments dans l'ordre croissant ou alphab\u00e9tique\n&gt;&gt;&gt; tab\n['a', 'd']\n</code></pre> <p>Toutes ces m\u00e9thodes modifient la liste initiale contrairement aux op\u00e9rateurs de concat\u00e9nation + et * avec lesquels une nouvelle liste est cr\u00e9\u00e9e. Ces deux op\u00e9rateurs s'utilisent comme avec les p-uplets.</p> <p>Notons qu'il est aussi possible de trier une liste sans la modifier avec la fonction sorted qui cr\u00e9e une nouvelle liste.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = [5, 2, 7, 4]\n&gt;&gt;&gt; tri = sorted(tab)\n&gt;&gt;&gt; tab\n[5, 2, 7, 4]\n&gt;&gt;&gt; tri\n[2, 4, 5, 7]\n</code></pre>"},{"location":"premiere/04_representation_2/tableaux/#5-copie-dun-tableau","title":"5. Copie d'un tableau","text":"<p>Un tableau peut donc \u00eatre modifi\u00e9 par une m\u00e9thode. On peut aussi modifier l'un de ses \u00e9l\u00e9ments par affectation.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab = [\"a\", \"b\", \"c\"]\n&gt;&gt;&gt; tab[1] = \"d\"\n&gt;&gt;&gt; tab\n[\"a\", \"d\", \"c\"]\n</code></pre> <p>Ceci oblige \u00e0 une grande attention en particulier dans la cr\u00e9ation de copie de tableau. Observons le code suivant :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab1 = [\"a\", \"b\", \"c\"]\n&gt;&gt;&gt; tab2 = tab1\n&gt;&gt;&gt; tab1[1] = \"d\"\n&gt;&gt;&gt; tab2\n[\"a\", \"d\", \"c\"]\n</code></pre> <p>Dans cet exemple, un m\u00eame tableau a deux noms et <code>tab2</code> n'est pas une copie de <code>tab1</code> : il s'agit juste d'une nouvelle \u00e9tiquette qui pointe vers le m\u00eame contenu de la m\u00e9moire.</p> <p>Pour obtenir une vraie copie, il faut cr\u00e9er un nouveau tableau.</p> <p>Pour effectuer une vraie copie d'une liste simple, on peut entrer : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; tab2 = list(tab1)\n</code></pre> <p>Pour des tableaux de tableaux, cependant, cette copie simple ne suffira pas car les \u00e9l\u00e9ments du tableau, qui sont eux-m\u00eames des tableaux, ne seront pas vraiment copi\u00e9s. Pour y parvenir, si n\u00e9cessaire, on utilise la fonction <code>deepcopy</code> de la biblioth\u00e8que <code>copy</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; from copy import deepcopy\n&gt;&gt;&gt; tab1 = [[\"a\", \"b\"], [\"c\", \"d\"]]\n&gt;&gt;&gt; tab2 = deepcopy(liste1)\n&gt;&gt;&gt; tab2[1][0] = \"e\"\n&gt;&gt;&gt; tab2\n[[\"a\", \"b\"], [\"e\", \"d\"]]\n&gt;&gt;&gt; tab1\n[[\"a\", \"b\"], [\"c\", \"d\"]\n</code></pre>"},{"location":"premiere/04_representation_2/tableaux/#6-parcours-dun-tableau-avec-une-boucle-for","title":"6. Parcours d'un tableau avec une boucle for","text":"<p>Une boucle <code>for</code> permet de parcourir chacun des \u00e9l\u00e9ments d'un tableau. On peut soit boucler sur les indices des \u00e9l\u00e9ments du tableau, soit sur les \u00e9l\u00e9ments eux-m\u00eames.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; t = [1,2,3,4]\n&gt;&gt;&gt; for k in t:  # boucle sur les \u00e9l\u00e9ments\n        print(k)\n1\n2\n3\n4\n&gt;&gt;&gt; for i in range(len(t)): # boucle sur les indices\n        print(t[i])\n1\n2\n3\n4\n</code></pre> <p>\u00c0 retenir</p> <ul> <li>Un tableau une structure ordonn\u00e9e qui permet de contenir plusieurs \u00e9l\u00e9ments qui sont tous accessibles.</li> <li>Tous les \u00e9l\u00e9ments d'un tableau sont du m\u00eame type. Un tableau peut contenir d'autres tableaux.</li> <li>Un tableau est modifiable : on peut proc\u00e9der \u00e0 une affectation de la forme <code>t[i]=valeur</code></li> </ul>"},{"location":"premiere/04_representation_2/tableaux/#7-remarques-sur-les-tableaux-de-tableaux","title":"7. Remarques sur les tableaux de tableaux","text":"<p>Voici un exemple de tableau de tableaux :</p> \ud83d\udc0d Script Python<pre><code>m = [[1, 3, 4], [5 ,6 ,8], [2, 1, 3], [7, 8, 15]]\n</code></pre> <p>Le premier \u00e9l\u00e9ment du tableau ci-dessus est bien un tableau (<code>[1, 3, 4]</code>), le deuxi\u00e8me \u00e9l\u00e9ment est aussi un tableau (<code>[5, 6, 8]</code>)...</p> <p>Il est souvent plus pratique de pr\u00e9senter ces \"tableaux de tableaux\" comme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>m = [[1, 3, 4],\n     [5, 6, 8],\n     [2, 1, 3],\n     [7, 8, 15]]\n</code></pre> <p>Nous obtenons ainsi quelque chose qui ressemble beaucoup \u00e0 un \"objet math\u00e9matique\" tr\u00e8s utilis\u00e9 : une matrice, tableau de nombres compos\u00e9 de lignes et de colonnes.</p> <p>L'instruction <code>m[1]</code> retourne le deuxi\u00e8me \u00e9l\u00e9ment du tableau <code>m</code>, c'est-\u00e0-dire le tableau <code>[5, 6, 8]</code>.</p> <p>Pour acc\u00e9der au troisi\u00e8me \u00e9l\u00e9ment de ce dernier tableau, il faut donc entrer l'instruction <code>m[1][2]</code> qui va renvoyer 8.</p> <p>On acc\u00e8de donc aux \u00e9l\u00e9ments du tableau de nombres en indexant <code>m</code> avec le num\u00e9ro de la ligne puis le num\u00e9ro de la colonne (compt\u00e9s \u00e0 partir de z\u00e9ro).</p> <p>Il est possible de parcourir l'ensemble des \u00e9l\u00e9ments d'une matrice \u00e0 l'aide d'une \"double boucle for\" :</p> <p>\ud83d\udc0d Script Python<pre><code>m = [[1, 3, 4],\n     [5, 6, 8],\n     [2, 1, 3],\n     [7, 8, 15]]\nnb_colonne = 3\nnb_ligne = 4\nfor i in range(0, nb_ligne):\n    for j in range(0, nb_colonne):\n        a = m[i][j]\n        print(a)\n</code></pre> L'ex\u00e9cution de ce programme donnera le r\u00e9sultat suivant :</p> <p>Sortie<pre><code>1\n3\n4\n5\n6\n8\n2\n1\n3\n7\n8\n15\n</code></pre> Nous avons bien parcouru l'ensemble des \u00e9l\u00e9ments du tableau <code>m</code>.</p> <p>Cette double boucle <code>for</code> est une structure complexe, mais pourtant assez r\u00e9pandue. N'h\u00e9sitez pas \u00e0 consacrer quelques minutes \u00e0 son analyse.</p> <p>Ce type de tableau \u00e0 deux dimensions est utilis\u00e9 pour coder les images sous forme d'images matricielles. Les curieux peuvent en apprendre plus \u00e0 ce sujet en \u00e9tudiant la vid\u00e9o suivante propos\u00e9e sur Lumni (dans laquelle le narrateur dit \"liste\" au lieu de \"tableau\").</p>"},{"location":"premiere/06_web/","title":"06-Interactions Homme-Machine sur le web","text":""},{"location":"premiere/06_web/#1-le-programme","title":"1. Le programme","text":"<p>Lors de la navigation sur le Web, les internautes interagissent avec leur machine par le biais des pages Web.</p> <p>L'Interface Homme-Machine (IHM) repose sur la gestion d'\u00e9v\u00e9nements associ\u00e9s \u00e0 des \u00e9l\u00e9ments graphiques munis de m\u00e9thodes algorithmiques.</p> <p>La compr\u00e9hension du dialogue client-serveur d\u00e9j\u00e0 abord\u00e9 en classe de seconde est consolid\u00e9e, sur des exemples simples, en identifiant les requ\u00eates du client, les calculs puis les r\u00e9ponses du serveur trait\u00e9es par le client.</p> <p>Il ne s'agit pas de d\u00e9crire exhaustivement les diff\u00e9rents \u00e9l\u00e9ments disponibles, ni de d\u00e9velopper une expertise dans les langages qui permettent de mettre en \u0153uvre le dialogue tels que PHP ou JavaScript.</p> Contenus Capacit\u00e9s attendues Commentaires Modalit\u00e9s de l'interaction entre l'homme et la machine \u00c9v\u00e9nements Identifier les diff\u00e9rents composants graphiques permettant d'interagir avec une application Web. Identifier les \u00e9v\u00e9nements que les fonctions associ\u00e9es aux diff\u00e9rents composants graphiques sont capables de traiter. Il s'agit d'examiner le code HTML d'une page comprenant des composants graphiques et de distinguer ce qui rel\u00e8ve de la description des composants graphiques en HTML de leur comportement (r\u00e9action aux \u00e9v\u00e9nements) programm\u00e9 par exemple en JavaScript. Interaction avec l'utilisateur dans une page Web Analyser et modifier les m\u00e9thodes ex\u00e9cut\u00e9es lors d'un clic sur un bouton d'une page Web. Interaction client-serveur. Requ\u00eates HTTP, r\u00e9ponses du serveur Distinguer ce qui est ex\u00e9cut\u00e9 sur le client ou sur le serveur et dans quel ordre. Distinguer ce qui est m\u00e9moris\u00e9 dans le client et retransmis au serveur. Reconna\u00eetre quand et pourquoi la transmission est chiffr\u00e9e. Il s'agit de faire le lien avec ce qui a \u00e9t\u00e9 vu en classe de seconde et d'expliquer comment on peut passer des param\u00e8tres \u00e0 un site gr\u00e2ce au protocole HTTP. Formulaire d'une page Web Analyser le fonctionnement d'un formulaire simple. Distinguer les transmissions de param\u00e8tres par les requ\u00eates POST ou GET. Discuter les deux types de requ\u00eates selon le type des valeurs \u00e0 transmettre et/ou leur confidentialit\u00e9."},{"location":"premiere/06_web/#2-plan-de-travail","title":"2. Plan de travail","text":"<pre><code>graph TB\n    racine[S\u00e9quence 5 : Interactions homme machine sur le Web] --&gt; A[Activit\u00e9 1 : Page web et langage HTML] \n    A --&gt; B[HTML : Explications et compl\u00e9ments]\n    B --&gt; C[R\u00e9f\u00e9rence des principales balises HTML]\n    racine --&gt; D[Activit\u00e9 2 : Le couple HTML/CSS]\n    D --&gt; E[CSS : Explications et compl\u00e9ments]\n    racine --&gt; F[Activit\u00e9 3 : Page Web interactive avec Javascript]\n    F --&gt; G[Javascript : Explications et compl\u00e9ments]\n    racine --&gt; H[HTTP : Explications et compl\u00e9ments]\n    H --&gt; I[Travaux pratiques : HTTP]\n    racine --&gt; J[Activit\u00e9 3 : Formulaires Web]\n    J --&gt; K[Formulaires : Explications et compl\u00e9ments]\n    click A \"http://127.0.0.1:5000/premiere/06_web/acti1_HTML/\"</code></pre>"},{"location":"premiere/06_web/Exos_HTTP/","title":"Exercices : le protocole HTTP","text":""},{"location":"premiere/06_web/Exos_HTTP/#exercice-1-utilisation-des-outils-de-developpement-du-navigateur","title":"Exercice 1 : Utilisation des outils de d\u00e9veloppement du navigateur","text":"<p>Avec un navigateur Web, demander la page  d'adresse https://nsi.flallemand.fr/divers/mapageweb.html. Ouvrir la fen\u00eatre d'outils de d\u00e9veloppement en appuyant sur la touche de fonction <code>F12</code> et s\u00e9lectionner l'onglet R\u00e9seau. On peut voir les ent\u00eates de la requ\u00eate et de la r\u00e9ponse HTTP. On s'int\u00e9resse ici \u00e0 la requ\u00eate concernant la page HTML elle-m\u00eame.</p> <ol> <li>La requ\u00eate a-t-elle abouti ? Justifier.</li> <li>La communication est-elle s\u00e9curis\u00e9e ?</li> <li>Quelles informations sur le client sont transmises au serveur dans l'ent\u00eate de la requ\u00eate ?</li> <li>Quelles informations sur le serveur sont transmises au client dans l'ent\u00eate de la r\u00e9ponse ?</li> <li>Effectuer une nouvelle requ\u00eate avec l'URL https://nsi.flallemand.fr/Divers/mapageweb.html. Quel est le code d'\u00e9tat de la r\u00e9ponse ? Explication ?</li> <li>Effectuer une nouvelle requ\u00eate avec l'URL https://nsi.flallemand.fr/divers/interdit/. Quel est le code d'\u00e9tat de la r\u00e9ponse ? Explication ?</li> </ol>"},{"location":"premiere/06_web/Exos_HTTP/#exercice-2-http-et-python","title":"Exercice 2 : HTTP et python","text":"<p>Le module python <code>requests</code></p> <p>Il est possible d'utiliser Python pour \u00e9tablir une connexion avec un serveur web. On peut pour cela utiliser le module <code>requests</code> (requ\u00eates en anglais). On travaille ci-dessous dans la console Python.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; reponse = requests.get(\"http://www.delafond.org/survielinux/\") # envoi d'un requ\u00eate GET\n&gt;&gt;&gt; reponse  # la connexion est \u00e9tablie correctement (200 signifie OK)\n&lt;Response [200]&gt;\n&gt;&gt;&gt; reponse.request.headers # ent\u00eate de la requ\u00eate\n{'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive'}\n&gt;&gt;&gt; reponse.headers # l'ent\u00eate de la r\u00e9ponse du serveur\n{'Date': 'Thu, 03 Nov 2022 21:31:47 GMT', 'Content-Type': 'text/html', 'Transfer-Encoding': 'chunked',\n 'Connection': 'keep-alive', 'Last-Modified': 'Sun, 28 Mar 2010 21:22:16 GMT', 'ETag': '\"681c5-482e2fd9d3200-gzip\"',\n 'Accept-Ranges': 'bytes', 'Vary': 'Accept-Encoding', 'Content-Encoding': 'gzip', 'server': 'nginx'}\n&gt;&gt;&gt; reponse.content\nb'&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n  \n&lt;meta http-equiv=\"CONTENT-TYPE\" content=\"text/html; charset=UTF-8\"&gt;\\n  \n&lt;title&gt;Guide de Survie du D\\xc3\\xa9butant sous Linux&lt;/title&gt;\\n  &lt;meta name=\"CREATED\" content=\"19981217;15162800\"&gt;\\n  \n&lt;meta name=\"CHANGEDBY\" content=\"G\\xc3\\xa9rard Delafond\"&gt;\\n  &lt;meta name=\"CHANGED\" content=\"20050528;7341900\"&gt;\\n  \n&lt;style&gt;\\n  &lt;!--\\n@page { size: 21cm 29.7cm }\\n--&gt;\\n\\n  &lt;/style&gt;\\n&lt;/head&gt;\\n\\n&lt;body lang=\"fr-FR\" \nbackground=\"pics/backdrop.png\" dir=\"ltr\"&gt;\\n&lt;p&gt;&lt;br&gt;\\n&lt;br&gt;\\n&lt;/p&gt;\\n\\n&lt;h1&gt;&lt;img src=\"pics/Survie330.jpg\" name=\"Image1\" \nalt=\"Logo_survie\"\\nalign=\"left\" width=\"799\" height=\"280\" border=\"0\"&gt;&lt;br clear=\"left\"&gt;\\nGuide de survie sous Linux:&lt;/h1&gt;\n... # r\u00e9ponse tronqu\u00e9e ...\n</code></pre> <p>On peut voir que la connexion est bien \u00e9tablie (code 200) entre le client (Python lui m\u00eame : User-Agent python) et le serveur (nomm\u00e9 ici nginx) qui h\u00e9berge le site.</p> <p>Le contenu est en html, comme on s'y attend</p> <p>La page a \u00e9t\u00e9 modifi\u00e9e pour la derni\u00e8re fois en mars 2010.</p> <p>Et tout un tas d'information moins pertinentes.</p> <p>Le contenu de la r\u00e9ponse est le code HTML lui-m\u00eame.</p> <ol> <li>Reproduire les commandes pr\u00e9sent\u00e9es ci-dessus pour joindre successivement : https://google.com et https://google.com/azeaze.</li> <li>Comparer les codes r\u00e9ponses obtenus dans les deux cas. Que signifient-ils ? Que peut-on en d\u00e9duire concernant la page https://google.com/azeaze ?</li> <li>Mesurez la longueur du contenu de la r\u00e9ponse dans les deux cas. Comment expliquer cette diff\u00e9rence ?</li> </ol>"},{"location":"premiere/06_web/TP_forms/","title":"T.P. Formulaires","text":"<p>Ce T. P. est constitu\u00e9 de deux exercices \u00e0 r\u00e9aliser dans Replit.</p> <p>\u00c0 chaque fois, le code JavaScript doit \u00eatre compl\u00e9t\u00e9 afin que la page web interactive se comporte comme attendu.</p> <p>Pour un bon rendu de la page web, il faut l'ouvrir dans un autre onglet du navigateur.</p> <p>Exercice 1 : Couleurs - https://replit.com/team/premiere-nsi/TP-Couleurs</p> <p>Exercice 2 : Temp\u00e9ratures - https://replit.com/team/premiere-nsi/TP-Temperature</p>"},{"location":"premiere/06_web/acti1_HTML/","title":"Activit\u00e9 1 : Page web et langage HTML","text":"<p>Objectifs de cette activit\u00e9</p> <p>\u00c0 l'issue de cette activit\u00e9, vous saurez :</p> <ul> <li>comment est cod\u00e9e une page web simple ;</li> <li>reconna\u00eetre les principales balises HTML ;</li> <li>cr\u00e9er une page HTML simple.</li> </ul> <p>Pour cette activit\u00e9, on utilisera de pr\u00e9f\u00e9rence le navigateur Firefox.</p> <p>Info</p> <p>HTML signifie Hypertext Markup Language. Il s'agit du langage informatique utilis\u00e9 pour coder les pages Web. Ce n'est pas un langage de programmation, mais un langage de description.</p>"},{"location":"premiere/06_web/acti1_HTML/#partie-1-observation-dune-page-html-simple","title":"Partie 1. Observation d'une page HTML simple","text":"<ol> <li>Ouvrir dans un nouvel onglet la page suivante : Tim_Berners.html. La page qui s'affiche est une page HTML contenant des informations textuelles avec une mise en forme (titres, paragraphes, liste \u00e0 puce, liste num\u00e9rot\u00e9e, caract\u00e8res gras, italiques, ...), une image et un extrait de vid\u00e9o.</li> <li> <p>Faire un clic droit dans la page et cliquer sur \"Code source de la page\" pour faire appara\u00eetre la page HTML source. Le fichier qui s'ouvre est un fichier texte. Il contient le descriptif de la page Web en langage HTML : c'est sous cette forme que le navigateur re\u00e7oit la page Web. Il interpr\u00e8te ensuite le langage HTML pour produire l'affichage obtenu \u00e0 la question pr\u00e9c\u00e9dente.</p> <p>\u00c0 savoir</p> <p>Lorsque vous chargez la page web, celle-ci se trouve physiquement enregistr\u00e9e sous forme de fichier HTML sur un serveur distant (un serveur est un ordinateur destin\u00e9 \u00e0 interagir avec d'autres ordinateurs, le plus souvent dans le contexte d'un r\u00e9seau).</p> <p>Cette page, une fois re\u00e7ue par votre navigateur dans l'ordinateur local, appel\u00e9 client, est lue par le navigateur qui interpr\u00e8te le langage HTML et produit l'affichage correspondant.</p> <p></p> <p>Il s'agit d'un premier exemple de dialogue client-serveur, cette notion sera approfondie dans la suite.</p> </li> <li> <p>Observer le code HTML. Il est compos\u00e9 de balises, la plupart de la forme <code>&lt;balise&gt;...&lt;/balise&gt;</code>. Identifier les balises qui d\u00e9finissent :</p> <ul> <li>un titre ;</li> <li>un paragraphe ;</li> <li>du texte en gras (pour montrer l'importance d'un mot ou d'un groupe de mots) ;</li> <li>du texte en italique (pour insister sur un mot ou un groupe de mots) ;</li> <li>une liste \u00e0 puces ;</li> <li>une liste num\u00e9rot\u00e9e.</li> </ul> </li> <li> <p>Quelles balises permettent :</p> <ul> <li>d'ins\u00e9rer une image ;</li> <li>d'ins\u00e9rer une vid\u00e9o.</li> </ul> </li> <li> <p>Quel semble \u00eatre le r\u00f4le des balises <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> et <code>&lt;body&gt;</code> ? </p> </li> <li>Certaines balises ne semblent servir \u00e0 rien ! Lesquelles ? Nous verrons plus tard leur utilit\u00e9 \u00e9ventuelle.</li> </ol>"},{"location":"premiere/06_web/acti1_HTML/#partie-2-modification-dune-page-html-simple","title":"Partie 2. Modification d'une page HTML simple","text":"<ol> <li>Ouvrir l'activit\u00e9 Replit correspondant \u00e0 cette partie : cliquez ici !.</li> <li> <p>Vous retrouvez le code HTML de la page Web pr\u00e9c\u00e9dente ainsi que son rendu dans le navigateur int\u00e9gr\u00e9 \u00e0 Replit. Modifier la page Web afin qu'elle remplisse les sp\u00e9cifications suivantes :</p> <ul> <li>Ajouter une deuxi\u00e8me photo diff\u00e9rente de Timothy John Berners-Lee.</li> <li>Ajouter un court paragraphe qui r\u00e9sume la biographie de Timothy John Berners-Lee. Ce paragraphe sera pr\u00e9c\u00e9d\u00e9 d'un titre de niveau 2. Il contiendra certains mots sur lesquels vous voulez insister et d'autres dont vous montrerez l'importance.</li> <li>Transformer la liste \u00e0 puce en liste num\u00e9rot\u00e9e et vice-versa.</li> <li>Supprimer la vid\u00e9o.</li> </ul> </li> <li> <p>Une fois toutes ces modifications effectu\u00e9es, soumettre votre travail dans Replit.</p> </li> </ol>"},{"location":"premiere/06_web/acti1_HTML/#partie-3-creation-dune-page-web","title":"Partie 3. Cr\u00e9ation d'une page Web","text":"<p>Utiliser les observations faites au cours de cette activit\u00e9 pour cr\u00e9er une page Web sur le sujet de votre choix.</p> <p>Cette page devra comporter diff\u00e9rentes balises, des images, des listes, etc.</p> <p>Enregistrer votre travail dans Replit en suivant ce lien et le soumettre.</p>"},{"location":"premiere/06_web/acti2_CSS/","title":"Activit\u00e9 2 : Le couple HTML/CSS","text":"<p>Objectifs de cette activit\u00e9</p> <p>\u00c0 l'issue de cette activit\u00e9, vous saurez :</p> <ul> <li>comment est cod\u00e9e la mise en page et le style d'une page Web ;</li> <li>reconna\u00eetre quelques exemples d'instructions CSS ;</li> <li>cr\u00e9er une feuille de style et l'appliquer \u00e0 une page HTML.</li> </ul> <p>Pour cette activit\u00e9, on utilisera de pr\u00e9f\u00e9rence le navigateur Firefox.</p> <p>Info</p> <p>CSS signifie Cascading Style Sheet (feuilles de style en cascade). CSS est le langage utilis\u00e9 pour coder le style des pages Web (couleurs, taille des caract\u00e8res, alignements, etc.). CSS, tout comme HTML, n'est pas un langage de programmation.</p>"},{"location":"premiere/06_web/acti2_CSS/#partie-1-observation-dune-page-web-stylee","title":"Partie 1. Observation d'une page Web styl\u00e9e","text":"<ol> <li>Ouvrir dans un nouvel onglet la page suivante : Tim_Berners_css.html. La page qui s'affiche est \u00e0 peu pr\u00e8s la m\u00eame que celle que vous avez analys\u00e9e dans l'activit\u00e9 1, mais avec une application de diff\u00e9rents styles.</li> <li>Faire un clic droit dans la page et cliquer sur \"Code source de la page\" pour faire appara\u00eetre la page HTML source. Quels sont les principaux changements ?</li> <li>Dans la balise <code>&lt;head&gt;</code> de la page se trouve un lien vers la feuille de style CSS de la page. Ouvrir cette feuille dans un nouvel onglet et observer le code CSS d\u00e9finissant le style de la page Web.</li> <li>D\u00e9crire en quelques mots la syntaxe CSS et en relever les r\u00e8gles de base.</li> <li>Rechercher, en comparant les fichiers CSS et HTML, le r\u00f4le des instructions <code>.en_couleur</code> et <code>#titres</code> et o\u00f9 elles s'appliquent.</li> </ol>"},{"location":"premiere/06_web/acti2_CSS/#partie-2-modification-du-fichier-css","title":"Partie 2. Modification du fichier CSS","text":"<ol> <li>Ouvrir l'activit\u00e9 Replit correspondant \u00e0 cette partie.</li> <li> <p>Vous trouverez la page Web et sa feuille de style. Modifier la feuille de style (et si n\u00e9cessaire la page Web) :</p> <ul> <li>Changer les couleurs d'arri\u00e8re-plan ;</li> <li>Changer la couleur du texte de tout le contenu de la section qui a pour identifiant \"introduction\" ;</li> <li>Changer la taille du texte de tous les \u00e9l\u00e9ments qui poss\u00e8dent la classe \"en_couleur\" ;</li> <li>Supprimer l'indentation des paragraphes ;</li> <li>Changer les puces de la liste : vous utiliserez pour cela l'attribut <code>list-style-type: square;</code> ;</li> <li>Dans la liste num\u00e9rot\u00e9e, changer les num\u00e9ros en chiffres romains majuscules : vous utiliserez pour cela l'attribut <code>list-style-type: upper-roman;</code>.</li> </ul> <p>Une fois toutes ces modifications faites, soumettre votre travail.</p> </li> </ol>"},{"location":"premiere/06_web/acti2_CSS/#partie-3-creation-dun-fichier-css","title":"Partie 3. Cr\u00e9ation d'un fichier CSS","text":"<p>Dans cette partie, vous allez reprendre la page Web cr\u00e9\u00e9e lors de l'activit\u00e9 sur le langage HTML et cr\u00e9er une feuille de style afin de la mettre en forme. Quand vous serez satisfait du r\u00e9sultat, soumettre votre travail dans le Replit pr\u00e9vu \u00e0 cet effet.</p>"},{"location":"premiere/06_web/acti3_Javascript/","title":"Activit\u00e9 3 : Page Web interactive avec Javascript","text":"<p>Objectifs de cette activit\u00e9</p> <p>\u00c0 l'issue de cette activit\u00e9, vous saurez :</p> <ul> <li>identifier les composants graphiques permettant d'interagir avec une page web ;</li> <li>identifier des \u00e9v\u00e9nements et les fonctions associ\u00e9es ;</li> <li>comment fonctionne le trio HTML/CSS/Javascript.</li> </ul>"},{"location":"premiere/06_web/acti3_Javascript/#partie-1-observation-dune-page-web-interactive","title":"Partie 1 - Observation d'une page web interactive","text":"<ol> <li>Ouvrir la page web qui va nous servir d'exemple, en cliquant sur ce lien.</li> <li>Tester et observer les diff\u00e9rentes interactivit\u00e9s pr\u00e9sentes sur la page. Quels \u00e9l\u00e9ments HTML permettent d'interagir avec la page ?</li> <li>Ouvrir le code source de la page et rep\u00e9rer parmi les \u00e9l\u00e9ments HTML pr\u00e9sents ceux qui poss\u00e8dent un attribut de la forme \"on...()\". Ces attributs d\u00e9finissent la fonction Javascript qui doit \u00eatre ex\u00e9cut\u00e9e lorsque l'\u00e9v\u00e9nement indiqu\u00e9 survient. Noter le nom de chacune de ces fonctions ainsi que l'\u00e9l\u00e9ment auquel elles sont associ\u00e9es.</li> <li> <p>Mais o\u00f9 se trouve le code de ces fonctions ? Observer le contenu de l'\u00e9l\u00e9ment <code>&lt;head&gt;</code>: une ligne faisant r\u00e9f\u00e9rence \u00e0 un fichier de script Javascript a \u00e9t\u00e9 ajout\u00e9e :</p> <p>HTML<pre><code>&lt;script src=\"acti3.js\"&gt;&lt;/script&gt;\n</code></pre> Ouvrir ce fichier. Il contient la d\u00e9finition des fonctions d\u00e9clench\u00e9es par les \u00e9v\u00e9nements.</p> </li> <li> <p>R\u00e9pondre aux questions suivantes :</p> <ol> <li>Comment fait-on des commentaires en Javascript ?</li> <li>Quel mot-clef est utilis\u00e9 pour d\u00e9finir une variable ?</li> <li>Quelle instruction correspond \u00e0 l'instruction Python <code>def</code>?</li> <li>Quelle instruction correspond \u00e0 l'instruction Python <code>str()</code>?</li> </ol> </li> <li> <p>On trouve dans le code deux lignes <code>console.log(...)</code>. Cette instruction permet d'\u00e9crire dans la console Javascript. Celle-ci appara\u00eet dans les outils de d\u00e9veloppement accessibles en pressant la touche F12 (onglet Console). Ouvrir cette console, cliquer plusieurs fois sur les boutons qui font changer les couleurs d'arri\u00e8re-plan et observer ce qui appara\u00eet dans la console.</p> </li> </ol> <p>Le trio HTML/CSS/JS</p> <p>Une page web interactive utilisant javascript sera donc rendue dans le navigateur \u00e0 partir du code contenu dans trois fichiers distincts :</p> <ul> <li>le fichier HTML pour la structure du document et son contenu ;</li> <li>le fichier CSS pour le style ;</li> <li>le fichier javascript pour la d\u00e9finition des algorithmes et la gestion des \u00e9v\u00e9nements.</li> </ul> <p>Le code Javascript peut modifier le contenu des \u00e9l\u00e9ments HTML et les r\u00e8gles CSS.</p> <p>Attention !</p> <p>Le code Javascript est ex\u00e9cut\u00e9 sur l'ordinateur client, par le navigateur. Toute modification faite sur le client (avec les outils de d\u00e9veloppement par exemple) sera perdue si la page est recharg\u00e9e. Le serveur va en effet alors renvoyer la page initiale.</p>"},{"location":"premiere/06_web/acti3_Javascript/#partie-2-creation-dune-page-web-interactive","title":"Partie 2 - Cr\u00e9ation d'une page web interactive","text":"<p>Dans cette partie, vous devez cr\u00e9er une page web, au format HTML, contenant du texte et une image, associ\u00e9e \u00e0 une feuille de style de votre choix.</p> <p>Vous devez ensuite cr\u00e9er un fichier <code>script.js</code> et le lier \u00e0 votre page HTML.</p> <p>L'objectif est d'ins\u00e9rer dans votre page HTML un bouton \"Mode jour/Mode nuit\" qui changera les couleurs de la page \u00e0 chaque clic : passage d'un th\u00e8me clair \u00e0 un th\u00e8me sombre et vice versa.</p> <p>Ce travail est \u00e0 faire dans le Replit accessible en cliquant ici.</p>"},{"location":"premiere/06_web/acti4_forms/","title":"Activit\u00e9 4 : Formulaires Web","text":"<p>Objectifs de cette activit\u00e9</p> <p>\u00c0 l'issue de cette activit\u00e9, vous saurez :</p> <ul> <li>cr\u00e9er un formulaire simple ;</li> <li>comprendre son fonctionnement ;</li> <li>distinguer les transmissions de param\u00e8tres par les m\u00e9thodes GET et POST.    </li> </ul>"},{"location":"premiere/06_web/acti4_forms/#que-sont-les-formulaires-web","title":"Que sont les formulaires Web ?","text":"<p>Les formulaires Web sont l'un des principaux points d'interaction entre un utilisateur et un site Web. Les formulaires permettent aux utilisateurs de saisir des donn\u00e9es, qui sont g\u00e9n\u00e9ralement envoy\u00e9es \u00e0 un serveur Web pour traitement et stockage, ou utilis\u00e9es c\u00f4t\u00e9 client pour mettre \u00e0 jour imm\u00e9diatement l'interface d'une mani\u00e8re ou d'une autre (par exemple, ajouter un autre \u00e9l\u00e9ment \u00e0 une liste, ou afficher ou masquer une fonctionnalit\u00e9 de l'interface utilisateur).</p> <p>Le code HTML d'un formulaire Web est compos\u00e9 d'un ou plusieurs contr\u00f4les de formulaire (parfois appel\u00e9s widgets), ainsi que d'\u00e9l\u00e9ments suppl\u00e9mentaires pour aider \u00e0 structurer le formulaire global. Les contr\u00f4les peuvent \u00eatre des champs de texte \u00e0 une ou plusieurs lignes, des listes d\u00e9roulantes, des boutons, des cases \u00e0 cocher ou des boutons radio, et sont principalement cr\u00e9\u00e9s \u00e0 l'aide de l'\u00e9l\u00e9ment <code>&lt;input&gt;</code>.</p>"},{"location":"premiere/06_web/acti4_forms/#creation-dun-formulaire-simple","title":"Cr\u00e9ation d'un formulaire simple","text":"<p>Avant de commencer \u00e0 coder, il est toujours pr\u00e9f\u00e9rable de prendre du recul et de prendre le temps de r\u00e9fl\u00e9chir \u00e0 votre formulaire. La conception d'une maquette rapide est toujours une bonne d\u00e9marche.</p> <p>Dans cette activit\u00e9, nous allons cr\u00e9er un formulaire de r\u00e9cup\u00e9ration de mot de passe oubli\u00e9. Faisons un croquis :</p> <p></p> <p>Notre formulaire contiendra deux champs de texte et un bouton. Nous demandons \u00e0 l'utilisateur son identifiant et son e-mail. Appuyer sur le bouton enverra les donn\u00e9es \u00e0 un serveur Web.</p>"},{"location":"premiere/06_web/acti4_forms/#implementation-de-notre-formulaire-html","title":"Impl\u00e9mentation de notre formulaire HTML","text":"<p>Tout d'abord, cr\u00e9ons le HTML pour notre formulaire. Nous utiliserons les \u00e9l\u00e9ments HTML suivants : <code>&lt;form&gt;</code>, <code>&lt;label&gt;</code>, <code>&lt;input&gt;</code>, et <code>&lt;button&gt;</code>.</p> <p>Cliquer sur ce lien pour acc\u00e9der au Replit dans lequel cette activit\u00e9 sera r\u00e9alis\u00e9e.</p> <p>Tous les formulaires commencent par un \u00e9l\u00e9ment <code>&lt;form&gt;</code> de la forme :</p> HTML<pre><code>&lt;form action=\"\" method=\"post\"&gt;\u2026&lt;/form&gt;\n</code></pre> <p>Cet \u00e9l\u00e9ment d\u00e9finit un formulaire. C'est un \u00e9l\u00e9ment conteneur, mais sp\u00e9cifiquement pour contenir des formulaires ; il prend \u00e9galement en charge certains attributs sp\u00e9cifiques pour configurer le comportement du formulaire. Tous ses attributs sont facultatifs, mais il est courant de toujours d\u00e9finir au moins les attributs action et method</p> <ul> <li>L'attribut action d\u00e9finit l'emplacement (URL) o\u00f9 les donn\u00e9es collect\u00e9es du formulaire doivent \u00eatre envoy\u00e9es lors de sa soumission. Pour l'instant, nous avons laiss\u00e9 cet attribut vide.</li> <li>L'attribut method d\u00e9finit la m\u00e9thode HTTP avec laquelle envoyer les donn\u00e9es (g\u00e9n\u00e9ralement GET ou POST).</li> </ul> <p>Pour l'instant, ajoutez le code HTML ci-dessous dans le fichier <code>index.html</code>.</p> HTML<pre><code>&lt;form action=\"\" method=\"get\"&gt;\n    &lt;p&gt;Mot de passe oubli\u00e9&lt;/p&gt;\n    &lt;label for=\"identifiant\"&gt;Identifiant&lt;/label&gt;&lt;br&gt;\n    &lt;input type=\"text\" id=\"identifiant\" name=\"user_id\" /&gt;&lt;br&gt;\n    &lt;label for=\"mail\"&gt;E-mail:&lt;/label&gt;&lt;br&gt;\n    &lt;input type=\"email\" id=\"mail\" name=\"user_email\" /&gt;&lt;br&gt;\n&lt;/form&gt;\n</code></pre> <p>Notre formulaire de contact n'est pas complexe : la partie saisie de donn\u00e9es contient deux champs de texte <code>&lt;input&gt;</code>, chacun avec un <code>&lt;label&gt;</code> correspondant :</p> <ul> <li>Le champ de saisie l'identifiant est un champ de texte sur une seule ligne.</li> <li>Le champ de saisie de l'e-mail est une entr\u00e9e de type email : un champ texte d'une seule ligne qui n'accepte que les adresses e-mail.</li> </ul> <p>Pour la convivialit\u00e9 et l'accessibilit\u00e9, nous incluons une \u00e9tiquette explicite <code>&lt;label&gt;</code> pour chaque contr\u00f4le de formulaire. Notez l'utilisation de l'attribut <code>&lt;for&gt;</code> sur tous les \u00e9l\u00e9ments <code>&lt;label&gt;</code>, qui prend comme valeur l'identifiant du contr\u00f4le de formulaire auquel il est associ\u00e9 \u2014 c'est ainsi que l'on associe un contr\u00f4le de formulaire \u00e0 son libell\u00e9.</p> <p>Il y a un grand avantage \u00e0 faire cela, car on associe ainsi l'\u00e9tiquette au contr\u00f4le de formulaire, permettant aux utilisateurs de souris, de trackpad et d'appareils tactiles de cliquer sur l'\u00e9tiquette pour activer le contr\u00f4le correspondant.</p> <p>Dans l'\u00e9l\u00e9ment <code>&lt;input&gt;</code>, l'attribut le plus important est l'attribut type. Cet attribut est extr\u00eamement important car il d\u00e9finit la fa\u00e7on dont l'\u00e9l\u00e9ment <code>&lt;input&gt;</code> appara\u00eet et se comporte.</p> <ul> <li>Dans notre exemple simple, nous utilisons le type text pour le premier <code>&lt;input&gt;</code> \u2014 la valeur par d\u00e9faut pour cet attribut. Il repr\u00e9sente un champ de texte de base sur une seule ligne qui accepte tout type de saisie de texte.</li> <li>Pour le deuxi\u00e8me <code>&lt;input&gt;</code>, nous utilisons le type email, qui d\u00e9finit un champ de texte sur une seule ligne qui n'accepte qu'une adresse e-mail bien form\u00e9e. Cela transforme un champ de texte de base en une sorte de champ \"intelligent\" qui effectuera des contr\u00f4les de validation sur les donn\u00e9es saisies par l'utilisateur. Cela entra\u00eene \u00e9galement l'apparition d'une disposition de clavier plus appropri\u00e9e pour la saisie d'adresses e-mail (par exemple, avec un symbole @ par d\u00e9faut) sur les appareils dot\u00e9s de claviers dynamiques, comme les smartphones.</li> </ul>"},{"location":"premiere/06_web/acti4_forms/#ajout-du-bouton","title":"Ajout du bouton","text":"<p>Le balisage de notre formulaire est presque termin\u00e9 ; il suffit d'ajouter un bouton pour permettre \u00e0 l'utilisateur d'envoyer, ou \"soumettre\", ses donn\u00e9es une fois qu'il a rempli le formulaire. Ceci est fait en utilisant l'\u00e9l\u00e9ment <code>&lt;button&gt;</code>.</p> <p>Ajoutez ce qui suit juste avant la balise de fermeture <code>&lt;/form&gt;</code> :</p> HTML<pre><code>&lt;button type=\"submit\"&gt;R\u00e9cup\u00e9rer mon mot de passe&lt;/button&gt;\n</code></pre> <p>L'\u00e9l\u00e9ment <code>&lt;button&gt;</code> accepte \u00e9galement un attribut type \u2014 celui-ci accepte l'une des trois valeurs : submit, reset, ou button.</p> <ul> <li>Un clic sur un bouton submit (la valeur par d\u00e9faut) envoie les donn\u00e9es du formulaire vers la page web d\u00e9finie par l'attribut action de l'\u00e9l\u00e9ment <code>&lt;/form&gt;</code>.</li> <li>Un clic sur un bouton reset r\u00e9initialise imm\u00e9diatement tous les widgets du formulaire \u00e0 leur valeur par d\u00e9faut.</li> <li>Un clic sur un bouton button ne fait rien ! Cela semble idiot, mais c'est incroyablement utile pour cr\u00e9er des boutons personnalis\u00e9s - vous pouvez d\u00e9finir la fonctionnalit\u00e9 choisie avec JavaScript.</li> </ul>"},{"location":"premiere/06_web/acti4_forms/#mise-en-forme-du-formulaire","title":"Mise en forme du formulaire","text":"<p>Pour le moment, le formulaire a l'air plut\u00f4t moche.</p> <p>Nous allons utiliser un fichier de style au format CSS pour le rendre plus agr\u00e9able.</p> <p>Tout d'abord, cr\u00e9er dans le Replit un fichier nomm\u00e9 <code>style.css</code> et lier ce fichier au fichier HTML en ajoutant la ligne suivante dans l'ent\u00eate de celui-ci :</p> HTML<pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n</code></pre> <p>Dans le fichier <code>style.css</code>, ajoutez le CSS suivant :</p> CSS<pre><code>form {\n/* Centre le formulaire sur la page */\nmargin: 0 auto;\nwidth: 400px;\n/* Bordure du formulaire */\npadding-left: 1em;\npadding-right: 1em; border: 1px solid #ccc;\n}\n\nform p {\nborder-bottom: 1px solid #99c1f1;\npadding-bottom: 1em;\n}\n\nlabel {\ndisplay: inline-block;\nwidth: 90px;\ntext-align: left;\npadding-bottom: 0.5em;\npadding-top: 0.5em;\n}\n\ninput {\nfont: 1em sans-serif;\nwidth: 390px;\nbox-sizing: border-box;\nborder: 1px solid #999;\n}\n\ninput:focus {\n/* S'applique quand le widget est activ\u00e9 */\nborder-color: #0000ff;\n}\n\nbutton {\ndisplay: block;\nmargin: 1em auto;\nbackground-color: #66bbff;\ncolor: white;\nfont-weight: bold;\n}\n</code></pre> <p>Enregistrez et rechargez : votre formulaire devrait avoir l'air beaucoup moins laid.</p>"},{"location":"premiere/06_web/acti4_forms/#envoi-des-donnees-de-formulaire-a-votre-serveur-web","title":"Envoi des donn\u00e9es de formulaire \u00e0 votre serveur Web","text":"<p>La derni\u00e8re partie, et peut-\u00eatre la plus d\u00e9licate, consiste \u00e0 g\u00e9rer les donn\u00e9es du formulaire c\u00f4t\u00e9 serveur. L'\u00e9l\u00e9ment <code>&lt;form&gt;</code> d\u00e9finit o\u00f9 et comment envoyer les donn\u00e9es gr\u00e2ce aux attributs action et method.</p> <p>Nous fournissons un attribut name pour chaque contr\u00f4le de formulaire. Les noms sont importants \u00e0 la fois c\u00f4t\u00e9 client et c\u00f4t\u00e9 serveur ; ils indiquent au navigateur quel nom donner \u00e0 chaque donn\u00e9e et, c\u00f4t\u00e9 serveur, ils laissent le serveur g\u00e9rer chaque donn\u00e9e par son nom. Les donn\u00e9es du formulaire sont envoy\u00e9es au serveur sous forme de paires nom/valeur.</p> <p>Pour nommer les donn\u00e9es dans un formulaire, vous devez utiliser l'attribut name sur chaque widget de formulaire qui collectera une donn\u00e9e sp\u00e9cifique. </p> <p>Regardons notre code de formulaire : modifiez comme indiqu\u00e9 ci-dessous la valeur de l'attribut action afin que les donn\u00e9es soient envoy\u00e9es \u00e0 la page <code>http://nsi.flallemand.fr/divers/acti4_forms.php</code> :</p> HTML<pre><code>&lt;form action=\"http://nsi.flallemand.fr/divers/acti4_forms.php\" method=\"get\"&gt;\n  &lt;p&gt;Mot de passe oubli\u00e9&lt;/p&gt;\n  &lt;label for=\"identifiant\"&gt;Identifiant&lt;/label&gt;&lt;br&gt;\n  &lt;input type=\"text\" id=\"identifiant\" name=\"user_id\" /&gt;&lt;br&gt;\n  &lt;label for=\"mail\"&gt;E-mail:&lt;/label&gt;&lt;br&gt;\n  &lt;input type=\"email\" id=\"mail\" name=\"user_email\" /&gt;&lt;br&gt;\n  &lt;button type=\"submit\"&gt;R\u00e9cup\u00e9rer mon mot de passe&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Dans notre exemple, le formulaire enverra 2 donn\u00e9es nomm\u00e9es \"user_id\" et \" user_email\". Ces donn\u00e9es seront envoy\u00e9es \u00e0 l'URL <code>http://nsi.flallemand.fr/divers/acti4_forms.php</code> en utilisant la m\u00e9thode HTTP GET.</p> <p>C\u00f4t\u00e9 serveur, le script \u00e0 l'URL <code>http://nsi.flallemand.fr/divers/acti4_forms.php</code> recevra les donn\u00e9es sous la forme d'une liste de 2 \u00e9l\u00e9ments cl\u00e9/valeur contenus dans la requ\u00eate HTTP. La fa\u00e7on dont ce script traitera ces donn\u00e9es d\u00e9pend de vous. Chaque langage c\u00f4t\u00e9 serveur (PHP, Python, Ruby, Java, C#, etc.) poss\u00e8de son propre m\u00e9canisme de gestion des donn\u00e9es de formulaire. Nous n'allons pas approfondir ce sujet ici.</p> <p>Pour notre exemple, c'est le langage PHP qui est utilis\u00e9.</p> <p>Voici, pour information, le contenu du fichier <code>acti4_forms.php</code> (remarque : les \u00e9l\u00e9ments CSS sont ici directement inclus dans le fichier, ce qui n'est pas une bonne habitude) :</p> PHP<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Activit\u00e9 4 : Formulaires &lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n\n&lt;body style=\"width: 70%; margin: 0 auto;\"&gt;\n    &lt;h1 style=\"text-align: center;\"&gt; \n&lt;?php\n        echo \"Bienvenue \" . $_GET['user_id'] . \" !\";\n        ?&gt;\n    &lt;/h1&gt;\n    &lt;h1 style=\"text-align: center;\"&gt;Alors ? Tu as encore oubli\u00e9 ton mot de passe ?&lt;/h1&gt;\n    &lt;h1 style=\"text-align: center;\"&gt;Quelle t\u00eate en l'air !&lt;/h1&gt;\n&lt;?php\n    echo \"&lt;h1 style='text-align: center;'&gt;Bon, je te pardonne pour cette fois&lt;br&gt; et je t'envoie ton mot de passe \u00e0 l'adresse&lt;br&gt;\". $_GET['user_email'] . \"&lt;/h1&gt;\";\n    ?&gt;\n    &lt;img src=\"elephant-1090828_1280.jpg\" width = \"70%\" alt=\"image ne pas oublier\" style=\"display: block; margin: 0 auto;\"&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Tester le formulaire, \u00e0 partir du Replit : entrer un nom et une adresse e-mail, puis cliquer sur le bouton. Observer ce qu'il se passe.</p> <p>Observer l'URL affich\u00e9e dans la barre d'adresse du navigateur. Que constatez-vous ?</p> <p>Pour \u00e9viter cet affichage dans la barre d'adresse, on utilise plut\u00f4t la m\u00e9thode HTTP POST pour l'envoi de donn\u00e9es de formulaires.</p> <p>Pour cela, modifier l'attribut method dans le fichier <code>index.html</code> :</p> HTML<pre><code>&lt;form action=\"http://nsi.flallemand.fr/divers/acti4_forms_bis.php\" method=\"gpost\"&gt;\n</code></pre> <p>On modifie aussi l'attribut action car le code PHP pour extraire les donn\u00e9es transmises par la m\u00e9thode POST n'est pas exactement le m\u00eame.</p> <p>Tester \u00e0 nouveau cette nouvelle version du formulaire et observer l'URL affich\u00e9 dans la barre d'adresse.</p> <p>Remarque</p> <p>En r\u00e9alit\u00e9, la m\u00e9thode POST n'est pas plus s\u00e9curis\u00e9e que la m\u00e9thode GET. Certes, les entr\u00e9es du formulaire ne sont plus affich\u00e9es dans l'URL, mais elles sont transmises dans le corps de la requ\u00eate en clair : l'utilisation des outils de d\u00e9veloppement du navigateur vous le montrera.</p> <p>Pour une vraie s\u00e9curit\u00e9 et emp\u00eacher que ces donn\u00e9es puissent \u00eatre intercept\u00e9es, il faut les crypter et utiliser le protocole s\u00e9curis\u00e9 HTTPS (programme de terminale).</p>"},{"location":"premiere/06_web/cours_CSS/","title":"CSS : Explications et compl\u00e9ments","text":"<p>Le principe du couple HTML/CSS est de bien s\u00e9parer la d\u00e9finition du contenu d'une page Web de la d\u00e9finition de son apparence.</p> <p>Ce langage est apparu au milieu des ann\u00e9es 1990 et les r\u00e8gles CSS sont couramment utilis\u00e9es et reconnues par les navigateurs depuis le d\u00e9but des ann\u00e9es 2000.</p> <p>L'un des objectifs majeurs des CSS est de permettre la mise en forme en dehors du code HTML. Il est par exemple possible de ne d\u00e9crire que la structure d'un document en HTML, et de d\u00e9crire toute la pr\u00e9sentation dans une feuille de style CSS s\u00e9par\u00e9e. Les styles sont appliqu\u00e9s au dernier moment, dans le navigateur web des visiteurs qui consultent le document. Cette s\u00e9paration fournit un certain nombre de b\u00e9n\u00e9fices, permettant d'am\u00e9liorer l'accessibilit\u00e9, de changer plus facilement de pr\u00e9sentation, et de r\u00e9duire la complexit\u00e9 de l'architecture d'un document.</p> <p>Ainsi, les avantages des feuilles de style sont multiples :</p> <ul> <li>La structure du document et la pr\u00e9sentation peuvent \u00eatre g\u00e9r\u00e9es dans des fichiers s\u00e9par\u00e9s ;</li> <li>La conception d'un document se fait dans un premier temps sans se soucier de la pr\u00e9sentation, ce qui permet d'\u00eatre plus efficace ;</li> <li>Dans le cas d'un site web, la pr\u00e9sentation est uniformis\u00e9e : les documents (pages HTML) font r\u00e9f\u00e9rence aux m\u00eames feuilles de styles. Cette caract\u00e9ristique permet de plus une remise en forme rapide de l'aspect visuel ;</li> <li>Un m\u00eame document peut donner le choix entre plusieurs feuilles de style, par exemple une pour l'impression et une pour la lecture \u00e0 l'\u00e9cran. Certains navigateurs web permettent au visiteur de choisir un style parmi plusieurs ;</li> <li>Le code HTML est consid\u00e9rablement r\u00e9duit en taille et en complexit\u00e9, puisqu'il ne contient plus de balises ni d'attributs de pr\u00e9sentation.</li> </ul>"},{"location":"premiere/06_web/cours_CSS/#1-structure-dune-regle-css","title":"1. Structure d'une r\u00e8gle CSS","text":"<p>CSS est un langage bas\u00e9 sur des r\u00e8gles \u2014 on d\u00e9finit des r\u00e8gles de styles destin\u00e9es \u00e0 des \u00e9l\u00e9ments ou des groupes d'\u00e9l\u00e9ments particuliers dans la page. Par exemple, \u00ab Je veux que le titre principal de ma page s'affiche en rouge en gros caract\u00e8res. \u00bb</p> <p>Dans le code suivant, une r\u00e8gle CSS \u00e9l\u00e9mentaire r\u00e9alise cette mise en forme :</p> CSS<pre><code>h1 {\ncolor: red;\nfont-size: 5em;\n}\n</code></pre> <p></p> <p>La r\u00e8gle commence par un s\u00e9lecteur, l'\u00e9l\u00e9ment HTML mis en forme. Ici, le style s'applique aux titres de niveau 1 (<code>&lt;h1&gt;</code>).</p> <p>Suivent une paire d'accolades { } \u00e0 l'int\u00e9rieur desquelles on trouve une ou plusieurs d\u00e9clarations, sous la forme d'une paire <code>propri\u00e9t\u00e9: valeur</code>. Chaque paire pr\u00e9cise une propri\u00e9t\u00e9 de l'\u00e9l\u00e9ment s\u00e9lectionn\u00e9, suivie de la valeur choisie pour cette propri\u00e9t\u00e9 ; la propri\u00e9t\u00e9 et la valeur sont s\u00e9par\u00e9es par deux points. Chaque d\u00e9claration se termine par un point-virgule. \u00c0 chaque propri\u00e9t\u00e9 d\u00e9finie par CSS correspondent diff\u00e9rentes valeurs possibles. Dans l'exemple, la propri\u00e9t\u00e9 <code>color</code> peut prendre diff\u00e9rentes valeurs. La propri\u00e9t\u00e9 <code>font-size</code> accepte diff\u00e9rentes tailles comme valeurs.</p> <p>Une feuille de style CSS est constitu\u00e9e d'une succession de telles r\u00e8gles :</p> CSS<pre><code>h1 {\ncolor: red;\nfont-size: 5em;\n}\n\np {\ncolor: black;\n}\n</code></pre> <p>Le lien entre le fichier HTML et la feuille de style CSS est fait dans le fichier HTML en ins\u00e9rant un \u00e9l\u00e9ment <code>&lt;link&gt;</code> dans la section <code>&lt;head&gt;</code> de la page : </p> HTML<pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</code></pre> <p>Une m\u00eame feuille de style peut ainsi servir \u00e0 plusieurs fichiers HTML.</p>"},{"location":"premiere/06_web/cours_CSS/#2-differents-types-de-selecteurs","title":"2. Diff\u00e9rents types de s\u00e9lecteurs","text":"<p>Le s\u00e9lecteur peut \u00eatre :</p> <ul> <li>le nom d'une balise : toutes les balises de ce type sont alors affect\u00e9es par la r\u00e8gle CSS ;</li> <li>plusieurs noms de balise s\u00e9par\u00e9s par une virgule pour s\u00e9lectionner toutes les balises de tous ces types ;</li> <li> <p>un identifiant pr\u00e9c\u00e9d\u00e9 du symbole <code>#</code> pour s\u00e9lectionner l'unique \u00e9l\u00e9ment HTML poss\u00e9dant cet identifiant ;</p> CSS<pre><code>#mon-id {\nbackground-color: black;\n}\n</code></pre> </li> <li> <p>une classe pr\u00e9c\u00e9d\u00e9e d'un point <code>.</code>pour s\u00e9lectionner tous les \u00e9l\u00e9ments HTML poss\u00e9dant cette classe ;</p> CSS<pre><code>.ma_classe {\nbackground-color: black;\n}\n</code></pre> </li> </ul> <p>Beaucoup d'autres possibilit\u00e9s existent, se reporter aux ressources indiqu\u00e9es en bas de page pour approfondir.</p> <p>Citons juste un exemple de pseudo-classe : la r\u00e8gle ci-dessous ne s'appliquera par exemple aux liens (balise <code>&lt;a&gt;</code>) que lorsque la souris les survolera :</p> CSS<pre><code>a:hover {\ncolor: blue;\n}\n</code></pre>"},{"location":"premiere/06_web/cours_CSS/#3-les-grands-types-de-mise-en-forme","title":"3. Les grands types de mise en forme","text":"<p>Les r\u00e8gles CSS permettent en particulier :</p> <ul> <li>La mise en forme basique du texte : couleur, taille, alignement, police de caract\u00e8res, ...</li> <li>La mise en forme globale des paragraphes et des diff\u00e9rents blocs de contenu \u00e0 travers le mod\u00e8le de bo\u00eete.</li> <li>L'alignement des images, des divers \u00e9l\u00e9ments.</li> </ul> <p>Plus pr\u00e9cis\u00e9ment, la notion de mod\u00e8le de bo\u00eete est importante \u00e0 comprendre.</p> <p>En CSS, tout \u00e9l\u00e9ment est contenu dans une bo\u00eete.</p> <p>Pour une bo\u00eete de type bloc, toute la largeur disponible est utilis\u00e9e et il est possible de d\u00e9finir des marges :</p> <ul> <li>ext\u00e9rieures avec les propri\u00e9t\u00e9s <code>margin</code>, <code>margin-left</code>, <code>margin-top</code>, etc.</li> <li>int\u00e9rieures avec les propri\u00e9t\u00e9s <code>padding</code>, <code>padding-left</code>, <code>padding-top</code>, etc.</li> </ul> <p>Les bo\u00eetes peuvent aussi recevoir une bordure gr\u00e2ce \u00e0 la propri\u00e9t\u00e9 <code>border</code>.</p> <p>Les \u00e9l\u00e9ments HTML <code>&lt;a&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;em&gt;</code> et <code>&lt;strong&gt;</code> sont des \u00e9l\u00e9ments qui s'affichent \"en ligne\" par d\u00e9faut. Pour leur attribuer des propri\u00e9t\u00e9s d'\u00e9l\u00e9ments de type bloc, on peut utiliser la propri\u00e9t\u00e9 <code>display: block;</code>.</p> <p>La figure ci-dessous illustre la diff\u00e9rence entre les propri\u00e9t\u00e9s <code>margin</code> et <code>padding</code>.</p> <p></p>"},{"location":"premiere/06_web/cours_CSS/#4-utilisation-des-outils-de-developpement-du-navigateur","title":"4. Utilisation des outils de d\u00e9veloppement du navigateur","text":"<p>Les navigateurs modernes poss\u00e8dent une fonctionnalit\u00e9 bien utile : les outils de d\u00e9veloppement, usuellement activ\u00e9s en appuyant sur la touche F12.</p> <p></p> <p>On peut, \u00e0 partir de cet outil, modifier les r\u00e8gles CSS du document afficher et voir de mani\u00e8re interactive les effets produits. Cet outil sera \u00e9galement utile pour l'utilisation de scripts Javascript dans la page Web.</p>"},{"location":"premiere/06_web/cours_CSS/#5-ressources-pour-approfondir","title":"5. Ressources pour approfondir","text":"<p>Pour aller plus loin avec le langage CSS :</p> <ul> <li>Excellente ressource pour apprendre le HTML, le CSS et JavaScript : MDN Web Docs de Mozilla. Cerise sur le g\u00e2teau : le site est disponible en fran\u00e7ais.</li> <li>Incontournable, mais en anglais, les tutoriels de w3Schools.</li> <li>Le cours classique, gratuit et en fran\u00e7ais du site OpenClassroom.</li> </ul>"},{"location":"premiere/06_web/cours_HTML/","title":"HTML : Explications et compl\u00e9ments","text":"<p>HTML signifie \u00ab HyperText Markup Language \u00bb que l'on peut traduire par \u00ab langage de balises pour l'hypertexte \u00bb. Il est utilis\u00e9 afin de cr\u00e9er et de repr\u00e9senter le contenu d'une page web et sa structure. D'autres technologies sont utilis\u00e9es avec HTML pour d\u00e9crire la pr\u00e9sentation d'une page (CSS) et/ou ses fonctionnalit\u00e9s interactives (JavaScript).</p> <p>L'\u00ab hypertexte \u00bb d\u00e9signe les liens qui relient les pages web entre elles, que ce soit au sein d'un m\u00eame site web ou entre diff\u00e9rents sites web. Les liens sont un aspect fondamental du Web. Ce sont eux qui forment cette \u00ab toile \u00bb (ce mot est traduit par web en anglais).</p> <p>Le langage HTML utilise des \u00ab balises \u00bb pour annoter du texte, des images et d'autres contenus afin de les afficher dans un navigateur web. Les balises poss\u00e8dent des noms r\u00e9serv\u00e9s tels que <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code> et bien d'autres.</p> <p>En HTML, les balises sont insensibles \u00e0 la casse et peuvent aussi bien \u00eatre \u00e9crites en minuscules, en majuscules, voire avec un m\u00e9lange des deux. Autrement dit, la balise <code>&lt;title&gt;</code> pourrait tr\u00e8s bien \u00eatre \u00e9crite comme <code>&lt;Title&gt;</code>, <code>&lt;TiTle&gt;</code> ou d'une autre fa\u00e7on.</p> <p>Le langage HTML a vu le jour en 1991 et fut cr\u00e9\u00e9 \u00e0 partir d'un autre langage de description appel\u00e9 SGML par l'informaticien Tim Berners-Lee et ses \u00e9quipes.</p> <p>Plusieurs \u00e9volutions du langage ont ensuite \u00e9t\u00e9 d\u00e9velopp\u00e9es. Depuis 2014, la version HTML5 est la version officiellement recommand\u00e9e pour la r\u00e9daction de pages Web.</p> <p></p>"},{"location":"premiere/06_web/cours_HTML/#1-notion-de-balise","title":"1. Notion de balise","text":"<p>Une balise HTML poss\u00e8de la structure suivante :</p> HTML<pre><code>&lt;p&gt;Mon chat est tr\u00e8s grincheux&lt;/p&gt;\n</code></pre> <p></p> <p>Les composants principaux de notre \u00e9l\u00e9ment sont :</p> <ul> <li>La balise ouvrante : celle-ci se compose du nom de l'\u00e9l\u00e9ment (ici \u00ab p \u00bb), entre deux chevrons. Cela indique le d\u00e9but de l'\u00e9l\u00e9ment, soit l'endroit \u00e0 partir duquel celui-ci prend effet. Pour notre exemple, cela indique le d\u00e9but du paragraphe.</li> <li>La balise fermante : ici on a \u00e9galement des chevrons et le nom de l'\u00e9l\u00e9ment, auxquels on ajoute une barre oblique avant le nom de l'\u00e9l\u00e9ment. Cela indique la fin de l'\u00e9l\u00e9ment. Pour notre exemple, cela indique la fin du paragraphe. Oublier la balise fermante est une erreur courante de d\u00e9butant et peut conduire \u00e0 de curieux r\u00e9sultats.</li> <li>Le contenu : C'est le contenu de l'\u00e9l\u00e9ment. Ici, c'est simplement du texte.</li> <li>L'\u00e9l\u00e9ment : Il est compos\u00e9 de la balise ouvrante, de la balise fermante et du contenu.</li> </ul> <p>Les \u00e9l\u00e9ments peuvent \u00eatre imbriqu\u00e9s les uns dans les autres :</p> HTML<pre><code>&lt;p&gt;Mon chat est &lt;strong&gt;tr\u00e8s&lt;/strong&gt; grincheux.&lt;/p&gt;\n</code></pre> <p>Toutefois, il faut faire attention \u00e0 ce que les \u00e9l\u00e9ments soient bien imbriqu\u00e9s les uns dans les autres. Dans l'exemple pr\u00e9c\u00e9dent, on ouvre l'\u00e9l\u00e9ment <code>&lt;p&gt;</code>, puis l'\u00e9l\u00e9ment <code>&lt;strong&gt;</code>. Nous devrons donc fermer l'\u00e9l\u00e9ment <code>&lt;strong&gt;</code> d'abord, puis l'\u00e9lement <code>&lt;p&gt;</code>. Le code suivant est incorrect :</p> HTML<pre><code>&lt;p&gt;Mon chat est &lt;strong&gt;tr\u00e8s grincheux.&lt;/p&gt;&lt;/strong&gt;\n</code></pre> <p>Les \u00e9l\u00e9ments doivent \u00eatre ouverts et ferm\u00e9s correctement de fa\u00e7on \u00e0 ce qu'ils soient clairement \u00e0 l'int\u00e9rieur ou \u00e0 l'ext\u00e9rieur les uns des autres. S'ils se chevauchent, le navigateur essaiera de choisir la meilleure option, qui ne sera peut-\u00eatre pas ce que vous vouliez dire et pourrait conduire \u00e0 des r\u00e9sultats inattendus. Donc ne le faites pas !</p> <p>Remarque</p> <p>Certains \u00e9l\u00e9ments sont vides : ils ne n\u00e9cessitent pas de balise fermante.</p> <p>Les plus fr\u00e9quents sont : </p> <ul> <li> <p>L'\u00e9l\u00e9ment <code>&lt;img /&gt;</code> :</p> HTML<pre><code>&lt;img src=\"chat.png\" alt=\"Image de chat\" /&gt;\n</code></pre> <p>Cet \u00e9l\u00e9ment contient deux attributs mais les balises ouvrante <code>&lt;img&gt;</code> et fermante <code>&lt;/img&gt;</code> sont remplac\u00e9es par une balise auto-fermante <code>&lt;img /&gt;</code> et il n'y a aucun contenu interne. En effet, l'\u00e9l\u00e9ment image n'embarque pas de contenu, son but est d'int\u00e9grer une image dans la page HTML, \u00e0 l'endroit o\u00f9 l'\u00e9l\u00e9ment est plac\u00e9.</p> <p>L'attribut <code>src</code> indique le chemin vers le fichier de l'image et l'attribut <code>alt</code> contient un texte alternatif, texte descriptif de l'image \u00e0 l'intention des utilisateurs qui ne peuvent pas voir l'image.</p> </li> <li> <p>L'\u00e9l\u00e9ment ' : pour cr\u00e9er un saut de ligne dans le texte.</p> </li> <li>Les \u00e9l\u00e9ments <code>&lt;link&gt;</code> et <code>&lt;meta&gt;</code> pr\u00e9sents dans l'\u00e9l\u00e9ment <code>&lt;head&gt;</code> en d\u00e9but de fichier.</li> </ul> <p>Pour toutes ces balises auto-fermantes, la barre oblique avant la dernier chevron <code>&gt;</code>est optionnelle.</p>"},{"location":"premiere/06_web/cours_HTML/#2-attributs-dune-balise","title":"2. Attributs d'une balise","text":"<p>Les balises HTML peuvent \u00eatre dot\u00e9es d'attributs d\u00e9finis \u00e0 l'int\u00e9rieur de la balise ouvrante.</p> <p>Nous avons d\u00e9j\u00e0 vu que la balise <code>&lt;img&gt;</code>, par exemple, poss\u00e9dait un attribut <code>src=...</code> d\u00e9signant le chemin ou l'adresse de l'image \u00e0 afficher.</p> <p>Certains attributs sont sp\u00e9cifiques \u00e0 des balises particuli\u00e8res, d'autres sont des attributs universels : ils peuvent s'appliquer \u00e0 toute balise. En particulier, les attributs suivants seront souvent utilis\u00e9s :</p> <ul> <li><code>class=...</code> : une ou plusieurs classes, s\u00e9par\u00e9es par des espaces, qui permettent de cat\u00e9goriser l'\u00e9l\u00e9ment pour pouvoir le manipuler dans une feuille de style CSS ou un script JavaScript.</li> <li><code>id=...</code> : un identifiant, unique au sein de tout le document, pour un \u00e9l\u00e9ment. Il doit permettre d'identifier cet \u00e9l\u00e9ment lorsqu'on cr\u00e9e un lien vers lui et/ou lorsqu'on le manipule avec des scripts ou avec CSS.</li> </ul> <p>Attention !</p> <ul> <li>Plusieurs \u00e9l\u00e9ments HTML peuvent appartenir \u00e0 une m\u00eame classe : cela permet par exemple de leur appliquer le m\u00eame style CSS.</li> <li>Un identifiant, par contre, est unique : deux \u00e9l\u00e9ments HTML ne doivent pas avoir le m\u00eame identifiant.</li> </ul>"},{"location":"premiere/06_web/cours_HTML/#2-structure-generale-du-fichier-html","title":"2. Structure g\u00e9n\u00e9rale du fichier HTML","text":"<p>La structure globale d'une page HTML est toujours la m\u00eame (l'indentation est utilis\u00e9e pour la lisibilit\u00e9 du code, mais elle n'est pas n\u00e9cessaire):</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Ma page de test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;img src=\"chat.png\" alt=\"Mon chat\"&gt;\n    &lt;p&gt;Voici la photo de mon chat &lt;strong&gt;F\u00e9lix&lt;/strong&gt;.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Nous y trouvons :</p> <ul> <li><code>&lt;!DOCTYPE html&gt;</code> \u2014 le doctype. Au d\u00e9but de HTML, dans les ann\u00e9es 1991-1992, les doctypes \u00e9taient utilis\u00e9s pour faire r\u00e9f\u00e9rence \u00e0 des ensembles de r\u00e8gles qu'on pouvait utiliser pour dire qu'un document \u00e9tait du HTML \u00ab valide \u00bb et d\u00e9tecter les erreurs de balisage. Cependant, ceux-ci ne sont plus utilis\u00e9s aujourd'hui et sont juste pr\u00e9sents pour s'assurer que la page puisse fonctionner y compris sur les anciens navigateurs. C'est tout ce qu'il y a \u00e0 savoir \u00e0 propos des doctypes.</li> <li><code>&lt;html&gt;&lt;/html&gt;</code> \u2014 l'\u00e9l\u00e9ment <code>&lt;html&gt;</code>. Cet \u00e9l\u00e9ment encadre tout le contenu de la page. Cet \u00e9l\u00e9ment est parfois appel\u00e9 l'\u00e9l\u00e9ment racine.</li> <li><code>&lt;head&gt;&lt;/head&gt;</code> \u2014 l'\u00e9l\u00e9ment <code>&lt;head&gt;</code>. Cet \u00e9l\u00e9ment est utilis\u00e9 comme un conteneur pour toutes les choses qui font partie de la page HTML, mais qui ne sont pas du contenu affich\u00e9. C'est dans cet \u00e9l\u00e9ment qu'on mettra des mots-cl\u00e9s, une description de la page qui appara\u00eetra sur les moteurs de recherche, les liens vers les fichiers CSS \u00e0 utiliser pour la mise en forme, les d\u00e9clarations des jeux de caract\u00e8res \u00e0 utiliser et ainsi de suite.</li> <li><code>&lt;body&gt;&lt;/body&gt;</code> \u2014 l'\u00e9l\u00e9ment <code>&lt;body&gt;</code>. Cet \u00e9l\u00e9ment est celui qui contient tout le contenu que vous souhaitez afficher pour qu'il soit vu par les visiteurs : cela peut \u00eatre du texte, des images, des vid\u00e9os, des jeux, des pistes audio jouables, et ainsi de suite.</li> </ul> <p>Cette structure peut \u00eatre repr\u00e9sent\u00e9e sous forme d'arbre. Chaque \u00e9l\u00e9ment \\(B\\) situ\u00e9 dans un \u00e9l\u00e9ment \\(A\\) est consid\u00e9r\u00e9 comme le fils de cet \u00e9l\u00e9ment \\(A\\).</p> <p>Voici l'arbre repr\u00e9sentant le fichier HTML ci-dessus :</p> <pre><code>graph TB\n    A[html] --&gt; B[head]\n    A --&gt; C[body]\n    B --&gt; D[meta]\n    B --&gt; E[title]\n    C --&gt; F[img]\n    C --&gt; G[p]\n    G --&gt; H[strong]</code></pre>"},{"location":"premiere/06_web/cours_HTML/#3-ressources-pour-approfondir","title":"3. Ressources pour approfondir","text":"<ul> <li>Excellente ressource pour apprendre le HTML, le CSS et JavaScript : MDN Web Docs de Mozilla. Cerise sur le g\u00e2teau : le site est disponible en fran\u00e7ais.</li> <li>Incontournable, mais en anglais, les tutoriels de w3Schools.</li> <li>Le cours classique, gratuit et en fran\u00e7ais du site OpenClassroom.</li> </ul>"},{"location":"premiere/06_web/cours_HTTP/","title":"HTTP : Explications et compl\u00e9ments","text":"<p>HTTP signifie HyperText Transfer Protocol : avec le langage HTML et les adresses web (URL), ce protocole est l'une des trois fondations du World Wide Web.</p> <p>HTTP est un protocole servant \u00e0 transmettre des documents hyperm\u00e9dias, comme HTML. Il a \u00e9t\u00e9 con\u00e7u pour la communication entre les navigateurs web et les serveurs web, mais peut \u00e9galement \u00eatre utilis\u00e9 \u00e0 d'autres fins. Il suit le mod\u00e8le classique client-serveur : un client ouvre une connexion, effectue une requ\u00eate et attend jusqu'\u00e0 recevoir une r\u00e9ponse. Il s'agit aussi d'un protocole sans \u00e9tat, ce qui signifie que le serveur ne conserve aucune donn\u00e9e (on parle d'\u00e9tat) entre deux requ\u00eates.</p> <p>Un protocole est tout simplement un ensemble de r\u00e8gles. Dans un contexte r\u00e9seau, un protocole est un ensemble de r\u00e8gles qui r\u00e9gissent les \u00e9changes de donn\u00e9es.</p>"},{"location":"premiere/06_web/cours_HTTP/#1-architecture-client-serveur-et-http","title":"1. Architecture client-serveur et HTTP","text":"<p>De fa\u00e7on sch\u00e9matique, Internet fonctionne selon le mod\u00e8le d'architecture client-serveur. </p> <ul> <li>le client envoie des requ\u00eates (des demandes) et attend une r\u00e9ponse ; la requ\u00eate, par exemple, peut consister \u00e0 demander le chargement d'une page web ;</li> <li>le serveur re\u00e7oit les requ\u00eates et envoie une r\u00e9ponse ; par exemple, il envoie la page HTML ou encore un message sp\u00e9cifique si la page demand\u00e9e n'existe pas.</li> </ul> <p>Remarquons que le serveur re\u00e7oit simultan\u00e9ment des requ\u00eates de plusieurs clients.</p> <p></p> <p>Le protocole HTTP est donc l'ensemble des r\u00e8gles qui permettent le dialogue entre le serveur et les cliens.</p> <p>Remarque</p> <p>En r\u00e9alit\u00e9 le client et le serveur sont des logiciels et non des ordinateurs. On appelle cependant couramment serveur la machine sur laquelle tourne le programme serveur et client la machine sur laquelle tourne le programme client.</p> <p>Dans le cadre de ce cours le client est le navigateur internet.</p> <p>Par d\u00e9faut, le protocole HTTP n'est pas s\u00e9curis\u00e9, les donn\u00e9es (texte de la requ\u00eate et r\u00e9ponse) circulent donc de fa\u00e7on ouverte dans le r\u00e9seau. Il peut cependant \u00eatre s\u00e9curis\u00e9 en utilisant un protocole de cryptage SSL ou TLS et il s'appelle dans ce cas HTTPS. </p> <p>Remarque</p> <p>En r\u00e9alit\u00e9, le client est \u00e9galement connect\u00e9 \u00e0 plusieurs serveurs. Un document complet est construit \u00e0 partir de diff\u00e9rents sous-documents qui sont r\u00e9cup\u00e9r\u00e9s, par exemple du texte, des descriptions de mise en page, des images, des vid\u00e9os, des scripts et bien plus. Ces diff\u00e9rents \u00e9l\u00e9ments proviennent souvent de diff\u00e9rents serveurs.</p> <p></p> <p>Autre simplification effectu\u00e9e dans ce cours : en r\u00e9alit\u00e9, plusieurs machines se trouvent sur le chemin de l'information entre le client et le serveur. Ces machines sont d\u00e9sign\u00e9es de fa\u00e7on g\u00e9n\u00e9rique sous le terme proxies. Celles-ci ex\u00e9cutent diff\u00e9rentes op\u00e9rations et agissent comme passerelles ou comme caches par exemple.</p> <p></p>"},{"location":"premiere/06_web/cours_HTTP/#2-requetes-et-reponses","title":"2. Requ\u00eates et r\u00e9ponses","text":"<p>C\u00f4t\u00e9 client, le navigateur envoie une requ\u00eate initiale pour r\u00e9cup\u00e9rer le document HTML depuis la page. Ensuite, il analyse le fichier et r\u00e9cup\u00e8re les requ\u00eates additionnelles qui correspondent aux scripts, aux informations de mise en page (CSS) et les sous-ressources contenues dans la page (g\u00e9n\u00e9ralement des images et des vid\u00e9os). Le navigateur web assemble alors ces ressources pour pr\u00e9senter un document complet \u00e0 l'utilisateur : c'est la page web. Les scripts ex\u00e9cut\u00e9s par le navigateur peuvent permettre de r\u00e9cup\u00e9rer plus de ressources par la suite afin de mettre \u00e0 jour la page web.</p> <p>Une page web est un document hypertexte. Cela signifie que certaines parties sont des liens qui peuvent \u00eatre activ\u00e9s (g\u00e9n\u00e9ralement avec un clic de souris) afin de r\u00e9cup\u00e9rer une nouvelle page web, permettant \u00e0 l'utilisateur de diriger son agent utilisateur et de naviguer sur le Web. Le navigateur traduit ces instructions en requ\u00eates HTTP et interpr\u00e8te les r\u00e9ponses HTTP pour pr\u00e9senter une r\u00e9ponse claire \u00e0 l'utilisateur.</p> <p>C\u00f4t\u00e9 serveur, le serveur sert (envoie) le document demand\u00e9 par le client. Bien qu'on pr\u00e9sente virtuellement le serveur comme un seul ordinateur, en r\u00e9alit\u00e9, il peut s'agir d'un ensemble de serveurs se r\u00e9partissant la charge (load balancing) ou d'une architecture logicielle complexe qui interroge d'autres serveurs (par exemple un cache, un serveur de base de donn\u00e9es, serveur d'e-commerce\u2026), qui g\u00e9n\u00e8rent totalement ou partiellement le document \u00e0 la demande.</p> <p>D'une part, un serveur n'est pas n\u00e9cessairement une machine unique et d'autre part, plusieurs serveurs peuvent \u00eatre h\u00e9berg\u00e9s sur une m\u00eame machine.</p>"},{"location":"premiere/06_web/cours_HTTP/#anatomie-dune-requete","title":"Anatomie d'une requ\u00eate","text":"<p>Voici un exemple de requ\u00eate : </p> <p></p> <p>On trouve les \u00e9l\u00e9ments suivants : </p> <ul> <li>la m\u00e9thode HTTP, ici <code>GET</code>. On utilisera aussi la m\u00e9thode <code>POST</code> avec les formulaires ;</li> <li>le chemin de la ressource : ce chemin est calcul\u00e9 par le navigateur \u00e0 partir de l'URL ;</li> <li>la version du protocole <code>HTTP/1.1</code> ou <code>HTTP/2</code>.</li> <li>les en-t\u00eates optionnels qui transmettent des informations suppl\u00e9mentaires pour les serveurs ;</li> </ul> <p>Consid\u00e9rons la page web <code>mapageweb.html</code> suivante, h\u00e9berg\u00e9e en ligne \u00e0 cette adresse. : </p> HTML<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt; Ma page web &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p id=\"p1\"&gt;Bonjour&lt;/p&gt;\n    &lt;p id=\"p2\"&gt;Bonsoir&lt;/p&gt;\n    &lt;p id=\"p3\"&gt;Au revoir !&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Lorsque cette page est charg\u00e9e dans le navigateur, les outils de d\u00e9veloppement (F12, puis onglet R\u00e9seau) permettent de visualiser les requ\u00eates envoy\u00e9es :</p> <p></p> <p></p> <p>Nous voyons qu'en fait deux requ\u00eates ont \u00e9t\u00e9 envoy\u00e9es, car le navigateur charge automatiquement l'ic\u00f4ne du site.</p>"},{"location":"premiere/06_web/cours_HTTP/#anatomie-dune-reponse","title":"Anatomie d'une r\u00e9ponse","text":"<p>Voici un exemple de r\u00e9ponse :</p> <p></p> <p>On trouve les \u00e9l\u00e9ments suivants :</p> <ul> <li>la version du protocole ;</li> <li>un code de statut, qui indique si la requ\u00eate a r\u00e9ussi ou non. Les plus courants sont 200 (ok), 404 (not found), 500 (Internal Server Error). La liste compl\u00e8te est disponible ici.</li> <li>un message de statut qui est une description rapide, informelle, du code de statut ;</li> <li>les en-t\u00eates HTTP, comme pour les requ\u00eates ;</li> <li>\u00e9ventuellement un corps contenant la ressource r\u00e9cup\u00e9r\u00e9e.</li> </ul> <p>Dans l'exemple du chargement de la page <code>mapageweb.html</code> suivante, h\u00e9berg\u00e9e en ligne \u00e0 cette adresse, voici la r\u00e9ponse du serveur :</p> HTTP<pre><code>HTTP/1.1 200 OK\nAccept-Ranges: bytes\nConnection: keep-alive\nContent-Length: 170\nContent-Type: text/html\nDate: Thu, 03 Nov 2022 10:25:22 GMT\nLast-Modified: Thu, 03 Nov 2022 09:46:27 GMT\nServer: o2switch-PowerBoost-v3\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt; Ma page web &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p id=\"p1\"&gt;Bonjour&lt;/p&gt;\n    &lt;p id=\"p2\"&gt;Bonsoir&lt;/p&gt;\n    &lt;p id=\"p3\"&gt;Au revoir !&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"premiere/06_web/cours_HTTP/#3-pour-aller-plus-loin","title":"3. Pour aller plus loin","text":"<ul> <li>Excellente ressource pour tout savoir sur HTTP : MDN Web Docs de Mozilla. Cerise sur le g\u00e2teau : le site est disponible en fran\u00e7ais.</li> <li>Plus difficile, mais tr\u00e8s complet (se limiter \u00e0 la partie 1) : le cours de Pierre Giraud. Attention, seule la version en ligne est gratuite !</li> </ul>"},{"location":"premiere/06_web/cours_JS/","title":"Javascript : Explications et compl\u00e9ments","text":"<p>Les scripts Javascript permettent des interactions entre l'utilisateur et une page web \u00e0 partir d'\u00e9l\u00e9ments graphiques inclus dans la page et de l'interception d'\u00e9v\u00e9nements auxquels sont associ\u00e9s des fonctions.</p> <p>JavaScript (souvent abr\u00e9g\u00e9 en \u00ab JS \u00bb) est un langage de script l\u00e9ger principalement connu comme le langage de script des pages web. Mais il est aussi utilis\u00e9 dans de nombreux environnements ext\u00e9rieurs aux navigateurs web. Le code JavaScript est interpr\u00e9t\u00e9 \u00e0 la vol\u00e9e par le navigateur internet.</p> <p>JavaScript a \u00e9t\u00e9 cr\u00e9\u00e9 en 1995 par Brendan Eich et int\u00e9gr\u00e9 au navigateur web Netscape Navigator 2.0. L'impl\u00e9mentation concurrente de JavaScript par Microsoft dans Internet Explorer jusqu'\u00e0 sa version 9 se nommait JScript, tandis que celle d'Adobe Systems se nommait ActionScript. JavaScript a \u00e9t\u00e9 standardis\u00e9 sous le nom d'ECMAScript en juin 1997 par Ecma International dans le standard ECMA-262. La version en vigueur de ce standard depuis juin 2022 est la 13e \u00e9dition. </p> <p>JavaScript ne doit pas \u00eatre confondu avec le langage de programmation Java. Java et JavaScript sont deux marques d\u00e9pos\u00e9es par Oracle dans de nombreux pays, mais ces deux langages de programmation ont chacun une syntaxe, une s\u00e9mantique et des usages diff\u00e9rents.</p> <p>\u00c0 savoir</p> <p>Une page Web moderne, re\u00e7ue par un client, comporte au moins trois composants logiciels :</p> <ul> <li>HTML pour la structure du document.</li> <li>CSS pour le param\u00e9trage de l'apparence des \u00e9l\u00e9ments et leur positionnement.</li> <li>Javascript pour la d\u00e9finition de programmes qui vont r\u00e9agir \u00e0 des \u00e9v\u00e9nements d\u00e9clench\u00e9s par l'utilisateur de la page et modifier la structure de donn\u00e9es de la page (\u00e9l\u00e9ments HTML et styles CSS).</li> </ul> <p>L'environnement d'ex\u00e9cution d'un code Javascript est confin\u00e9 \u00e0 l'onglet de la page Web o\u00f9 il est charg\u00e9. Pour des raisons de s\u00e9curit\u00e9 il ne doit pas interagir avec d'autres pages ou des ressources du poste client. Par ailleurs, si on recharge la page aupr\u00e8s du serveur, l'environnement Javascript est r\u00e9initialis\u00e9 et les modifications de la page effectu\u00e9es par un code Javascript ne sont pas r\u00e9percut\u00e9es sur la page source disponible sur le serveur.</p> <p>Nous reparlerons plus en d\u00e9tail dans une autre partie du cours des notions de client, serveur et de la fa\u00e7on dont ils communiquent entre eux.</p>"},{"location":"premiere/06_web/cours_JS/#1-elements-de-base-du-langage","title":"1. \u00c9l\u00e9ments de base du langage","text":"<p>Il ne s'agit pas ici de donner une description compl\u00e8te du langage Javascript, mais de fournir quelques rep\u00e8res qui pourront \u00eatre compl\u00e9t\u00e9s en consultant les ressources donn\u00e9es en bas de cette page.</p> <p>Javascript est, comme Python, un langage \u00e0 typage dynamique : il n'est pas n\u00e9cessaire de d\u00e9clarer le type des variables \u00e0 leur cr\u00e9ation.</p> <p>La cr\u00e9ation d'une variable doit cependant \u00eatre d\u00e9clar\u00e9e \u00e0 l'aide de l'instruction <code>let</code> ou de l'instruction <code>var</code>. La diff\u00e9rence entre ces deux instructions est leur port\u00e9e : <code>let</code> d\u00e9finit une variable locale, limit\u00e9e \u00e0 un bloc ; <code>var</code> d\u00e9finit une variable globale.</p> JavaScript<pre><code>let ma_variable = \"toto\"\n</code></pre> <p>Les blocs d'instruction sont d\u00e9limit\u00e9s par des accolades alors qu'en Python ils le sont par l'indentation. Cette derni\u00e8re n'a donc pas de sens en Javascript, mais elle peut \u00eatre quand m\u00eame utilis\u00e9e pour rendre le texte plus lisible. La fin d'une ligne d'instructions est mat\u00e9rialis\u00e9e par un point virgule <code>;</code>.</p> <p>Les commentaires sont pr\u00e9c\u00e9d\u00e9s de <code>//</code>.</p> <p>Op\u00e9rateurs de base</p> Op\u00e9rateurs Description <code>=</code> affectation <code>*</code> multiplication <code>/</code> division <code>**</code> puissance <code>== ou ===</code> \u00e9galit\u00e9 <code>!= ou !===</code> diff\u00e9rence <code>&amp;&amp;</code> et logique <code>||</code> ou logique <code>!</code> n\u00e9gation logique <p>Fonctions</p> <p>Les fonctions sont d\u00e9finies par l'instruction <code>function</code>.</p> JavaScript<pre><code>function f(x) {\nreturn 2 * x ** 2 + 5;\n}\n</code></pre> <p>Structures conditionnelles</p> JavaScript<pre><code>function juge(x) {\nif (x &gt; 10){\nconsole.log(\"Tu as la moyenne.\");\n}\nelse {\nconsole.log(\"Tu n'as pas la moyenne.\");\n}\n}\n</code></pre> <p>Remarque</p> <p>La fonction <code>console.log()</code> permet d'afficher des \u00e9l\u00e9ments dans la console Javascript visible dans les outils de d\u00e9veloppement du navigateur.</p> <p>Boucles</p> JavaScript<pre><code>let str = '';\n\nfor (let i = 0; i &lt; 9; i++) {\nstr = str + i;\n}\n\nconsole.log(str);\n// sortie attendue : \"012345678\"\n</code></pre> JavaScript<pre><code>let n = 0;\n\nwhile (n &lt; 3) {\nn++;\n}\n\nconsole.log(n);\n// sortie attendue : 3\n</code></pre>"},{"location":"premiere/06_web/cours_JS/#2-interaction-avec-la-page-web","title":"2. Interaction avec la page web","text":"<p>Du point de vue de Javascript, la page web est un arbre HTML (voir le cours pr\u00e9c\u00e9dent).</p> <p>La page web dans son ensemble est repr\u00e9sent\u00e9e par l'objet <code>document</code>.</p> <p>Pour acc\u00e9der aux \u00e9l\u00e9ments HTML, il existe plusieurs solutions : par leur classe CSS, par leur nom, mais le plus simple est l'acc\u00e8s par leur identifiant, en utilisant <code>getElementById</code>.</p> <p>Une fois un \u00e9l\u00e9ment HTML s\u00e9lectionn\u00e9, son contenu est repr\u00e9sent\u00e9 par <code>innerHTML</code>et il peut \u00eatre modifi\u00e9.</p> <p>On peut aussi acc\u00e9der aux et modifier les diff\u00e9rentes r\u00e8gles CSS en utilisant une syntaxe du type `element.style.regle = ...'.</p> <p>Toutes ces instructions sont illustr\u00e9es par l'exemple ci-dessous. La page web \u00e9tant charg\u00e9e dans le navigateur, on peut entrer les instructions Javascript ligne par ligne dans la console.</p> HTML<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt; Ma page web &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p id=\"p1\"&gt;Bonjour&lt;/p&gt;\n    &lt;p id=\"p2\"&gt;Bonsoir&lt;/p&gt;\n    &lt;p id=\"p3\"&gt;Au revoir !&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JavaScript<pre><code>// s\u00e9lection de premier paragraphe et remplacement de son contenu\nlet para = document.getElementById(\"p1\");\npara.innerHTML = \"Hello !\";\n\n// s\u00e9lection du second paragraphe et application de style\nlet paragra = document.getElementById(\"p3\");\nparagra.style.color = \"red\";\nparagra.style.textAlign = \"center\";\n</code></pre>"},{"location":"premiere/06_web/cours_JS/#3-programmation-evenementielle","title":"3. Programmation \u00e9v\u00e9nementielle","text":"<p>Programmation \u00e9v\u00e9nementielle</p> <p>JavaScript utilise la programmation \u00e9v\u00e9nementielle dans laquelle l'ex\u00e9cution d'actions est d\u00e9clench\u00e9e automatiquement lorsqu'un \u00e9v\u00e9nement survient. Un \u00e9v\u00e9nement correspond en g\u00e9n\u00e9ral \u00e0 un changement d'\u00e9tat dans le contexte du programme, ou bien \u00e0 une intervention explicite de l'utilisateur (ou d'un syst\u00e8me externe). La programmation \u00e9v\u00e9nementielle est souvent utilis\u00e9e dans les cas suivants :</p> <ul> <li> <p>La programmation d'automates (syst\u00e8mes de r\u00e9gulation par exemple). Par exemple : <code>temp\u00e9rature &lt; 20 \u2192 d\u00e9clencher chauffage ;</code></p> </li> <li> <p>La programmation d'interface graphique. En effet, chaque action de l'utilisateur (clic souris, etc.) peut \u00eatre vue comme un \u00e9v\u00e9nement.</p> </li> </ul> <p>Le programme sera principalement d\u00e9fini par ses r\u00e9actions aux diff\u00e9rents \u00e9v\u00e9nements qui peuvent se produire, c'est-\u00e0-dire des changements d'\u00e9tat de variable (par exemple l'incr\u00e9mentation d'une liste),, un d\u00e9placement ou un click de souris, une saisie au clavier\u2026</p> <p>De nombreux types d'\u00e9v\u00e9nements peuvent \u00eatre d\u00e9tect\u00e9s, par exemple : </p> <ul> <li><code>onload</code> : la page web est charg\u00e9e ;</li> <li><code>onkeypress</code> : une touche est press\u00e9e ;</li> <li><code>onclick</code> : clic gauche sur un \u00e9l\u00e9ment ;</li> <li><code>onmouseover</code> : le pointeur de la souris passe sur un \u00e9l\u00e9ment.</li> </ul> <p>Une liste compl\u00e8te est disponible sur le site W3Schools.</p> <p>Pour associer une fonction \u00e0 un \u00e9v\u00e9nement, on ajoute un attribut portant le nom de cet \u00e9v\u00e9nement \u00e0 l'\u00e9l\u00e9ment HTML consid\u00e9r\u00e9.</p> <p>Par exemple, dans le code ci-dessous, la fonction <code>maFonction()</code> sera ex\u00e9cut\u00e9e d\u00e8s que la page aura \u00e9t\u00e9 charg\u00e9e dans le navigateur.</p> HTML<pre><code> &lt;body onload=\"maFonction()\"&gt; \n</code></pre> <p>Le code Javascript de <code>maFonction</code> \u00e9tant quant \u00e0 lui situ\u00e9 dans un fichier de script s\u00e9par\u00e9 d\u00e9clar\u00e9 dans la section <code>&lt;head&gt;</code>de la page HTML.</p>"},{"location":"premiere/06_web/cours_JS/#4-ressources-pour-aller-plus-loin","title":"4. Ressources pour aller plus loin","text":"<p>De tr\u00e8s nombreuses ressources existent pour apprendre Javascript.</p> <ul> <li>Excellente ressource pour apprendre le HTML, le CSS et JavaScript : MDN Web Docs de Mozilla. Cerise sur le g\u00e2teau : le site est disponible en fran\u00e7ais.</li> <li>Incontournable, mais en anglais, les tutoriels de w3Schools.</li> <li>Plus difficile, mais tr\u00e8s complet : le cours de Pierre Giraud. Attention, seule la version en ligne est gratuite !</li> </ul>"},{"location":"premiere/06_web/cours_forms/","title":"Formulaires : Explications et compl\u00e9ments","text":"<p>Les formulaires Web sont l'un des principaux points d'interaction entre un utilisateur et un site Web. Les formulaires permettent aux utilisateurs de saisir des donn\u00e9es, qui sont g\u00e9n\u00e9ralement envoy\u00e9es \u00e0 un serveur Web pour traitement et stockage, ou utilis\u00e9es c\u00f4t\u00e9 client pour mettre \u00e0 jour imm\u00e9diatement l'interface d'une mani\u00e8re ou d'une autre (par exemple, ajouter un autre \u00e9l\u00e9ment \u00e0 une liste, ou afficher ou masquer une fonctionnalit\u00e9 de l'interface utilisateur).</p>"},{"location":"premiere/06_web/cours_forms/#1-de-nouveaux-elements-html","title":"1. De nouveaux \u00e9l\u00e9ments HTML","text":"<p>La cr\u00e9ation de formulaire repose sur l'utilisation de nouveaux \u00e9l\u00e9ments HTML, parmi lesquels :</p> <ul> <li><code>&lt;form&gt;</code> : \u00e9l\u00e9ment qui contient tous les autres \u00e9l\u00e9ments de formulaire.</li> <li><code>&lt;input&gt;</code> : zone de texte o\u00f9 l'utilisateur peut \u00e9crire un texte court. Cet \u00e9l\u00e9ment poss\u00e8de un attribut particulier nomm\u00e9 type qui modifie beaucoup son comportement. Par exemple, <code>type = \"email\"</code> obligera l'utilisateur \u00e0 entrer une adresse mail bien format\u00e9e. Voir cette page pour d\u00e9couvrir d'autres valeurs possibles de l'attribut type.</li> <li><code>&lt;button&gt;</code> : bouton cliquable qui, dans le cadre des formulaires, peuvent avoir l'attribut <code>type=\"submit\"</code> pour servir \u00e0 envoyer les donn\u00e9es du formulaire, ou <code>type=\"reset\"</code> pour servir \u00e0 vider tous les champs du formulaire.</li> </ul> <p>Il existe bien d'autres \u00e9l\u00e9ments de formulaire, il n'est pas question d'en faire une liste compl\u00e8te ici. Voir les ressources suppl\u00e9mentaires en bas de page pour en savoir plus.</p>"},{"location":"premiere/06_web/cours_forms/#2-fonctionnement-dun-formulaire","title":"2. Fonctionnement d'un formulaire","text":"<p>Pour comprendre le fonctionnement d'un formulaire, il faut se souvenir de l'architecture client/serveur d\u00e9j\u00e0 \u00e9voqu\u00e9e.</p> <p></p> <p>Le formulaire, permet de transmettre des informations \u00e0 un serveur. Ces informations sont envoy\u00e9es par le client (le navigateur) lorsque le bouton de type <code>submit</code> est cliqu\u00e9.</p> <p>Comme nous l'avons vu dans l'activit\u00e9, les attributs action et method de l'\u00e9l\u00e9ment <code>&lt;form&gt;</code> d\u00e9finissent le fonctionnement du formulaire :</p> <ul> <li>action a pour valeur l'URL du fichier auquel sera envoy\u00e9 le formulaire. Ce fichier est un programme \u00e9crit dans un langage de script comme PHP ou Python, qui va prendre en entr\u00e9e les param\u00e8tres du formulaire transmis par le client, les traiter et g\u00e9n\u00e9rer la page Web en HTML qui lui sera renvoy\u00e9e.</li> <li> <p>method peut prendre deux valeurs GET ou POST (en minuscule ou majuscule), ce sont les deux modes de transmission des param\u00e8tres du formulaire qui sont deux m\u00e9thodes distinctes du protocole HTTP :</p> <ul> <li>avec la m\u00e9thode GET , les donn\u00e9es du formulaire sont assembl\u00e9es dans une cha\u00eene de paires nom/valeur s\u00e9par\u00e9es par le symbole <code>&amp;</code> qui est ajout\u00e9e \u00e0 la fin de l'URL apr\u00e8s le d\u00e9limiteur <code>?</code>.</li> <li>avec la m\u00e9thode POST les donn\u00e9es du formulaire sont toujours transmises dans le corps de la requ\u00eate. Les donn\u00e9es n'apparaissent donc pas dans l'URL.</li> </ul> </li> </ul> <p></p> <p>Diff\u00e9rences entre les m\u00e9thodes GET et POST</p> <p>Caract\u00e9ristiques de la m\u00e9thode GET :</p> <ul> <li>Toutes les informations transmises, le sont en clair dans l'URL. Celle-ci est limit\u00e9e en taille donc la m\u00e9thode GET ne peut pas \u00eatre utilis\u00e9e pour transmettre des informations trop longues.</li> <li>Une requ\u00eate GET est constitu\u00e9e uniquement d'un ent\u00eate, elle n'a pas de corps.</li> <li>Elle ne modifie pas l'\u00e9tat du serveur, elle est utilis\u00e9e uniquement pour demander une ressource. Un exemple classique d'utilisation est la formulation d'une requ\u00eate \u00e0 l'aide du formulaire d'un moteur de recherche. L'URL g\u00e9n\u00e9r\u00e9e peut \u00eatre utilis\u00e9e plusieurs fois et conserv\u00e9e comme marque-page.</li> </ul> <p>Caract\u00e9ristiques de la m\u00e9thode POST :</p> <ul> <li>Les donn\u00e9es sont transmises dans le corps de la requ\u00eate, il n'y a pas de restriction de taille. Elles peuvent \u00eatre de tout type : textes, binaires...</li> <li>Les donn\u00e9es n'apparaissent pas dans l'URL, n\u00e9anmoins, si le protocole HTTP est employ\u00e9 sans chiffrement, il suffit d'intercepter la requ\u00eate pour acc\u00e9der aux donn\u00e9es en clair.</li> <li>Les donn\u00e9es envoy\u00e9es peuvent modifier l'\u00e9tat du serveur. Par exemple, les requ\u00eates POST sont utilis\u00e9es pour les modifications de bases de donn\u00e9es sur le serveur (achats, r\u00e9servation, transfert de fichiers ...). Par cons\u00e9quent si on veut renvoyer les donn\u00e9es d'un formulaire, un message en popup avertit que ce nouvel envoi peut modifier l'\u00e9tat du serveur.</li> </ul>"},{"location":"premiere/06_web/cours_forms/#3-pour-aller-plus-loin","title":"3. Pour aller plus loin","text":"<ul> <li>W3Schools : r\u00e9f\u00e9rence de tous les \u00e9l\u00e9ments HTML de formulaire avec des exemples interactifs.</li> <li>Le site MDN web docs de Mozilla est une fois de plus une tr\u00e8s bonne r\u00e9f\u00e9rence.</li> </ul>"},{"location":"premiere/06_web/exos_forms/","title":"Exercice : Formulaires","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/06_web/exos_forms/#exercice-qcm","title":"Exercice (QCM)","text":"<ol> <li> <p>Parmi les r\u00e9ponses suivantes, que permet d'effectuer la m\u00e9thode POST du protocole HTTP ?</p> <ul> <li> R\u00e9ponse A : D\u00e9finir le style d'une page web</li> <li> R\u00e9ponse B : Pirater des donn\u00e9es bancaire</li> <li> R\u00e9ponse C : Envoyer une page web vers le client</li> <li> R\u00e9ponse D : Envoyer les donn\u00e9es saisies dans un formulaire HTML vers un serveur</li> </ul> </li> <li> <p>Un site internet utilise une requ\u00eate HTTP avec la m\u00e9thode POST pour transmettre les donn\u00e9es d'un formulaire. Laquelle des affirmations suivantes est incorrecte ?</p> <ul> <li> R\u00e9ponse A : les donn\u00e9es envoy\u00e9es ne sont pas visibles</li> <li> R\u00e9ponse B : il est possible de transmettre des donn\u00e9es de type binaire</li> <li> R\u00e9ponse C : les donn\u00e9es transmises sont crypt\u00e9es</li> <li> R\u00e9ponse D : il n'y a pas de restriction de longueur pour les donn\u00e9es transmises</li> </ul> </li> <li> <p>Un internaute clique sur un lien qui envoie la requ\u00eate HTTP suivante \u00e0 un serveur : http://jaimelaneige.com/ma_planche/traitement.php?nom=Snow&amp;prenom=Jon Que demande cette requ\u00eate au serveur ?</p> <ul> <li> R\u00e9ponse A : de renvoyer le fichier traitement.php en identifiant nom et pr\u00e9nom \u00e0 Snow et Jon</li> <li> R\u00e9ponse B : d'ex\u00e9cuter le fichier traitement.php en identifiant nom et pr\u00e9nom \u00e0 Snow et Jon</li> <li> R\u00e9ponse C : d'indiquer si Jon Snow a bien pris son traitement</li> <li> R\u00e9ponse D : de renvoyer le fichier traitement.php en affichant pr\u00e9nom et nom : Jon</li> </ul> </li> </ol>"},{"location":"premiere/06_web/ref_HTML/","title":"R\u00e9f\u00e9rence des principales balises HTML","text":"<p>Cette page r\u00e9pertorie les \u00e9l\u00e9ments HTML principaux, qui sont cr\u00e9\u00e9s \u00e0 l'aide de balises. Ils sont regroup\u00e9s par fonction pour vous aider \u00e0 trouver facilement ce que vous avez en t\u00eate.</p> <p>Pour une liste compl\u00e8te, reportez-vous au site de Mozilla (excellente ressource en fran\u00e7ais). Les informations de cette page sont extraites de ce site.</p>"},{"location":"premiere/06_web/ref_HTML/#racine-principale","title":"Racine principale","text":"<p>Principales balises HTML</p> Balise Description <code>&lt;html&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;html&gt;</code> repr\u00e9sente la racine d'un document HTML. Tout autre \u00e9l\u00e9ment du document doit \u00eatre un descendant de cet \u00e9l\u00e9ment."},{"location":"premiere/06_web/ref_HTML/#metadonnees","title":"M\u00e9tadonn\u00e9es","text":"<p>Les m\u00e9tadonn\u00e9es contiennent des informations \u00e0 propos de la page. Elles comprennent des informations sur les styles, les scripts et les donn\u00e9es qui aident les programmes (moteur de recherche, navigateurs, etc.) \u00e0 utiliser et \u00e0 rendre la page. Les m\u00e9tadonn\u00e9es relatives aux styles et aux scripts peuvent \u00eatre d\u00e9finies dans la page ou renvoyer \u00e0 un autre fichier contenant ces informations.</p> <p>Principales balises HTML</p> Balise Description <code>&lt;head&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;head&gt;</code> fournit des informations g\u00e9n\u00e9rales (m\u00e9tadonn\u00e9es) sur le document, incluant son titre et des liens ou des d\u00e9finitions vers des scripts et feuilles de style. <code>&lt;link&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;link&gt;</code> d\u00e9finit la relation entre le document courant et une ressource externe. Cet \u00e9l\u00e9ment peut \u00eatre utilis\u00e9 pour d\u00e9finir un lien vers une feuille de style, vers les ic\u00f4nes utilis\u00e9es en barre de titre ou comme ic\u00f4ne d'application sur les appareils mobiles. <code>&lt;style&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;style&gt;</code> contient des informations de mise en forme pour un document ou une partie d'un document. Par d\u00e9faut, les instructions de mise en forme \u00e9crites dans cet \u00e9l\u00e9ment sont \u00e9crites en CSS. <code>&lt;title&gt;</code> L'\u00e9l\u00e9ment <code>&lt;title&gt;</code> d\u00e9finit le titre du document (qui est affich\u00e9 dans la barre de titre du navigateur ou dans l'onglet de la page). Cet \u00e9l\u00e9ment ne peut contenir que du texte, les balises qu'il contiendrait seraient ignor\u00e9es."},{"location":"premiere/06_web/ref_HTML/#structure-du-document","title":"Structure du document","text":"<p>Organiser le contenu d'une page en diff\u00e9rentes sections permet d'avoir une structure logique au sein d'un document. Gr\u00e2ce \u00e0 ces \u00e9l\u00e9ments, on peut cr\u00e9er un plan pour la page, ajouter des titres pour identifier les sections et \u00e9galement g\u00e9rer un en-t\u00eate et un bas de page.</p> <p>On remarquera que, en dehors des balises de titres, ces \u00e9l\u00e9ments HTML ne modifient pas du tout la mise en forme du texte qu'elles contiennent. Ce sont des balises s\u00e9mantiques : elles servent \u00e0 donner du sens au contenu, pour le r\u00e9dacteur de la page. Elles guident aussi l'indexation de la page par les moteurs de recherche.</p> <p>Principales balises HTML</p> Balise Description <code>&lt;body&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;body&gt;</code> repr\u00e9sente le contenu principal du document HTML. Il ne peut y avoir qu'un \u00e9l\u00e9ment <code>&lt;body&gt;</code> par document. <code>&lt;header&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;header&gt;</code> repr\u00e9sente du contenu introductif, g\u00e9n\u00e9ralement un groupe de contenu introductif ou de contenu aidant \u00e0 la navigation. Il peut contenir des \u00e9l\u00e9ments de titre, mais aussi d'autres \u00e9l\u00e9ments tels qu'un logo, un formulaire de recherche, le nom d'auteur, etc. <code>&lt;footer&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;footer&gt;</code> repr\u00e9sente le pied de page de la section ou de la racine de sectionnement la plus proche. Un \u00e9l\u00e9ment <code>&lt;footer&gt;</code> contient habituellement des informations sur l'autrice ou l'auteur de la section, les donn\u00e9es relatives au droit d'auteur  ou les liens vers d'autres documents en relation. <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code> Les \u00e9l\u00e9ments <code>&lt;h1&gt;</code> \u00e0 <code>&lt;h6&gt;</code> repr\u00e9sentent six niveaux de titres dans un document, <code>&lt;h1&gt;</code> est le plus important et <code>&lt;h6&gt;</code> est le moins important. Un \u00e9l\u00e9ment de titre d\u00e9crit bri\u00e8vement le sujet de la section qu'il introduit. <code>&lt;main&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;main&gt;</code> repr\u00e9sente le contenu majoritaire du <code>body</code> du document. Le contenu principal de la zone est constitu\u00e9 de contenu directement en relation, ou qui \u00e9tend le sujet principal du document. <code>&lt;nav&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;nav&gt;</code> repr\u00e9sente une section d'une page ayant des liens vers d'autres pages ou des fragments de cette page. Autrement dit, c'est une section destin\u00e9e \u00e0 la navigation dans un document . <code>&lt;section&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;section&gt;</code> repr\u00e9sente une section g\u00e9n\u00e9rique d'un document, par exemple un groupe de contenu th\u00e9matique. Une section commence g\u00e9n\u00e9ralement avec un titre."},{"location":"premiere/06_web/ref_HTML/#contenu-textuel","title":"Contenu textuel","text":"<p>Le contenu HTML textuel permet d'organiser des blocs ou des sections de contenu entre la balise ouvrante <code>&lt;body&gt;</code> et la balise fermante <code>&lt;/body&gt;</code>. Ces \u00e9l\u00e9ments sont cruciaux pour l'accessibilit\u00e9 et le r\u00e9f\u00e9rencement car ils permettent d'identifier le sens du contenu.</p> <p>Principales balises HTML</p> Balise Description <code>&lt;blockquote&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;blockquote&gt;</code>  indique que le texte contenu dans l'\u00e9l\u00e9ment est une citation longue. Le texte est g\u00e9n\u00e9ralement affich\u00e9 avec une indentation. Une URL indiquant la source de la citation peut \u00eatre donn\u00e9e gr\u00e2ce \u00e0 l'attribut <code>cite</code> tandis qu'un texte repr\u00e9sentant la source peut \u00eatre donn\u00e9 via l'\u00e9l\u00e9ment <code>&lt;cite&gt;</code>. <code>&lt;dd&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;dd&gt;</code> fournit la description, la d\u00e9finition ou la valeur du terme pr\u00e9c\u00e9dent <code>&lt;dt&gt;</code> dans une liste de description <code>&lt;dl&gt;</code>. <code>&lt;div&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;div&gt;</code>  est le conteneur g\u00e9n\u00e9rique de contenu. Il n'a aucun effet sur le contenu ou la mise en page tant qu'il n'est pas mis en forme d'une mani\u00e8re quelconque \u00e0 l'aide de CSS. <code>&lt;dl&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;dl&gt;</code> repr\u00e9sente une liste de descriptions sous la forme d'une liste de paires associant des termes (fournis par des \u00e9l\u00e9ments <code>&lt;dt&gt;</code>) et leurs descriptions ou d\u00e9finitions (fournies par des \u00e9l\u00e9ments <code>&lt;dd&gt;</code>). On utilisera par exemple cet \u00e9l\u00e9ment pour impl\u00e9menter un glossaire. <code>&lt;dt&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;dt&gt;</code> identifie un terme dans une liste de d\u00e9finitions ou de descriptions. Cet \u00e9l\u00e9ment n'appara\u00eet qu'en tant qu'\u00e9l\u00e9ment enfant d'un \u00e9l\u00e9ment <code>&lt;dl&gt;</code> et est g\u00e9n\u00e9ralement suivi d'un \u00e9l\u00e9ment <code>&lt;dd&gt;</code>. Plusieurs \u00e9l\u00e9ments <code>&lt;dt&gt;</code> qui se suivent indiqueront qu'ils partagent la d\u00e9finition/description fournie par le prochain \u00e9l\u00e9ment <code>&lt;dd&gt;</code>. <code>&lt;li&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;li&gt;</code> est utilis\u00e9 pour repr\u00e9senter un \u00e9l\u00e9ment dans une liste. Il doit \u00eatre contenu dans un \u00e9l\u00e9ment parent : une liste ordonn\u00e9e <code>&lt;ol&gt;</code>, une liste non ordonn\u00e9e <code>&lt;ul&gt;</code> ou un menu <code>&lt;menu&gt;</code>. Dans les menus et les listes non ordonn\u00e9es, les \u00e9l\u00e9ments de liste sont habituellement affich\u00e9s en utilisant des puces. Dans les listes ordonn\u00e9es, ils sont habituellement affich\u00e9s avec compteur croissant \u00e0 gauche, tel qu'un nombre ou une lettre. <code>&lt;menu&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;menu&gt;</code> est une alternative s\u00e9mantique \u00e0 <code>&lt;ul&gt;</code>, mais est trait\u00e9 par les navigateurs, et en termes d'accessibilit\u00e9 comme un \u00e9l\u00e9ment <code>&lt;ul&gt;</code>. Il repr\u00e9sente une liste d'\u00e9l\u00e9ments non-ordonn\u00e9e (chaque \u00e9l\u00e9ment de la liste \u00e9tant repr\u00e9sent\u00e9 par un \u00e9l\u00e9ment <code>&lt;li&gt;</code>). <code>&lt;ol&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;ol&gt;</code> repr\u00e9sente une liste ordonn\u00e9e. Les \u00e9l\u00e9ments d'une telle liste sont g\u00e9n\u00e9ralement affich\u00e9s avec un indicateur ordinal pouvant prendre la forme de nombres, de lettres, de chiffres romains ou de points. La mise en forme de la num\u00e9rotation n'est pas utilis\u00e9e dans la description HTML mais dans la feuille de style CSS associ\u00e9e gr\u00e2ce \u00e0 la propri\u00e9t\u00e9 <code>list-style-type</code>. <code>&lt;p&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;p&gt;</code> repr\u00e9sente un paragraphe de texte. Les paragraphes sont g\u00e9n\u00e9ralement repr\u00e9sent\u00e9s comme des blocs et s\u00e9par\u00e9s par un espace vertical, leur premi\u00e8re ligne est \u00e9galement parfois indent\u00e9e. Les paragraphes sont des \u00e9l\u00e9ments blocs. <code>&lt;pre&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;pre&gt;</code> repr\u00e9sente du texte pr\u00e9format\u00e9, g\u00e9n\u00e9ralement \u00e9crit avec une police \u00e0 chasse fixe. Le texte est affich\u00e9 tel quel, les espaces utilis\u00e9s dans le document HTML seront retranscrits. <code>&lt;ul&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;ul&gt;</code> repr\u00e9sente une liste d'\u00e9l\u00e9ments sans ordre particulier. Il est souvent repr\u00e9sent\u00e9 par une liste \u00e0 puces."},{"location":"premiere/06_web/ref_HTML/#semantique-du-texte-en-ligne","title":"S\u00e9mantique du texte en ligne","text":"<p>Les \u00e9l\u00e9ments pour le texte en ligne peuvent \u00eatre utilis\u00e9s pour d\u00e9finir la signification, la structure ou la mise en forme d'un terme, d'une ligne ou d'un fragment de texte.</p> <p>Principales balises HTML</p> Balise Description <code>&lt;a&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;a&gt;</code> (pour ancre ou anchor en anglais), avec son attribut <code>href</code>, cr\u00e9e un lien hypertexte vers des pages web, des fichiers, des adresses e-mail, des emplacements se trouvant dans la m\u00eame page, ou tout ce qu'une URL peut adresser. Le contenu de chaque \u00e9l\u00e9ment <code>&lt;a&gt;</code> doit indiquer la destination du lien. Si l'attribut <code>href</code> est pr\u00e9sent, appuyer sur la touche entr\u00e9e en se concentrant sur l'\u00e9l\u00e9ment <code>&lt;a&gt;</code> l'activera. <code>&lt;abbr&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;abbr&gt;</code> (abr\u00e9viation en fran\u00e7ais) repr\u00e9sente une abr\u00e9viation ou un acronyme ; l'attribut facultatif <code>title</code> peut fournir une explication ou une description de l'abr\u00e9viation. S'il est pr\u00e9sent, <code>title</code> doit contenir cette description compl\u00e8te et rien d'autre. <code>&lt;br&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;br&gt;</code> cr\u00e9e un saut de ligne (un retour chariot) dans le texte. Il s'av\u00e8re utile lorsque les sauts de ligne ont une importance (par exemple lorsqu'on \u00e9crit une adresse ou un po\u00e8me). <code>&lt;cite&gt;</code> L'\u00e9l\u00e9ment <code>&lt;cite&gt;</code> contient le titre d'une \u0153uvre telle qu'un livre, une chanson, un film, une sculpture... Cet \u00e9l\u00e9ment doit inclure le titre de l'\u0153uvre. <code>&lt;code&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;code&gt;</code> repr\u00e9sente un court fragment de code machine. Par d\u00e9faut, l'agent utilisateur utilise une police \u00e0 chasse fixe (monospace) afin d'afficher le texte contenu dans cet \u00e9l\u00e9ment. <code>&lt;em&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;em&gt;</code> (pour emphase) est utilis\u00e9 afin de marquer un texte sur lequel on veut insister. Les \u00e9l\u00e9ments <code>&lt;em&gt;</code> peuvent \u00eatre imbriqu\u00e9s, chaque degr\u00e9 d'imbrication indiquant un degr\u00e9 d'insistance plus \u00e9lev\u00e9. <code>&lt;i&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;i&gt;</code> repr\u00e9sente un morceau de texte qui se diff\u00e9rencie du texte principal. Cela peut par exemple \u00eatre le cas pour des termes techniques, des phrases dans une langue \u00e9trang\u00e8re ou encore l'expression des pens\u00e9es d'un personnage. Le contenu de cet \u00e9l\u00e9ment est g\u00e9n\u00e9ralement affich\u00e9 en italique. <code>&lt;kbd&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;kbd&gt;</code> repr\u00e9sente une plage de texte en ligne indiquant la saisie de texte par l'utilisateur \u00e0 partir d'un clavier, d'une saisie vocale ou de tout autre dispositif de saisie de texte. Par convention, le user agent rend par d\u00e9faut le contenu d'un \u00e9l\u00e9ment <code>&lt;kbd&gt;</code> en utilisant sa police monospace, bien que cela ne soit pas requis par le standard HTML. <code>&lt;mark&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;mark&gt;</code> repr\u00e9sente un texte marqu\u00e9 ou surlign\u00e9 \u00e0 cause de sa pertinence dans le contexte. Il peut par exemple \u00eatre utilis\u00e9 afin d'indiquer les correspondances d'un mot-cl\u00e9 recherch\u00e9 au sein d'un document. <code>&lt;s&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;s&gt;</code> permet d'afficher du texte qui est barr\u00e9 car il n'est plus pertinent ou car il est obsol\u00e8te. <code>&lt;s&gt;</code> ne doit pas \u00eatre employ\u00e9 pour indiquer des \u00e9ditions dans un document . <code>&lt;small&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;small&gt;</code> permet de repr\u00e9senter des commentaires ou des textes \u00e0 \u00e9crire en petits caract\u00e8res (des termes d'un contrat, des mentions relatives au droit d'auteur, etc.) quelle que soit la pr\u00e9sentation. <code>&lt;span&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;span&gt;</code> est un conteneur g\u00e9n\u00e9rique en ligne (inline) pour les contenus phras\u00e9s. Il ne repr\u00e9sente rien de particulier. Il peut \u00eatre utilis\u00e9 pour grouper des \u00e9l\u00e9ments afin de les mettre en forme (gr\u00e2ce aux attributs <code>class</code> ou <code>id</code> et aux r\u00e8gles CSS) ou parce qu'ils partagent certaines valeurs d'attribut comme <code>lang</code>. Il doit uniquement \u00eatre utilis\u00e9 lorsqu'aucun autre \u00e9l\u00e9ment s\u00e9mantique n'est appropri\u00e9. <code>&lt;span&gt;</code> est tr\u00e8s proche de l'\u00e9l\u00e9ment <code>&lt;div&gt;</code>, mais l'\u00e9l\u00e9ment <code>&lt;div&gt;</code> est un \u00e9l\u00e9ment de bloc, alors que <code>&lt;span&gt;</code> est un \u00e9l\u00e9ment en ligne. <code>&lt;strong&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;strong&gt;</code> indique que le texte a une importance particuli\u00e8re ou un certain s\u00e9rieux voire un caract\u00e8re urgent. Cela se traduit g\u00e9n\u00e9ralement par un affichage en gras. <code>&lt;sub&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;sub&gt;</code> est utilis\u00e9, pour des raisons typographiques, afin d'afficher du texte en indice (sous la ligne de base et g\u00e9n\u00e9ralement plus petit) par rapport au bloc de texte environnant. <code>&lt;sup&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;sup&gt;</code> est utilis\u00e9, pour des raisons typographiques, afin d'afficher du texte en exposant (plus haut et g\u00e9n\u00e9ralement plus petit) par rapport au bloc de texte environnant."},{"location":"premiere/06_web/ref_HTML/#images-et-medias","title":"Images et m\u00e9dias","text":"<p>HTML prend en charge diff\u00e9rents fichiers multim\u00e9dias pour les images, les fichiers audio et vid\u00e9o.</p> <p>Principales balises HTML</p> Balise Description <code>&lt;area&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;area&gt;</code> d\u00e9finit une zone particuli\u00e8re d'une image et peut lui associer un [lien hypertexte]. Cet \u00e9l\u00e9ment n'est utilis\u00e9 qu'au sein d'un \u00e9l\u00e9ment <code>&lt;map&gt;</code>. <code>&lt;audio&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;audio&gt;</code> est utilis\u00e9 afin d'int\u00e9grer un contenu sonore dans un document. Il peut contenir une ou plusieurs sources audio repr\u00e9sent\u00e9es avec l'attribut <code>src</code> ou l'\u00e9l\u00e9ment <code>&lt;source&gt;</code> : le navigateur choisira celle qui convient le mieux. <code>&lt;img&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;img&gt;</code> permet d'int\u00e9grer une image dans un document. <code>&lt;map&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;map&gt;</code> est utilis\u00e9 avec des \u00e9l\u00e9ments <code>&lt;area&gt;</code> afin de d\u00e9finir une image cliquable divis\u00e9e en r\u00e9gions. <code>&lt;video&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;video&gt;</code> int\u00e8gre un contenu vid\u00e9o dans un document."},{"location":"premiere/06_web/ref_HTML/#contenu-embarque","title":"Contenu embarqu\u00e9","text":"<p>En plus du contenu multim\u00e9dia, un document HTML peut embarquer d'autres contenus (bien que les interactions soient plut\u00f4t limit\u00e9es).</p> <p>Principales balises HTML</p> Balise Description <code>&lt;embed&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;embed&gt;</code> permet d'int\u00e9grer du contenu externe \u00e0 cet endroit dans le document (par exemple un fichier PDF). <code>&lt;iframe&gt;</code> L'\u00e9l\u00e9ment HTML <code>&lt;iframe&gt;</code> repr\u00e9sente un contexte de navigation imbriqu\u00e9 qui permet en fait d'obtenir une page HTML int\u00e9gr\u00e9e dans la page courante. Souvent utilis\u00e9 pour int\u00e9grer une vid\u00e9o provenant d'une plateforme de streaming."},{"location":"premiere/06_web/ref_HTML/#element-interactif","title":"\u00c9l\u00e9ment interactif","text":"<p>Pour finir voici une derni\u00e8re balise utile :</p> <p>Principales balises HTML</p> Balise Description <code>&lt;details&gt;</code> L '\u00e9l\u00e9ment HTML <code>&lt;details&gt;</code> est utilis\u00e9 comme un outil permettant de r\u00e9v\u00e9ler une information. Un r\u00e9sum\u00e9 ou un intitul\u00e9 peuvent \u00eatre fournis gr\u00e2ce \u00e0 un \u00e9l\u00e9ment <code>&lt;summary&gt;</code>. <code>&lt;summary&gt;</code> L '\u00e9l\u00e9ment HTML <code>&lt;summary&gt;</code> repr\u00e9sente une bo\u00eete permettant de r\u00e9v\u00e9ler le contenu d 'un r\u00e9sum\u00e9 ou d 'une l\u00e9gende pour le contenu d 'un \u00e9l\u00e9ment <code>details</code>. En cliquant sur l '\u00e9l\u00e9ment <code>&lt;summary&gt;</code>, on passe de l '\u00e9tat affich\u00e9 \u00e0 l '\u00e9tat masqu\u00e9 (et vice versa) de l '\u00e9l\u00e9ment <code>&lt;details&gt;</code> parent. <p>Remarque</p> <ul> <li>Les balises concernant les tableaux ne sont pas r\u00e9pertori\u00e9es ici. Voir le site de Mozilla en cas de besoin.</li> <li>Les balises concernant les formulaires et les scripts seront \u00e9tudi\u00e9es plus tard au cours de la s\u00e9quence.</li> </ul>"},{"location":"premiere/06_web/georisques/projet_georisques/","title":"Projet : Risques naturels","text":"<p>L'objectif de ce projet est de produire une page web interactive r\u00e9pondant aux exigences suivantes :</p> <ul> <li>La page affiche une carte g\u00e9ographique interactive de la France (utilisation d\u2019OpenStreetMap).</li> <li>Un clic sur la carte permet de choisir un lieu et de r\u00e9cup\u00e9rer ses coordonn\u00e9es g\u00e9ographiques.</li> <li>Un script interroge alors le service gouvernemental des g\u00e9orisques (https://www.georisques.gouv.fr) et affiche la liste des risques naturels recens\u00e9s dans un rayon de 1000 m\u00e8tres.</li> </ul>"},{"location":"premiere/07_tables/","title":"S7-Traitement de donn\u00e9es en tables","text":""},{"location":"premiere/07_tables/#programme","title":"Programme","text":"<p>Les donn\u00e9es organis\u00e9es en table correspondent \u00e0 une liste de p-uplets nomm\u00e9s qui partagent les m\u00eames descripteurs. La mobilisation de ce type de structure de donn\u00e9es permet de pr\u00e9parer les \u00e9l\u00e8ves \u00e0 aborder la notion de base de donn\u00e9es qui ne sera pr\u00e9sent\u00e9e qu'en classe terminale. Il s'agit d'utiliser un tableau doublement index\u00e9 ou un tableau de p-uplets, dans un langage de programmation ordinaire et non dans un syst\u00e8me de gestion de bases de donn\u00e9es.</p> Contenus Capacit\u00e9s attendues Commentaires Indexation de tables Importer une table depuis un fichier texte tabul\u00e9 ou un fichier CSV. Est utilis\u00e9 un tableau doublement index\u00e9 ou un tableau de p-uplets qui partagent les m\u00eames descripteurs. Recherche dans une table Rechercher les lignes d'une table v\u00e9rifiant des crit\u00e8res exprim\u00e9s en logique propositionnelle. La recherche de doublons, les tests de coh\u00e9rence d'une table sont pr\u00e9sent\u00e9s. Tri d'une table Trier une table suivant une colonne. Une fonction de tri int\u00e9gr\u00e9e au syst\u00e8me ou \u00e0 une biblioth\u00e8que peut \u00eatre utilis\u00e9e. Fusion de tables Construire une nouvelle table en combinant les donn\u00e9es de deux tables. La notion de domaine de valeurs est mise en \u00e9vidence."},{"location":"premiere/07_tables/essentiel/","title":"S7-Traitement de donn\u00e9es en tables - L'essentiel","text":"<ul> <li>Les tables de donn\u00e9es sont tr\u00e8s courantes : les donn\u00e9es sont organis\u00e9es en enregistrements (ligne du tableau) qui sont des p-uplets nomm\u00e9s (en pratique des dictionnaires) partageant les m\u00eames attributs (ent\u00eates de colonnes dans un tableau).</li> <li>Les  tables de donn\u00e9es sont souvent stock\u00e9es sous forme de fichiers CSV : ce sont des fichiers textes o\u00f9 les  enregistrements sont des lignes dont les attributs sont s\u00e9par\u00e9s par un caract\u00e8re d\u00e9limiteur. </li> <li> <p>En Python, une table contenue dans  un fichier  CSV peut \u00eatre repr\u00e9sent\u00e9e dans un tableau de tableaux ou plut\u00f4t un tableau de dictionnaires. Le module csv facilite les op\u00e9rations d'importation et d'exportation de tables \u00e0 partir ou   vers des fichiers CSV.</p> </li> <li> <p>Pour acc\u00e9der aux donn\u00e9es, il faut les rechercher et les regrouper suivant diff\u00e9rents crit\u00e8res.</p> <ul> <li>Lorsqu'on souhaite acc\u00e9der \u00e0 un ou plusieurs enregistrements v\u00e9rifiant un crit\u00e8re, on r\u00e9alise une s\u00e9lection.</li> <li>Lorsqu'on souhaite acc\u00e9der \u00e0 toutes les donn\u00e9es d'une colonne on r\u00e9alise une projection.</li> <li>Ces op\u00e9rations peuvent \u00eatre effectu\u00e9es en faisant une boucle sur l'ensemble des enregistrements ou en d\u00e9finissant un tableau en compr\u00e9hension.</li> </ul> </li> <li> <p>Pour trier les donn\u00e9es, on utilise la fonction int\u00e9gr\u00e9e <code>sorted</code> en pr\u00e9cisant \u00e9ventuellement l'ordre invers\u00e9 (<code>reverse=True</code>) et la fonction crit\u00e8re de classement (<code>key=...</code>).</p> </li> <li> <p>On peut fusionner deux tables pour en cr\u00e9er une troisi\u00e8me. Cette op\u00e9ration est appel\u00e9e jointure. Elle est effectu\u00e9e en Python en r\u00e9alisant deux boucles imbriqu\u00e9es.</p> </li> </ul> <p>Ce qu'il faut savoir faire</p> <ul> <li> Importer une table depuis un fichier texte tabul\u00e9 ou un fichier CSV.</li> <li> Rechercher les lignes d'une table v\u00e9rifiant des crit\u00e8res exprim\u00e9s par une condition logique.</li> <li> Trier une table suivant une colonne.</li> <li> Construire une nouvelle table en combinant les donn\u00e9es de deux tables.</li> </ul>"},{"location":"premiere/07_tables/quiz/","title":"Quiz : Donn\u00e9es en tables","text":"<ol> <li> <p>Dans la plupart des fichiers CSV, que contient la premi\u00e8re ligne ?</p> <ul> <li> R\u00e9ponse A : des notes concernant la table de donn\u00e9es</li> <li> R\u00e9ponse B : les sources des donn\u00e9es</li> <li> R\u00e9ponse C : les descripteurs des champs de la table de donn\u00e9es</li> <li> R\u00e9ponse D : l'auteur de la table de donn\u00e9es</li> </ul> </li> <li> <p>Laquelle de ces affirmations est vraie ?</p> <ul> <li> R\u00e9ponse A : on ne peut acc\u00e9der au contenu d'un fichier CSV que par   l'interm\u00e9diaire d'un programme Python</li> <li> R\u00e9ponse B : CSV est un format de chiffrement des donn\u00e9es</li> <li> R\u00e9ponse C : le format CSV a \u00e9t\u00e9 con\u00e7u pour assurer la confidentialit\u00e9 d'une   partie du code d'un programme</li> <li> R\u00e9ponse D : les fichiers CSV sont compos\u00e9s de donn\u00e9es s\u00e9par\u00e9es par des caract\u00e8res   comme des virgules</li> </ul> </li> <li> <p>Qu'est-ce que le format de fichier CSV ?</p> <ul> <li> R\u00e9ponse A : un format de fichier mis au point par Microsoft pour Excel</li> <li> R\u00e9ponse B : un format de fichier pour d\u00e9crire une base de donn\u00e9es</li> <li> R\u00e9ponse C : un format de fichier o\u00f9 les donn\u00e9es sont s\u00e9par\u00e9es par un caract\u00e8re tel   qu'une virgule</li> <li> R\u00e9ponse D : un format de fichier d\u00e9crivant une page Web</li> </ul> </li> <li> <p>On consid\u00e8re l'extraction suivante d'une base de donn\u00e9es des d\u00e9partements fran\u00e7ais. Cette extraction a ensuite \u00e9t\u00e9 sauvegard\u00e9e dans un fichier texte.</p> CSV<pre><code>\"1\",\"01\",\"Ain\",\"AIN\",\"ain\",\"A500\"\n\"2\",\"02\",\"Aisne\",\"AISNE\",\"aisne\",\"A250\"\n\"3\",\"03\",\"Allier\",\"ALLIER\",\"allier\",\"A460\"\n\"4\",\"04\",\"Alpes-de-Haute-Provence\",\"ALPES-DE-HAUTE-PROVENCE\",\"alpes-de-haute-provence\",\"A412316152\"\n\"5\",\"05\",\"Hautes-Alpes\",\"HAUTES-ALPES\",\"hautes-alpes\",\"H32412\"\n</code></pre> <p>On consid\u00e8re le code suivant :</p> \ud83d\udc0d Script Python<pre><code>import csv\n\nf = open('departements.csv', mode='r', encoding='UTF-8', newline='')\nlesLignes = csv.reader(f)\nfor uneLigne in lesLignes:\n    print(uneLigne[3])\nf.close()\n</code></pre> <p>Que va produire l'ex\u00e9cution de ce code ?</p> <ul> <li> R\u00e9ponse A :  L'affichage de la troisi\u00e8me colonne \u00e0 savoir le nom du d\u00e9partement avec une majuscule initiale</li> <li> R\u00e9ponse B : L'affichage de tout le contenu du fichier</li> <li> R\u00e9ponse C : L'affichage du nombre total de d\u00e9partements figurant dans le fichier</li> <li> R\u00e9ponse D : L'affichage de la quatri\u00e8me colonne, \u00e0 savoir le nom du d\u00e9partement tout en majuscules</li> </ul> </li> <li> <p>On dispose du fichier <code>'info.csv'</code> donn\u00e9 ci-dessous :</p> CSV<pre><code>nom, prenom, naissance, deces\nlovelace, ada, 1815, 1852\nvon neumann, john, 1903, 1957\nturing, alan, 1912, 1954\nmccarthy, john, 1927, 2011\nfloyd, robert, 1936, 2001\n</code></pre> <p>Le programme ci-dessous nous permet de cr\u00e9er un tableau \u00e0 partir de ce fichier.</p> \ud83d\udc0d Script Python<pre><code>file = open(\"info.csv\", \"r\")\nfirstLine = file.readline()  # chargement de la ligne d'ent\u00eate\ntableau = [line.split(',') for line in file]  # chargement des donn\u00e9es\n</code></pre> <p>Les index des lignes de ce tableau vont :</p> <ul> <li> R\u00e9ponse A :  de 0 \u00e0 3</li> <li> R\u00e9ponse B : de 1 \u00e0 4</li> <li> R\u00e9ponse C :  de 0 \u00e0 4</li> <li> R\u00e9ponse D : de 0 \u00e0 5</li> </ul> </li> <li> <p>Quelle expression Python permet d'acc\u00e9der au num\u00e9ro de t\u00e9l\u00e9phone de Tournesol, sachant que le r\u00e9pertoire a \u00e9t\u00e9 d\u00e9fini par l'affectation suivante :</p> \ud83d\udc0d Script Python<pre><code>repertoire = [{'nom': 'Dupont', 'tel': '5234'},\n          {'nom': 'Tournesol', 'tel': '5248'},\n          {'nom': 'Dupond', 'tel': '3452'}]\n</code></pre> <ul> <li> R\u00e9ponse A : <code>repertoire['Tournesol']</code></li> <li> R\u00e9ponse B : <code>repertoire['tel'][1]</code></li> <li> R\u00e9ponse C : <code>repertoire[1]['tel']</code></li> <li> R\u00e9ponse D : <code>repertoire['Tournesol'][tel]</code></li> </ul> </li> </ol>"},{"location":"premiere/07_tables/tables_cours/","title":"Traitement des donn\u00e9es en table (cours)","text":""},{"location":"premiere/07_tables/tables_cours/#1-table-de-donnees-et-indexation","title":"1. Table de donn\u00e9es et indexation","text":""},{"location":"premiere/07_tables/tables_cours/#11-vocabulaire","title":"1.1. Vocabulaire","text":"<p>D\u00e9finition</p> <p>Des donn\u00e9es, num\u00e9riques ou non, sont souvent repr\u00e9sent\u00e9es sous forme de tableaux, ou tables.</p> <p>Vocabulaire :</p> <ul> <li>Une table, repr\u00e9sent\u00e9e sous forme de tableau, est une collection d'\u00e9l\u00e9ments qui sont les lignes du tableau.</li> <li>Chaque \u00e9l\u00e9ment de la table, ou ligne de sa repr\u00e9sentation sous forme de tableau, s'appelle un enregistrement.    </li> <li>Tous les  enregistrements d'une m\u00eame table sont des  p-uplets nomm\u00e9s qui partagent les m\u00eames descripteurs, appel\u00e9s aussi attributs. Dans une repr\u00e9sentation de la table sous forme de tableau, chaque attribut correspond \u00e0 une colonne. Chaque attribut est caract\u00e9ris\u00e9 par son type et son  domaine de valeurs (les valeurs que peut prendre cet attribut).    </li> <li>Dans une repr\u00e9sentation sous forme de tableau, les descripteurs ou attributs sont en g\u00e9n\u00e9ral plac\u00e9s comme en-t\u00eate de colonnes sur la premi\u00e8re ligne.</li> </ul> <p></p> <p>Exemple</p> <p>La table repr\u00e9sent\u00e9e ci-dessus est affich\u00e9e dans un tableur. Nous voyons les 20 premiers enregistrements de cette table qui rassemble des donn\u00e9es sur tous les \u00e9tablissements scolaires primaires et secondaires dans le Cantal (source : https://www.data.gouv.fr/fr/). </p> <p>Les attributs de cette table sont :</p> <ul> <li>le code UAI (Unit\u00e9 Administrative Immatricul\u00e9e) avec un domaine de valeurs particulier ;</li> <li>le nom avec pour domaine de valeur les cha\u00eenes de caract\u00e8res ;</li> <li>le statut avec pour domaine de valeur les deux cha\u00eenes {\"Public\", \"Priv\u00e9\"} ;</li> <li>le codepostal avec un domaine de valeurs particulier ;</li> <li>la commune avec pour domaine de valeur les cha\u00eenes de caract\u00e8res ;</li> <li>la latitude et la longitude avec pour domaine de valeur les flottants.</li> </ul>"},{"location":"premiere/07_tables/tables_cours/#12-echange-de-table-de-donnees-avec-un-fichier-csv","title":"1.2. \u00c9change de table de donn\u00e9es avec un fichier CSV","text":"<p>Pour \u00e9changer des donn\u00e9es tabulaires  entre les programmes qui doivent les manipuler, on les exporte puis les importe sous la forme de fichiers textes, c'est-\u00e0-dire lisibles par l'\u00eatre humain.  </p> <p>Afin d'assurer l'interop\u00e9rabilit\u00e9 entre diff\u00e9rents programmes, un fichier doit respecter un format normalis\u00e9.</p> <p>L'un des formats les plus r\u00e9pandus pour l'\u00e9change de donn\u00e9es tabulaires est le format CSV pour Comma Separated Values :</p> <ul> <li>un fichier CSV est un fichier texte donc \u00e9ditable avec un \u00e9diteur de textes comme Notepad++. On peut aussi l'\u00e9diter dans un tableur ;</li> <li>chaque ligne du fichier correspond \u00e0 un enregistrement de la table ;</li> <li>pour un  enregistrement donn\u00e9, les valeurs des diff\u00e9rents attributs sont s\u00e9par\u00e9es en champs par un d\u00e9limiteur qui est en g\u00e9n\u00e9ral l'un des symboles <code>,</code> ou <code>;</code> ou <code>:</code> ;</li> <li>la premi\u00e8re ligne contient en g\u00e9n\u00e9ral les noms des attributs.</li> </ul> <p>Voici la m\u00eame table que celle qui est affich\u00e9e dans un tableur ci-dessus, au format CSV :</p> CSV<pre><code>code,nom,statut,codepostal,commune,latitude,longitude\n0150424E,Ecole maternelle de La Fontaine,Public,15000,AURILLAC,44.93215113696133,2.4472797795526975\n0150426G,Ecole \u00e9l\u00e9mentaire La Jordanne,Public,15000,AURILLAC,44.91746484780829,2.4412899019318455\n0150713U,Ecole \u00e9l\u00e9mentaire Belbex,Public,15000,AURILLAC,44.91692385174704,2.420740047835959\n0150669W,Ecole \u00e9l\u00e9mentaire de Canteloube,Public,15000,AURILLAC,44.90604342702414,2.4320205660195438\n0150695Z,Ecole \u00e9l\u00e9mentaire Paul Doumer,Public,15000,AURILLAC,44.92315413405051,2.4369699098202613\n0150708N,Coll\u00e8ge priv\u00e9 Gerbert,Priv\u00e9,15000,AURILLAC,44.915101259869516,2.4353907452880663\n0150082H,Ecole \u00e9l\u00e9mentaire priv\u00e9e Externat de L'Enfant-J\u00e9sus,Priv\u00e9,15000,AURILLAC,44.925334485056936,2.4395702526084304\n0150430L,Ecole \u00e9l\u00e9mentaire Le Palais,Public,15000,AURILLAC,44.92790494767797,2.44295019912506\n0150431M,Ecole \u00e9l\u00e9mentaire Jean-Baptiste Rames,Public,15000,AURILLAC,44.92587579761087,2.443909493077494\n0150639N,Coll\u00e8ge Jeanne de La Treilhe,Public,15000,AURILLAC,44.931332705102776,2.446920262863509\n0150340N,Ecole \u00e9l\u00e9mentaire Tivoli,Public,15000,AURILLAC,44.91458511629758,2.437120525044205\n0150420A,Ecole \u00e9l\u00e9mentaire des Fr\u00e8res Delmas,Public,15000,AURILLAC,44.93257502395094,2.448510197138493\n0150427H,Ecole \u00e9l\u00e9mentaire Les Alouettes,Public,15000,AURILLAC,44.931185754042616,2.4377296545614717\n0150760V,Lyc\u00e9e Polyvalent priv\u00e9 Gerbert,Priv\u00e9,15000,AURILLAC,44.91492261677949,2.435849985504045\n0150761W,Section d'enseignement professionnel du Lyc\u00e9e priv\u00e9 Gerbert,Priv\u00e9,15000,AURILLAC,44.91510125343173,2.435389478195114\n0150773J,Ecole \u00e9lementaire priv\u00e9e La Calandreta del Vernhat,Priv\u00e9,15000,AURILLAC,44.90477730883497,2.434630577068397\n0150006A,Lyc\u00e9e polyvalent Monnet-Mermoz - Lyc\u00e9e des m\u00e9tiers des sciences et techniques appliqu\u00e9es \u00e0 l'industrie et aux services,Public,15005,AURILLAC CEDEX,44.93647192501501,2.4525295902159927\n0150036H,Section d'enseignement professionnel du Lyc\u00e9e Monnet-Mermoz,Public,15005,AURILLAC CEDEX,44.93588796606886,2.451329778620416\n0150646W,Lyc\u00e9e g\u00e9n\u00e9ral Emile Duclaux,Public,15005,AURILLAC CEDEX,44.927782859640786,2.439440592922277\n</code></pre> <p>On observe que le d\u00e9limiteur de champ est le symbole <code>,</code> et que les champs peuvent contenir des espaces.</p> <p>Dans un tel jeu de donn\u00e9es, il peut y avoir des champs vides dans certains enregistrements et il se peut aussi que le nombre de champs pour un ne corresponde pas au nombre d'attributs ! Pour traiter un tel fichier avec un programme, il faut d'abord analyser sa structure, ses particularit\u00e9s et pr\u00e9voir d'\u00e9ventuelles irr\u00e9gularit\u00e9s dans les donn\u00e9es (absence, erreurs de type, de saisie, corruption du fichier ...). Le contr\u00f4le de la  validit\u00e9 des donn\u00e9es doit donc \u00eatre une composante du programme de traitement : recherche de doublons, tests de coh\u00e9rence.</p>"},{"location":"premiere/07_tables/tables_cours/#13-manipulation-de-fichiers-csv-en-python","title":"1.3. Manipulation de fichiers CSV en Python","text":"<p>D\u00e9finition</p> <p>L'indexation de table est la cr\u00e9ation d'une structure de donn\u00e9es \u00e0 partir d'une table de donn\u00e9es.</p> <p>L'indexation d'une table extraite d'un fichier CSV peut se faire vers une structure de donn\u00e9es du langage Python : tableau de tableaux ou (mieux) tableau de dictionnaires.</p> <p>Dans cette section, on consid\u00e8re le fichier CSV,  <code>educ_cantal.csv</code>,  contenant les enregistrements des \u00e9tablissements scolaires primaires et secondaires dans le Cantal.</p> <p>Pr\u00e9sentons deux m\u00e9thodes de lecture de fichiers CSV qui utilisent les outils standards de Python. </p> <p>On fait les hypoth\u00e8ses suivantes :  la premi\u00e8re ligne du fichier contient les attributs et on conna\u00eet  le d\u00e9limiteur, ici le symbole <code>,</code>.</p>"},{"location":"premiere/07_tables/tables_cours/#avec-un-tableau-de-tableaux","title":"Avec un tableau de tableaux","text":"<ul> <li>Lecture</li> </ul> <p>On peut extraire les attributs et la  table contenus dans le fichier <code>educ_cantal.csv</code>  avec le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>fichier = open('educ_cantal.csv', mode='r', encoding='utf8', newline='')  # ouverture du fichier en mode lecture\nattributs = fichier.readline().rstrip().split(',')  # extraction de la ligne des attributs\ntable = [ligne.rstrip().split(',') for ligne in fichier]  # extraction des autres lignes\nfichier.close()  # fermeture du fichier\n</code></pre> <p>La fonction <code>open</code> permet de cr\u00e9er un objet <code>fichier</code> qu'on peut parcourir ligne par ligne avec un curseur : d'abord la premi\u00e8re ligne avec <code>fichier.readline()</code> puis les lignes suivantes en it\u00e9rant sur <code>fichier</code>. Il est important de pr\u00e9ciser l'encodage du fichier, par d\u00e9faut c'est celui du syst\u00e8me d'exploitation.</p> <p>Chaque ligne est une cha\u00eene de caract\u00e8res d\u00e9coup\u00e9e en liste de champs selon le d\u00e9limiteur pass\u00e9 en param\u00e8tre \u00e0 la m\u00e9thode <code>split</code>. Le caract\u00e8re de saut de lignes a d'abord \u00e9t\u00e9 supprim\u00e9 avec la m\u00e9thode <code>rstrip</code>.</p> <p>On r\u00e9cup\u00e8re ainsi les attributs comme un tableau de type <code>list</code> et la table comme un tableau d'enregistrements qui sont eux-m\u00eames des tableaux. Notons que toutes les valeurs sont des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter !</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; attributs   # tableau des attributs\n['code', 'nom', 'statut', 'codepostal', 'commune', 'latitude', 'longitude']\n&gt;&gt;&gt; table[18]   # tableau 19i\u00e8me enregistrement\n['0150646W', 'Lyc\u00e9e g\u00e9n\u00e9ral Emile Duclaux', 'Public', '15005', 'AURILLAC CEDEX', '44.927782859640786', '2.439440592922277']\n&gt;&gt;&gt; table[:2]   # tableau de tableaux : extrait\n[['0150424E', 'Ecole maternelle de La Fontaine', 'Public', '15000', 'AURILLAC', '44.93215113696133', '2.4472797795526975'], ['0150426G', 'Ecole \u00e9l\u00e9mentaire La Jordanne', 'Public', '15000', 'AURILLAC', '44.91746484780829', '2.4412899019318455']]\n</code></pre> <ul> <li>\u00c9criture</li> </ul> <p>On peut ensuite recopier les attributs et la table dans un autre fichier <code>educ_cantal_copie.csv</code> avec le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>g = open('educ_cantal_copie.csv', mode='w', encoding='utf8', newline='') # ouverture du fichier en mode \u00e9criture\npremiere_ligne = ','.join(attributs) + '\\n'\ng.write(premiere_ligne)\nfor enregistrement in table:\n    g.write(','.join(enregistrement) + '\\n')\ng.close()\n</code></pre> <p>La m\u00e9thode <code>join</code> permet de concat\u00e9ner les \u00e9l\u00e9ments d'un tableau de cha\u00eenes de caract\u00e8res avec un d\u00e9limiteur.</p> <ul> <li>Avec ces m\u00e9thodes, une table est donc repr\u00e9sent\u00e9e par un tableau de tableaux. On acc\u00e8de \u00e0 un enregistrement par son index dans la table et \u00e0 la valeur d'un attribut par son index dans le tableau des attributs (s\u00e9par\u00e9 de la table). C'est incommode et  le code produit est peu lisible. Ainsi, pour acc\u00e9der \u00e0 l'adresse mail du premier enregistrement il faut saisir <code>table[0][2]</code>. On aimerait \u00e9crire <code>table[0]['email']</code>. Pour cela, chaque enregistrement devrait \u00eatre un p-uplet nomm\u00e9 que nous repr\u00e9senterons par dictionnaire avec pour clefs les attributs de la table. C'est possible en utilisant le module <code>csv</code>.</li> </ul>"},{"location":"premiere/07_tables/tables_cours/#avec-un-tableau-de-dictionnaires","title":"Avec un tableau de dictionnaires","text":"<p>Le module <code>csv</code>  est disponible dans la biblioth\u00e8que standard et peut donc \u00eatre  utilis\u00e9 sans installation sp\u00e9cifique. \u00c0 partir de la table contenu dans le m\u00eame fichier CSV <code>'educ_cantal.csv'</code>, ce module permet de cr\u00e9er une structure de donn\u00e9es d'un acc\u00e8s plus facile.</p> <ul> <li>Lecture</li> </ul> <p>Le code ci-dessous permet d'extraire directement la table d'un fichier CSV dans une structure de donn\u00e9es qui est un tableau de dictionnaires : chaque enregistrement est un dictionnaire dont les clefs sont les attributs list\u00e9s sur la premi\u00e8re ligne du fichier.</p> <p>Remarque: pour les versions de Python 3.6 et 3.7 uniquement, les dictionnaires renvoy\u00e9s sont sp\u00e9cifiques, de type <code>OrderedDict</code>, et on prendra soin de les convertir en dictionnaires standard avec <code>dict</code> en entrant : <code>table = [dict(enregistrement) for ...]</code>.</p> \ud83d\udc0d Script Python<pre><code>import csv\n\nf = open('educ_cantal.csv', mode='r', encoding='utf8', newline='')\nreader = csv.DictReader(f, delimiter=',')  # cr\u00e9ation d'un objet reader\ntable = [enregistrement for enregistrement in reader]\nf.close()\n</code></pre> <p>La structure de donn\u00e9es repr\u00e9sentant la table est un tableau de dictionnaires : l'acc\u00e8s aux enregistrements se fait par index et \u00e0 leurs attributs par clef : tr\u00e8s efficace (co\u00fbt constant) et code lisible. Notons que toutes les valeurs restent des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter !</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; table[18]    # premier enregistrement de type dictionnaire\n{'code': '0150646W', 'nom': 'Lyc\u00e9e g\u00e9n\u00e9ral Emile Duclaux', 'statut': 'Public', 'codepostal': '15005', 'commune': 'AURILLAC CEDEX', 'latitude': '44.927782859640786', 'longitude': '2.439440592922277'}\n&gt;&gt;&gt; table[:2]    # tableu de dictionnaires : extrait\n[{'code': '0150424E', 'nom': 'Ecole maternelle de La Fontaine', 'statut': 'Public', 'codepostal': '15000', 'commune': 'AURILLAC', 'latitude': '44.93215113696133', 'longitude': '2.4472797795526975'}, {'code': '0150426G', 'nom': 'Ecole \u00e9l\u00e9mentaire La Jordanne', 'statut': 'Public', 'codepostal': '15000', 'commune': 'AURILLAC', 'latitude': '44.91746484780829', 'longitude': '2.4412899019318455'}]\n&gt;&gt;&gt; len(table)\n203\n&gt;&gt;&gt; table[18][\"nom\"]    # acc\u00e8s facile aux valeurs des attributs par clefs\n'Lyc\u00e9e g\u00e9n\u00e9ral Emile Duclaux'\n</code></pre> <ul> <li>\u00c9criture</li> </ul> <p>L'\u00e9criture d'un tableau de dictionnaires partageant les m\u00eames clefs sous forme de table dans un fichier CSV, s'effectue de fa\u00e7on sym\u00e9trique \u00e0 travers un objet <code>DictWriter</code>. \u00c0 titre, d'exemple, on recopie la table extraite pr\u00e9c\u00e9demment dans un autre fichier CSV. Depuis Python 3.7, le parcours des clefs d'un dictionnaire est garanti dans le m\u00eame ordre que celui d'insertion donc on peut r\u00e9cup\u00e9rer la liste des attributs avec <code>list(table[0].keys())</code></p> \ud83d\udc0d Script Python<pre><code>g = open('educ_cantal_copie2.csv', mode='w', encoding='utf8', newline='')\nattributs = list(table[0].keys())\nwriter = csv.DictWriter(g, delimiter=',', fieldnames=attributs)  # cr\u00e9ation de l'objet writer\nwriter.writeheader()  # \u00e9criture des attributs\nfor enregistrement in table:\n    writer.writerow(enregistrement)  # \u00e9criture des enregistrements\ng.close()\n</code></pre> <ul> <li>Remarque </li> </ul> <p>Le module <code>csv</code> permet aussi d'extraire une table d'un fichier CSV sous forme de tableau de tableaux comme dans la m\u00e9thode pr\u00e9c\u00e9dente. Le d\u00e9coupage des lignes/enregistrements selon le d\u00e9limiteur est int\u00e9gr\u00e9 ce qui simplifie le code.</p> \ud83d\udc0d Script Python<pre><code>f = open('educ_cantal.csv', mode='r', encoding='utf8', newline='')\nreader = csv.reader(f, delimiter=',')\ntable = [ligne for ligne in reader]\nf.close()\n</code></pre>"},{"location":"premiere/07_tables/tables_cours/#2-recherche-dans-une-table","title":"2. Recherche dans une table","text":"<p>Pour acc\u00e9der aux donn\u00e9es, il faut les rechercher et les regrouper suivant diff\u00e9rents crit\u00e8res.</p> <p>D\u00e9finition</p> <ul> <li>Lorsqu'on souhaite acc\u00e9der \u00e0 un ou plusieurs enregistrements v\u00e9rifiant un crit\u00e8re, on r\u00e9alise une s\u00e9lection.</li> <li>Lorsqu'on souhaite acc\u00e9der \u00e0 toutes les donn\u00e9es d'une colonne on r\u00e9alise une projection.</li> </ul>"},{"location":"premiere/07_tables/tables_cours/#exemple-de-selection","title":"Exemple de s\u00e9lection","text":"<p>Supposons qu'on dispose d'une table enregistr\u00e9e dans une liste de dictionnaires :</p> \ud83d\udc0d Script Python<pre><code>Table1 = [\n    {'Nom': 'Joe', 'Anglais': '17', 'Info': '18', 'Maths': '16'},\n    {'Nom': 'Zo\u00e9', 'Anglais': '15', 'Info': '17', 'Maths': '19'},\n    {'Nom': 'Max', 'Anglais': '19', 'Info': '13', 'Maths': '14'},\n    {'Nom': 'Bob', 'Anglais': '12', 'Info': '16', 'Maths': '10'}\n]\n</code></pre> <p>On souhaite extraire la liste des enregistrements des \u00e9l\u00e8ves ayant eu au moins 16 en maths.</p> <p>On peut le faire \"\u00e0 la main\" :</p> \ud83d\udc0d Script Python<pre><code>au_moins_16_en_maths = []\nfor enregistrement in Table1:\n    if int(enregistrement['Maths']) &gt;= 16:\n        au_moins_16_en_maths.append(enregistrement)\n</code></pre> <p>Le r\u00e9sultat est encore une table :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; au_moins_16_en_maths\n[{'Nom': 'Joe', 'Anglais': '17', 'Info': '18', 'Maths': '16'}, {'Nom': 'Zo\u00e9', 'Anglais': '15', 'Info': '17', 'Maths': '19'}]\n</code></pre> <p>On peut le faire avec une liste en compr\u00e9hension :</p> \ud83d\udc0d Script Python<pre><code>au_moins_16_en_maths = [enre for enre in Table1 if int(enre['Maths']) &gt;= 16]\n</code></pre> <p>Le r\u00e9sultat est identique.</p>"},{"location":"premiere/07_tables/tables_cours/#exemple-de-projection","title":"Exemple de projection","text":"<p>Cette fois, on souhaite r\u00e9cup\u00e9rer toutes les valeurs pour un champ donn\u00e9, par exemple toutes les notes de math\u00e9matiques.</p> <p>L'approche est similaire, on cr\u00e9e une liste, on parcourt la table et on ajoute \u00e0 la liste tous les \u00e9l\u00e9ments qui nous int\u00e9ressent.</p> <ul> <li> <p>\u00e0 la main :</p> \ud83d\udc0d Script Python<pre><code>notes_maths = []\nfor enregistrement in Table1:\n    notes_maths.append(enregistrement['Maths'])\n</code></pre> </li> <li> <p>par compr\u00e9hension :</p> \ud83d\udc0d Script Python<pre><code>notes_maths = [enre['Maths'] for enre in Table1]\n</code></pre> </li> </ul> <p>Dans les deux cas le r\u00e9sultat est la liste ['16', '19', '14', '10'].</p> <p>Exercices</p> <ol> <li>Adapter la s\u00e9lection afin de r\u00e9cup\u00e9rer tous les enregistrements des \u00e9l\u00e8ves dont le nom comporte un \"o\".</li> <li> <p>Projeter afin de construire la liste des noms puis celle des paires de notes d'info et de maths :</p> <p>[(18, 16), (17, 19), (13, 14), (16, 10)]</p> </li> </ol> Solution <ol> <li> <p>Avec une boucle :</p> \ud83d\udc0d Script Python<pre><code>nom_avec_o = []\nfor enregistrement in Table1:\n    if 'o' in enregistrement['Nom']:\n        nom_avec_o.append(enregistrement)\n</code></pre> <p>En compr\u00e9hension :</p> \ud83d\udc0d Script Python<pre><code>nom_avec_o = [enre for enre in Table1 if 'o' in enre['Nom']]\n</code></pre> </li> <li> <p>Liste des noms :</p> \ud83d\udc0d Script Python<pre><code># avec une boucle\nliste_noms = []\nfor enregistrement in Table1:\n    liste_noms.append(enregistrement['Nom'])\n\n# avec une liste en compr\u00e9hension\nliste_noms = [enre['Nom'] for enre in Table1]\n</code></pre> <p>paires info/maths</p> \ud83d\udc0d Script Python<pre><code># avec une boucle\nliste_paires = []\nfor enregistrement in Table1:\n    liste_paires.append((enregistrement['Info'], enregistrement['Maths']))\n\n# avec une liste en compr\u00e9hension\nliste_paires = [(enre['Info'], enre['Maths']) for enre in Table1]\n</code></pre> </li> </ol>"},{"location":"premiere/07_tables/tables_cours/#3-tri-dune-table","title":"3. Tri d'une table","text":""},{"location":"premiere/07_tables/tables_cours/#31-tri-dune-table-selon-une-colonne","title":"3.1. Tri d'une table selon une colonne","text":"<p>Il s'agit ici de trier les donn\u00e9es d'une table selon un des attributs de la table, c'est-\u00e0-dire selon une colonne. Il faut bien s\u00fbr pour cela que les donn\u00e9es de cet attribut soient \"triables\", c'est-\u00e0-dire qu'un ordre puisse \u00eatre d\u00e9fini sur ces donn\u00e9es. Pour des donn\u00e9es num\u00e9riques, on peut penser \u00e0 l'ordre croissant ou \u00e0 l'ordre d\u00e9croissant. Pour des donn\u00e9es textuelles, \u00e0 l'ordre alphab\u00e9tique. On peut aussi vouloir trier les donn\u00e9es selon plusieurs champs.</p> <p>Nous allons pour cela utiliser la fonction Python <code>sorted</code> qui s'applique \u00e0 un objet de type <code>list</code> et qui renvoie une nouvelle <code>list</code> tri\u00e9e. Outre la table \u00e0 trier, cette fonction peut prendre deux arguments nomm\u00e9s facultatifs :</p> <ul> <li><code>reverse = True</code> pour un tri dans l'ordre inverse ;</li> <li><code>key = ...</code> pour pr\u00e9ciser selon quel crit\u00e8re une liste doit \u00eatre tri\u00e9e.</li> </ul> <p>Quelques exemples :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ma_liste = [10, 3, 71, 96]\n&gt;&gt;&gt; sorted(ma_liste)\n[3, 10, 71, 96]\n&gt;&gt;&gt; sorted(ma_liste, reverse=True)\n[96, 71, 10, 3]\n&gt;&gt;&gt; mes_couples = [('a', 3), ('d', 2), ('c', 5), ('b', 1)]\n&gt;&gt;&gt; sorted(mes_couples)     # tuples tri\u00e9s selon leur premier \u00e9l\u00e9ment (par d\u00e9faut)\n[('a', 3), ('b', 1), ('c', 5), ('d', 2)]\n&gt;&gt;&gt; def y(couple):    # on d\u00e9finit une fonction qui retourne le second \u00e9l\u00e9ment d'un tuple\n        return couple[1]\n&gt;&gt;&gt; sorted(mes_couples, key=y) # tuples tri\u00e9s selon leur second \u00e9l\u00e9ment\n[('b', 1), ('d', 2), ('a', 3), ('c', 5)]\n</code></pre> <p>Danger</p> <p>Attention, <code>sorted</code> ne renvoie qu'une copie superficielle du tableau ! Si ses \u00e9l\u00e9ments sont des r\u00e9f\u00e9rences et c'est le cas de l'impl\u00e9mentation des tables de donn\u00e9es sous forme de tableaux de dictionnaires, il faut effectuer une copie profonde du tableau avec la fonction <code>deepcopy</code> du module <code>copy</code> pour obtenir une vraie copie tri\u00e9e du tableau initial : <code>sorted(deepcopy(tab), key = clef_tri)</code>.</p>"},{"location":"premiere/07_tables/tables_cours/#32-tri-suivant-plusieurs-colonnes","title":"3.2. Tri suivant plusieurs colonnes","text":"<p>Consid\u00e9rons la table suivante : </p> \ud83d\udc0d Script Python<pre><code>table = [{'\u00e9l\u00e8ve' : 'guido', 'langage' : 'python', 'note' : 19},\n         {'\u00e9l\u00e8ve' : 'monty', 'langage' : 'python', 'note' : 20},\n         {'\u00e9l\u00e8ve' : 'brian', 'langage' : 'c', 'note' : 20}]\n</code></pre> <p>On souhaite trier en fonction du langage dans l'ordre alphab\u00e9tique, puis de la note dans l'ordre croissant. La fonction donn\u00e9e en argument <code>key</code> doit alors retourner la couple ordonn\u00e9 des deux attributs voulus :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; def cle_langage_note(enre):\n        return (enre['langage'], enre['note'])\n&gt;&gt;&gt; sorted(table, key = cle_langage_note)\n[{'\u00e9l\u00e8ve': 'brian', 'langage': 'c', 'note': 20}, {'\u00e9l\u00e8ve': 'guido', 'langage': 'python', 'note': 19}, {'\u00e9l\u00e8ve': 'monty', 'langage': 'python', 'note': 20}]\n</code></pre> <p>Si l'on souhaite trier dans l'ordre croissant suivant l'attribut langage et d\u00e9croissant suivant l'attribut note, on proc\u00e8de en deux \u00e9tapes :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; def cle_langage(enre):\n        return enre['langage']\n&gt;&gt;&gt; def cle_note(enre):\n        return enre['note']\n&gt;&gt;&gt; table_temp = sorted(table, key = cle_langage)\n&gt;&gt;&gt; sorted(table_temp, key = cle_note, reverse = True)\n[{'\u00e9l\u00e8ve': 'brian', 'langage': 'c', 'note': 20}, {'\u00e9l\u00e8ve': 'monty', 'langage': 'python', 'note': 20}, {'\u00e9l\u00e8ve': 'guido', 'langage': 'python', 'note': 19}]\n</code></pre>"},{"location":"premiere/07_tables/tables_cours/#4-fusion-de-deux-tables","title":"4. Fusion de deux tables","text":"<p>Il est courant de travailler avec plusieurs tables de donn\u00e9es. Nous avons alors parfois besoin de rassembler deux tables en une seule ou encore de construire une nouvelle table \u00e0 partir de certains attributs de tables existantes.</p>"},{"location":"premiere/07_tables/tables_cours/#41-fusion-de-deux-tables-de-meme-structure","title":"4.1. Fusion de deux tables de m\u00eame structure","text":"<p>Le cas le plus simple est lorsque nous disposons de deux tables, par exemple sous la forme de tableaux de dictionnaires, qui poss\u00e8dent exactement les m\u00eames attributs.</p> <p>Une simple concat\u00e9nation des tableaux permet cette fusion, en prenant garde n\u00e9anmoins :</p> <ul> <li>\u00e0 ne pas conserver deux fois la d\u00e9finition des descripteurs ;</li> <li>\u00e0 \u00e9viter les doublons : cas d'un enregistrement qui se trouverait dans les deux tables initiales.</li> </ul> <p>Sous l'hypoth\u00e8se qu'il n'y a pas de doublons, le code ci-dessous proc\u00e8de \u00e0 cette fusion :</p> \ud83d\udc0d Script Python<pre><code>def fusion_tables(table1: list, table2: list) -&gt; list:\n\"\"\"table 1 et table 2 ont les m\u00eames descripteurs\n    il n'y a pas de doublons\"\"\"\n    fusion = deepcopy(table1)\n    for enreg in table2[1:]:    # on \u00e9limine la premi\u00e8re ligne (descripteurs)\n        fusion.append(deepcopy(enreg))\n    return fusion\n</code></pre>"},{"location":"premiere/07_tables/tables_cours/#42-fusion-de-deux-tables-pour-un-meme-attribut","title":"4.2. Fusion de deux tables pour un m\u00eame attribut","text":"<p>On veut fusionner deux tables selon un attribut commun. On va s\u00e9lectionner dans chaque table la ligne ayant la m\u00eame valeur pour l'attribut choisi.</p> <p>Reprenons le tableau <code>Table1</code> des exemples pr\u00e9c\u00e9dents :</p> Nom Anglais Info Maths Joe 17 18 16 Zo\u00e9 15 17 19 Max 19 13 14 <p>D\u00e9finissons une seconde table, <code>Table2</code> donnant l'\u00e2ge et le courriel de certains \u00e9l\u00e8ves :</p> Nom Age Courriel Joe 16 joe@info.fr Zo\u00e9 15 zoe@info.fr <p>On voudrait regrouper les donn\u00e9es des deux tables. Elles ont l'attribut <code>Nom</code> en commun. On veut obtenir la table suivante :</p> Nom Age Courriel Anglais Info Maths Joe 16 joe@info.fr 17 18 16 Zo\u00e9 15 zoe@info.fr 15 17 19 <p>On choisit d'exclure la ligne concernant Max car il n'est pas pr\u00e9sent dans la seconde table.</p> <p>D\u00e9finition</p> <p>En informatique, la jointure est l'op\u00e9ration permettant d'associer plusieurs tables par le biais d'un lien logique de donn\u00e9es entre les diff\u00e9rentes tables, le lien \u00e9tant d\u00e9fini par une condition. Le r\u00e9sultat de l'op\u00e9ration est une nouvelle table.</p> <p>La jointure s'obtient avec deux boucles imbriqu\u00e9es : on parcourt tous les couples constitu\u00e9s d'enregistrements de la premi\u00e8re puis de la seconde table et on filtre \u00e0 l'aide d'une instruction conditionnelle.</p> \ud83d\udc0d Script Python<pre><code>from copy import deepcopy\n\nTable1 = [{'Nom': 'Joe', 'Anglais': '17', 'Info': '18', 'Maths': '16'},\n          {'Nom': 'Zo\u00e9', 'Anglais': '15', 'Info': '17', 'Maths': '19'},\n          {'Nom': 'Max', 'Anglais': '19', 'Info': '13', 'Maths': '14'},\n          {'Nom': 'Bob', 'Anglais': '12', 'Info': '16', 'Maths': '10'}]\n\nTable2 = [{'Nom': 'Joe', 'Age': 16, 'Couriel': 'joe@info.fr'},\n          {'Nom': 'Zo\u00e9', 'Age': 15, 'Couriel': 'zoe@info.fr'}]\n\n\ndef jointure_selon_attribut_commun(t1: list, t2: list, attr: str) -&gt; list:\n\"\"\"Effectue la jointure entre les tables t1 et t2 selon l'attribut commun attr\"\"\"\n    jointure = []\n    for item1 in t1:\n        for item2 in t2:\n            if item1[attr] == item2[attr]:\n                # d\u00e9finition d'une ligne de la nouvelle table reprenant le contenu de la ligne en cours de t1\n                new_line = deepcopy(item1)\n                # boucle pour ajouter les champs de la ligne de t2 autres que attr\n                for cle in item2:\n                    if cle != attr:\n                        new_line[cle] = item2[cle]\n                # ajout de la nouvelle ligne \u00e0 la nouvelle table\n                jointure.append(new_line)\n    return jointure\n\n\nprint(jointure_selon_attribut_commun(Table2, Table1, 'Nom'))\n</code></pre> <p>On obtient :</p> Sortie<pre><code>[{'Nom': 'Joe', 'Age': 16, 'Couriel': 'joe@info.fr', 'Anglais': '17', 'Info': '18', 'Maths': '16'}, {'Nom': 'Zo\u00e9', 'Age': 15, 'Couriel': 'zoe@info.fr', 'Anglais': '15', 'Info': '17', 'Maths': '19'}]\n</code></pre> <p>Remarque : dans la fonction ci-dessus, on suppose que le nom des attributs est toujours une cha\u00eene de caract\u00e8res.</p>"},{"location":"premiere/07_tables/tables_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"premiere/07_tables/tables_exos/#exercice-1","title":"Exercice 1","text":"<p>Dans cet exercice, on utilise le fichier CSV listant les \u00e9tablissements scolaires du Cantal d\u00e9j\u00e0 rencontr\u00e9 dans le cours (Source : https://www.data.gouv.fr/fr/). Ce fichier utilise l'encodage UTF-8.</p> <p> Avertissement  : Dans cet exercice, certaines questions n\u00e9cessitent la comparaison de valeurs num\u00e9riques alors que les donn\u00e9es sont toutes au format cha\u00eene de caract\u00e8res. Il faut donc pense, si besoin, \u00e0 convertir les donn\u00e9es au format num\u00e9rique ad\u00e9quat.</p> <ol> <li>Importer ce fichier dans un programme Python et indexer les donn\u00e9es sous la forme d'un tableau de dictionnaires nomm\u00e9 <code>table_educ</code>.</li> <li>Combien d'enregistrements contient cette table ?</li> <li> <p>Op\u00e9rations de s\u00e9lection :</p> <ol> <li>En utilisant une boucle, \u00e9crire des instructions permettant de d\u00e9finir le tableau <code>etab_AURILLAC</code> contenant les enregistrements qui correspondent \u00e0 des \u00e9tablissement situ\u00e9s \u00e0 Aurillac.</li> <li>En utilisant une d\u00e9finition de tableau en compr\u00e9hension, \u00e9crire une instruction permettant d'obtenir le tableau contenant les enregistrements de tous les \u00e9tablissements priv\u00e9s du Cantal.</li> </ol> </li> <li> <p>Op\u00e9rations de projection :</p> <ol> <li>En utilisant une boucle, \u00e9crire des instructions permettant d'obtenir le tableau de tous les codes UAI des \u00e9tablissements du Cantal.</li> <li>En utilisant une d\u00e9finition de tableau en compr\u00e9hension, \u00e9crire une instruction permettant d'obtenir le tableau de tous les noms d'\u00e9tablissements utilis\u00e9s dans le Cantal.</li> <li>On souhaite obtenir le tableau des noms de communes dans lesquelles existe au moins un \u00e9tablissement scolaire, sans r\u00e9p\u00e9tition (une commune dans laquelle existent trois \u00e9tablissements ne doit appara\u00eetre qu'une fois). Trouver une solution pour ce faire.</li> </ol> </li> <li> <p>Op\u00e9rations de tri :</p> <ol> <li>Trier les donn\u00e9es par ordre croissant de code postaux.</li> <li>Trier les donn\u00e9es d'Ouest en Est, puis du Nord au Sud.</li> <li>Trier les donn\u00e9es suivant deux crit\u00e8res : d'abord la commune, puis \u00e0 l'int\u00e9rieur de chaque commmune, selin le statut : public en premier, priv\u00e9 en dernier.</li> </ol> </li> <li> <p>Op\u00e9ration de jointure :</p> <ol> <li> <p>Importer le fichier CSV <code>population_Cantal.csv</code> et indexer les donn\u00e9es sous la forme d'un tableau de dictionnaires nomm\u00e9 <code>population</code> (Source des donn\u00e9es : Insee, Recensement de la population 2019). Ce fichier utilise l'encodage UTF-8. </p> <p> Ouvrir d'abord le fichier dans Notepad ++ et observer le d\u00e9limiteur utilis\u00e9, le nom des attributs, ...</p> </li> <li> <p>Combien d'enregistrements contient cette table ?</p> </li> <li>\u00c9crire les instructions permettant d'effectuer la jointure entre les tables <code>table_educ</code> et <code>population</code> sous la forme d'une table nomm\u00e9e <code>new_table</code> qui reprend tous les attributs de la table <code>table_educ</code> en ajoutant \u00e0 chaque enregistrement la population de la commune consid\u00e9r\u00e9e sous la forme d'un champ nomm\u00e9 \"population\".</li> <li>Enregistrer les donn\u00e9es de la table <code>new_table</code> dans un nouveau fichier CSV nomm\u00e9 <code>exo1_jointure.csv</code>.</li> <li>Ouvrir ce fichier dans un tableur. Certains enregistrements n'ont pas de valeur pour le champ \"population\". Chercher la cause de cette anomalie et essayer de la corriger.</li> </ol> </li> </ol> <p>\u00c0 retenir</p> <p>Lorsqu'on rapproche deux tables, il faut toujours veiller \u00e0 la coh\u00e9rence des noms des attributs, des formats des donn\u00e9es (domaines de valeurs), aux doublons, ...</p> <p>Cela implique souvent un travail pr\u00e9liminaire de formatage des donn\u00e9es avant de passer \u00e0 leur exploitation proprement dite. Ce formatage a \u00e9t\u00e9 fait pour vous dans cet exercice, sauf pour le petit probl\u00e8me restant qui est apparu dans la derni\u00e8re question.</p>"},{"location":"premiere/07_tables/tables_exos/#exercice-2","title":"Exercice 2","text":"<p>Pour s'entra\u00eener, on reprend le fichier <code>population_Cantal.csv</code>. Pour chaque question, \u00e9crire des instructions Python permettant d'y r\u00e9pondre. Vous pourrez dans certains cas proposer plusieurs solutions.</p> <ol> <li>Construire la table des m\u00eames donn\u00e9es, mais tri\u00e9es par population d\u00e9croissante.</li> <li>Faire le tableau des noms de communes dont le nom complet se termine par \"AC\". Combien y en a-t-il ?</li> <li>Construire la table des enregistrements correspondant aux communes dont la population est comprise au sens large entre 1000 et 2000 habitants.</li> <li>Question ouverte : construire le tableau des noms de communes qui sont compos\u00e9s de plusieurs mots.</li> </ol>"},{"location":"ressources/","title":"Ressources","text":"<p>Cette section regroupe des ressources transversales pour les avoir toujours sous la main.</p> <p></p>"},{"location":"ressources/Sources/","title":"Sources utilis\u00e9es","text":"<p>Pour r\u00e9diger ce cours et pr\u00e9parer les exercices, TP, projets pr\u00e9sent\u00e9s ici, j'ai utilis\u00e9 de nombreuses sources que je vais essayer de citer ici, sans pr\u00e9tendre \u00eatre exhaustif.</p> <ul> <li>Documents d'accompagnement Eduscol.</li> <li>Contenus du MOOC \"Num\u00e9rique et Sciences Informatiques : les fondamentaux\" de l'INRIA, disponible sur la plateforme fun-mooc.</li> <li>Apprendre \u00e0 programmer avec Python 3, G\u00e9rard Swinnen, \u00e9ditions Eyrolles, 2012. Disponible en ligne</li> <li>Le site interstices : https://interstices.info/.</li> <li>Les images et illustrations sont soit produites par mes soins, soit issues de Pixabay ou de Wikimedia commons ou encore de Pexels et, dans tous les cas, libres de droits.</li> <li>Cours de David Roche.</li> <li>Cours de Fr\u00e9d\u00e9ric Junier.</li> <li>Cours de Van Zuijlen St\u00e9phan.</li> <li>Cours de Konieczko Quentin</li> <li>Cours de Olivier L\u00e9cluse</li> <li>Cours du Lyc\u00e9e Blaise Pascal de Clermont-Ferrand</li> <li>Cours du lyc\u00e9e Champollion de Grenoble</li> <li>Cours du site Lyceum</li> <li>Cours du site Mon Lyc\u00e9e Num\u00e9rique</li> <li>Cours du Lyc\u00e9e Stanislas de Wissembourg</li> <li>Cours d'informatique de Fran\u00e7ois Brucker (\u00e9cole Centrale de Marseille)</li> <li>Cours de Philippe Rigaux sur les bases de donn\u00e9es.</li> <li>Cours de Gilles Lassus</li> <li>Le site MDN Web Docs : excellentissime ressource pour tout apprendre sur les langages HTML, CSS, Javascript et le protocole HTTP.</li> <li>Le site de M. JANVIER.</li> </ul>"},{"location":"ressources/exos/","title":"Exercices en ligne","text":"<p>Quelques liens vers des exercices auto-correctifs en ligne.</p>"},{"location":"ressources/exos/#plutot-pour-les-terminale","title":"Plut\u00f4t pour les Terminale","text":"<ul> <li>Exercices pour s'entra\u00eener \u00e0 l'\u00e9preuve pratique : e-nsi</li> </ul>"},{"location":"ressources/python_IDE/","title":"\u00c9diteurs de code pour Python","text":"<p>Remarquons tout d'abord que le langae Python existe sous plusieurs versions. Deux branches coexistent : la branche Python 2 et la branche Python 3, qui ne sont pas (compl\u00e8tement) compatibles. Nous n'utiliserons que Python 3, a priori dans sa derni\u00e8re version.</p>"},{"location":"ressources/python_IDE/#installation-sur-votre-machine","title":"Installation sur votre machine","text":""},{"location":"ressources/python_IDE/#idle","title":"Idle","text":"<p>Idle est l'\u00e9diteur Python fourni avec la distribution officielle du langage Python, t\u00e9l\u00e9charg\u00e9e depuis le site officiel : Site officiel.</p> <p></p> <p>Il s'agit d'un \u00e9diteur tr\u00e8s basique qui peut suffire \u00e0 notre usage. On trouvera cependant plus de confort \u00e0 l'usage d'un \u00e9diteur plus sophistiqu\u00e9.</p> <p>\u00c0 l'ouverture, on obtient une fen\u00eatre contenant la console interactive Python dans laquelle chaque instruction est ex\u00e9cut\u00e9e \"\u00e0 la vol\u00e9e\" quand la touche <code>Entr\u00e9e</code> est frapp\u00e9e. C'est utile pour faire des tests ou d\u00e9couvrir certaines fonctionnalit\u00e9s.</p> <p></p> <p>Pour \u00e9diter un programme, on ouvre une fen\u00eatre d'\u00e9dition par le menu File  New File. Une fois le programme \u00e9crit, on l'ex\u00e9cute en pressant la touche  (le fichier doit toujours \u00eatre enregistr\u00e9 auparavant). Les sorties du programme (affichages, messages d'erreurs, ...) apparaissent dans la fen\u00eatre de la console interactive.</p> <p></p>"},{"location":"ressources/python_IDE/#anaconda-spyder","title":"Anaconda Spyder","text":"<p>Pour une installation sur votre machine personnelle, je vous conseille Anaconda. Cette distribution fournit un environnement tr\u00e8s complet de logiciels et de biblioth\u00e8ques pour les sciences et le calcul scientifique.</p> <p></p> <p>Une fois Anaconda install\u00e9, nous pouvons utiliser l'\u00e9diteur Spyder pour travailler avec Python.</p> <p></p> <p>Vous trouverez dans Spyder, \u00e0 gauche, la zone d'\u00e9dition du code du programme, \u00e0 droite en haut l'explorateur de variables, outil tr\u00e8s int\u00e9ressant pour comprendre le fonctionnement du programme, et en bas la console interactive. Dans ces panneaux de droite peuvent aussi \u00eatre affich\u00e9es l'arborescence des fichiers ou la sortie graphique du programme, le cas \u00e9ch\u00e9ant. La disposition de l'interface est tr\u00e8s param\u00e9trable.</p> <p>Le logiciel fournit un mode de d\u00e9bogage qui permet d'ex\u00e9cuter un programme ligne apr\u00e8s ligne en observant l'\u00e9volution des variables dans l'explorateur de variables. Cette fonctionnalit\u00e9 s'av\u00e8re tr\u00e8s utile lors de la mise au point d'un programme.</p>"},{"location":"ressources/python_IDE/#jupyter-notebook","title":"Jupyter Notebook","text":"<p>Les notebooks Jupyter proposent une autre fa\u00e7on de travailler en Python, diff\u00e9rente du couple \"fen\u00eatre d'\u00e9dition\"+\"console interactive\".</p> <p></p> <p>Il s'agit d'une feuille compos\u00e9e d'une suite de cellules qui peuvent contenir du texte (dont la mise en forme peut se faire au format Markdown) ou du code Python ex\u00e9cutable en tapant Ctrl+Entr\u00e9e dans la cellule, ou en cliquant sur le bouton ad-hoc.</p> <p>Jupyter Notebook est inclu aussi dans la distribution Anaconda et on peut donc cr\u00e9er un notebook depuis Anaconda-Navigator. </p> <p>Cependant, cet outil n'est pas destin\u00e9 \u00e0 d\u00e9velopper un programme, mais il peut servir \u00e0 cr\u00e9er une d\u00e9monstration d'un programme \u00e9tape par \u00e9tape ou pour ... r\u00e9diger un \u00e9nonc\u00e9 de T.P. ou d'exercice ! Vous serez donc amen\u00e9s dans l'ann\u00e9e \u00e0 travailler sur des notebooks Jupyter.</p> <p>Ces notebooks peuvent aussi \u00eatre utilis\u00e9s en ligne. Ce site propose d'ailleurs une impl\u00e9mentation (Bashton notebook) : Jupyter Notebook (notebook.flallemand.fr).</p>"},{"location":"ressources/python_IDE/#utiliser-python-en-ligne","title":"Utiliser Python en ligne","text":"<p>Il est aussi possible de programmer en Python, au moins au d\u00e9but, en utilisant des services en ligne qui \u00e9vitent toute installation sur votre machine personnelle.</p> <ul> <li>En premier lieu, vous trouverez dans plusieurs pages de ce site un \u00e9diteur Python interactif. Il permet d'ex\u00e9cuter un programme et parfois aussi de tester sa validit\u00e9.</li> <li>Les notebooks Jupyter permettent de travailler en ligne : Jupyter Notebook (notebook.flallemand.fr). Accessible aussi \u00e0 partir du menu en haut de cette page.</li> <li>Toujours sur ce site, une section permet aussi de travailler en Python avec la console et l'\u00e9diteur de programme : Console Python (python.flallemand.fr). Accessible aussi \u00e0 partir du menu en haut de cette page.</li> <li>Python Tutor est un site int\u00e9ressant qui permet d'\u00e9diter un programme et de l'ex\u00e9cuter pas \u00e0 pas tout en observant l'\u00e9volution des variables.</li> <li>Replit est un service permettant l'\u00e9dition, l'ex\u00e9cution et le partage de programmes Python.</li> </ul>"},{"location":"ressources/python_IDE/#python-sur-votre-smartphone","title":"Python sur votre smartphone","text":"<p>Sur un smartphone fonctionnant sous android, vous pouvez installer l'application Pydroid3 qui permet de travailler avec Python, avec un \u00e9diteur de programmes, une console interactive et la possibilit\u00e9 d'installer des biblioth\u00e8ques suppl\u00e9mentaires.</p>"},{"location":"ressources/python_IDE/#python-au-lycee","title":"Python au lyc\u00e9e","text":"<p>\u00c0 l'heure actuelle, les postes sont tous pourvus de Python et donc de l'\u00e9diteur Idle pr\u00e9sent\u00e9 ci-dessus.</p> <p>La distribution Edupython est \u00e9galement install\u00e9e sur tous les postes du lyc\u00e9e.</p> <p></p> <p>L'\u00e9diteur associ\u00e9, nomm\u00e9 PyScripter, propose une zone d'\u00e9dition, une zone en bas de la fen\u00eatre pour la console interactive et un explorateur de fichier.</p> <p></p> <p>L'installation de nouvelles biblioth\u00e8ques et \u00e9galement possible, ainsi que le d\u00e9bogage pas \u00e0 pas du programme.</p> <p>EduPython ne fonctionne que sous Windows. Pour une installation personnelle, on lui pr\u00e9f\u00e8rera Anaconda (voir ci-dessus).</p> <p>Nouveaut\u00e9 pr\u00e9vue \u00e0 la rentr\u00e9e 2022 : Spyder sera disponible sur les postes du lyc\u00e9e.</p>"},{"location":"ressources/spyder/","title":"Prise en main de Spyder","text":"<p>Pour une prise en main rapide de Spyder, je vous conseille de visionner cette courte vid\u00e9o de pr\u00e9sentation :</p> <p>Pour aller plus loin, vous pouvez vous plonger dans la documentation officielle, en anglais, qui comporte aussi trois vid\u00e9os de pr\u00e9sentation :</p>"},{"location":"scripts/essai_REM/","title":"essai REM","text":"<p>Remarques et correction</p> <p>Note</p> <p>encore une remarque</p>"},{"location":"seconde/","title":"Seconde : SNT","text":"<p>\u00e0 venir</p>"},{"location":"terminale/","title":"Terminale NSI","text":""},{"location":"terminale/#programme-officiel","title":"Programme officiel","text":"<p>Fichier \u00e0 t\u00e9l\u00e9charger...</p>"},{"location":"terminale/#nature-de-lepreuve-de-nsi-au-bac-en-terminale","title":"Nature de l'\u00e9preuve de NSI au bac en Terminale","text":"<p>D'apr\u00e8s le Bulletin Officiel n\u00b036 du 30 septembre 2022 :</p> <ul> <li>Dur\u00e9e : 3 heures 30 + 1 heure</li> <li>Coefficient : 16</li> <li> <p>Format : L'\u00e9preuve terminale obligatoire de sp\u00e9cialit\u00e9 est compos\u00e9e de deux parties : </p> <ul> <li>une partie \u00e9crite, comptant pour 12 points sur 20,</li> <li>une partie pratique comptant pour 8 points sur 20.</li> </ul> </li> </ul> <p>Partie \u00e9crite de l'\u00e9preuve de NSI au bac en terminale</p> <ul> <li>Dur\u00e9e : 3 heures 30</li> <li> <p>Modalit\u00e9s : La partie \u00e9crite consiste en la r\u00e9solution de trois exercices permettant d'\u00e9valuer les connaissances et les capacit\u00e9s attendues conform\u00e9ment aux programmes de premi\u00e8re et de terminale de la sp\u00e9cialit\u00e9.</p> <p>Chaque exercice est not\u00e9 sur 4 points.</p> <p>Le sujet comporte trois exercices ind\u00e9pendants les uns des autres, qui permettent d'\u00e9valuer les connaissances et comp\u00e9tences des candidats.</p> </li> </ul>"},{"location":"terminale/#points-du-programme-evaluables-lors-de-lepreuve-ecrite","title":"Points du programme \u00e9valuables lors de l'\u00e9preuve \u00e9crite","text":"<p>R\u00e9f\u00e9rence : Bulletin officiel n\u00b036 du 30 septembre 2022</p> <ul> <li> <p>Th\u00e8me 2 \u2013 Structures de donn\u00e9es</p> <ul> <li>Structures de donn\u00e9es, interface et impl\u00e9mentation.</li> <li>Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets.</li> <li>Listes, piles, files : structures lin\u00e9aires. Dictionnaires, index et cl\u00e9.</li> <li>Arbres : structures hi\u00e9rarchiques. Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits.</li> </ul> </li> <li> <p>Th\u00e8me 3 \u2013 Bases de donn\u00e9es</p> <ul> <li>Mod\u00e8le relationnel : relation, attribut, domaine, clef primaire, clef \u00e9trang\u00e8re, sch\u00e9ma relationnel.</li> <li>Base de donn\u00e9es relationnelle.</li> <li>Langage SQL : requ\u00eates d\u2019interrogation et de mise \u00e0 jour d\u2019une base de donn\u00e9es.</li> </ul> </li> <li> <p>Th\u00e8me 4 \u2013 Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux</p> <ul> <li>Gestion des processus et des ressources par un syst\u00e8me d\u2019exploitation.</li> <li>Protocoles de routage.</li> </ul> </li> <li> <p>Th\u00e8me 5 \u2013 Langages et programmation</p> <ul> <li>R\u00e9cursivit\u00e9.</li> <li>Modularit\u00e9.</li> <li>Mise au point des programmes. Gestion des bugs.</li> </ul> </li> <li> <p>Th\u00e8me 6 \u2013 Algorithmique</p> <ul> <li>Algorithmes sur les arbres binaires et sur les arbres binaires de recherche.</li> <li>M\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb</li> </ul> </li> </ul>"},{"location":"terminale/#points-du-programme-non-evalues-a-lecrit","title":"Points du programme non \u00e9valu\u00e9s \u00e0 l'\u00e9crit","text":"<ul> <li>Th\u00e8me 1 \u2013 Histoire de l\u2019informatique</li> <li> <p>Th\u00e8me 2 \u2013 Structures de donn\u00e9es</p> <ul> <li>Graphes : structures relationnelles. Sommets, arcs, ar\u00eates, graphes orient\u00e9s ou non orient\u00e9s.</li> </ul> </li> <li> <p>Th\u00e8me 3 \u2013 Bases de donn\u00e9es</p> <ul> <li>Syst\u00e8me de gestion de bases de donn\u00e9es relationnelles.</li> </ul> </li> <li> <p>Th\u00e8me 4 \u2013 Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux</p> <ul> <li>Composants int\u00e9gr\u00e9s d\u2019un syst\u00e8me sur puce.</li> <li>S\u00e9curisation des communications.</li> </ul> </li> <li> <p>Th\u00e8me 5 \u2013 Langages et programmation</p> <ul> <li>Notion de programme en tant que donn\u00e9e. Calculabilit\u00e9, d\u00e9cidabilit\u00e9.</li> <li>Paradigmes de programmation</li> </ul> </li> <li> <p>Th\u00e8me 6 \u2013 Algorithmique</p> <ul> <li>Algorithmes sur les graphes.</li> <li>Programmation dynamique.</li> <li>Recherche textuelle.</li> </ul> </li> </ul>"},{"location":"terminale/#partie-pratique-de-lepreuve-de-nsi-au-bac-en-terminale","title":"Partie pratique de l'\u00e9preuve de NSI au bac en terminale","text":"<ul> <li>Dur\u00e9e : 1 heure</li> <li> <p>Modalit\u00e9s : La partie pratique consiste en la r\u00e9solution de deux exercices sur ordinateur, chacun \u00e9tant not\u00e9 sur 4 points.</p> <p>Le candidat est \u00e9valu\u00e9 sur la base d'un dialogue avec un professeur-examinateur.</p> <p>Un examinateur \u00e9value au maximum quatre \u00e9l\u00e8ves. L'examinateur ne peut pas \u00e9valuer un \u00e9l\u00e8ve qu'il a eu en classe durant l'ann\u00e9e en cours.</p> <p>L'\u00e9valuation de cette partie se d\u00e9roule au cours du deuxi\u00e8me trimestre pendant la p\u00e9riode de l'\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9. </p> <ul> <li> <p>Premier exercice</p> <p>Le premier exercice consiste \u00e0 programmer un algorithme figurant explicitement au programme, ne pr\u00e9sentant pas de difficult\u00e9 particuli\u00e8re, dont on fournit une sp\u00e9cification.</p> <p>Il s'agit donc de restituer un algorithme rencontr\u00e9 et travaill\u00e9 \u00e0 plusieurs reprises en cours de formation.</p> <p>Le sujet peut proposer un jeu de test avec les r\u00e9ponses attendues pour permettre au candidat de v\u00e9rifier son travail.</p> </li> <li> <p>Deuxi\u00e8me exercice</p> <p>Pour le second exercice, un programme est fourni au candidat.</p> <p>Cet exercice ne demande pas l'\u00e9criture compl\u00e8te d'un programme, mais permet de valider des comp\u00e9tences de programmation suivant des modalit\u00e9s vari\u00e9es : le candidat doit, par exemple, compl\u00e9ter un programme \u00ab \u00e0 trous \u00bb afin de r\u00e9pondre \u00e0 une sp\u00e9cification donn\u00e9e, ou encore compl\u00e9ter un programme pour le documenter, ou encore compl\u00e9ter un programme en ajoutant des assertions, etc.</p> </li> </ul> </li> </ul>"},{"location":"terminale/EP2023/","title":"\u00c9preuve Pratique BNS 2023","text":"<p>Cette page est issue du site de F. NATIVEL o\u00f9 vous trouverez aussi les corrig\u00e9s de tous les exercices.</p> <p>Attention : signification des ic\u00f4nes</p> <ul> <li> : indique un nouveau sujet par rapport \u00e0 la session 2022, si cette ic\u00f4ne n'est pas pr\u00e9sente, le sujet est identique ou diff\u00e8re l\u00e9g\u00e8rement d'un sujet de le session 2022</li> <li> : indique que le sujet contient un ou plusieurs bugs</li> <li> : indique que le sujet propose un exercice en rapport avec les math\u00e9matiques</li> <li> : sujet jug\u00e9 difficile</li> <li> : faire attention, le sujet est hors programme, inhabituel ou contient des techniques de programmations probl\u00e9matiques</li> </ul> Num\u00e9ro Lien de t\u00e9l\u00e9chargement Th\u00e8me exercice 1 Th\u00e8me exercice 2 Code fourni 1 Sujet N\u00b01 Verifier qu'un tableau est tri\u00e9 D\u00e9pouillement d'un vote (dictionnaire)  Code 2 Sujet N\u00b02 Liste des indices du maximum Pile des \u00e9l\u00e9ments positifs  Code 3 Sujet N\u00b03 Moyenne pond\u00e9r\u00e9e Codage d'une image (liste de listes)  Code 4 Sujet N\u00b04 Pr\u00e9sence de doublons dans une liste tri\u00e9e Cr\u00e9ation de grille au d\u00e9mineur  Code 5 Sujet N\u00b05 Simulation de lancers de d\u00e9s Repr\u00e9sentation d'une image par une liste de listes  Code 6 Sujet N\u00b06 Recherche de la derni\u00e8re occurrence Plus courte distance entre un point et une liste de points  Code 7 Sujet N\u00b07 Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es Conversion de nombres en chiffres romains  Code 8 Sujet N\u00b08 Recherche de maximum dans un dictionnaire Evaluation d'une expression en notation postfixe (pile)  Code 9 Sujet N\u00b09 Multiplication avec uniquement additions et soustractions Recherche dichotomique r\u00e9cursive  Code 10 Sujet N\u00b010 Maximum des \u00e9l\u00e9ments d'un tableau Parenth\u00e9sage correct (pile)  Code 11 Sujet N\u00b011 Conversion du binaire vers le d\u00e9cimal Tri par insertion  Code 12 Sujet N\u00b012 Ajout d'une cl\u00e9 dans un arbre binaire (r\u00e9cursivit\u00e9) Algorithme glouton pour un rangement d'objet  Code 13 Sujet N\u00b013 Nombre d'occurrences d'un \u00e9l\u00e9ment dans une liste Rendu de monnaie  Code 14 Sujet N\u00b014 Recherche de l'indice de la premi\u00e8re occurrence insertion dans une liste d\u00e9j\u00e0 tri\u00e9e  Code 15 Sujet N\u00b015 Minimum d'une liste de temp\u00e9rature Palindromes  Code 16 Sujet N\u00b016 Liste des indices des \u00e9l\u00e9ments inf\u00e9rieures \u00e9gaux et sup\u00e9rieurs \u00e0 une valeur  Code 17 Sujet N\u00b017 Moyenne pond\u00e9r\u00e9e Triangle de Pascal  Code 18 Sujet N\u00b018 Valeur et indice du maximum Ordre des g\u00e8nes sur un chromosome  Code 19 Sujet N\u00b019 Recherche dichotomique Code de C\u00e9sar  Code 20 Sujet N\u00b020 Fusion de deux dictionnaires Simulation d'un jeu de d\u00e9s  Code 21 Sujet N\u00b021 Codage par diff\u00e9rence Expression arithm\u00e9tique repr\u00e9sent\u00e9e par un arbre binaire  Code 22 Sujet N\u00b022 Calcul de puissances avec multiplication successives Codage d'un mot  Code 23 Sujet N\u00b023 Traitement de donn\u00e9es en table (animaux et enclos) Recherche r\u00e9cursive dans un tableau  Code 24 Sujet N\u00b024 Nombre d'occurrences des caract\u00e8res (dictionnaire) Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es  Code 25 Sujet N\u00b025 Enum\u00e9ration des positions des \u00e9l\u00e9ments dans une liste (dictionnaire) Arbre binaire (r\u00e9cursivit\u00e9)  Code 26 Sujet N\u00b026 Multiplications avec uniquement additions et soustractions Recherche par dichotomique  Code 27 Sujet N\u00b027 Premi\u00e8re occurence du minimum Separation des 0 et des 1 dans un tableau  Code 28 Sujet N\u00b028 Moyenne des \u00e9l\u00e9ments d'un tableau Recherche par dichotomie  Code 29 Sujet N\u00b029 Taille d'un arbre binaire Insertion d'un \u00e9l\u00e9ment dans une liste \u00e0 une position donn\u00e9e  Code 30 Sujet N\u00b030 Calcul de moyenne Conversion du d\u00e9cimal vers le binaire  Code 31 Sujet N\u00b031 Nombre d'occurrences d'un \u00e9l\u00e9ment dans une liste Conversion du d\u00e9cimal vers le binaire  Code 32 Sujet N\u00b032 Minimum et maximum des \u00e9l\u00e9ments d'un tableau Classe repr\u00e9sentant des cartes (POO)  Code 33 Sujet N\u00b033 Taille d'un arbre binaire (r\u00e9cursivit\u00e9) Tri par s\u00e9lection  Code 34 Sujet N\u00b034 Calcul d'une moyenne S\u00e9paration des 0 et des 1 dans un tableau  Code 35 Sujet N\u00b035 Ou exclusif bit \u00e0 bit entre deux listes de 0 et de 1 Carr\u00e9s semi-magiques  Code 36 Sujet N\u00b036 Liste des couples d'entiers cons\u00e9cutifs Codage d'une image  Code 37 Sujet N\u00b037 Indice de la derni\u00e8re occurence Classe des adresse Ip (POO)  Code 38 Sujet N\u00b038 Mots correspondants \u00e0 un motif Recherche d'un cycle  Code 39 Sujet N\u00b039 Calcul des termes de la suite de Fibonacci Liste des \u00e9l\u00e8ves ayant obtenu la note maximale  Code 40 Sujet N\u00b040 Nombnre de mots dans une phrase Arbre binaire (POO)  Code 41 Sujet N\u00b041 Nombre d'occurrences d'un caract\u00e8res dans une chaine Rendu de monnaie en r\u00e9cursif  Code 42 Sujet N\u00b042 Tri par s\u00e9lection Jeu du plus ou moins  Code 43 Sujet N\u00b043 Conversion du d\u00e9cimal vers le binaire Tri \u00e0 bulles  Code 44 Sujet N\u00b044 Ecriture d'une chaine de caract\u00e8res \u00e0 l'envers Crible d'Erasthot\u00e8ne  Code 45 Sujet N\u00b045 Tri par d\u00e9nombrement Conversion binaire vers d\u00e9cimal et inversement  Code"},{"location":"terminale/annales/","title":"Sujet des \u00e9preuves \u00e9crites class\u00e9s par ann\u00e9e et par th\u00e8mes","text":""},{"location":"terminale/annales/#annee-2022","title":"Ann\u00e9e 2022","text":"Sujet Corrig\u00e9 Th\u00e8mes abord\u00e9s Polyn\u00e9sie Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : programmation, r\u00e9cursivit\u00e9 ; Ex 2 : architecture mat\u00e9rielle, ordonnancement, bool\u00e9ens ; Ex 3 : bases de donn\u00e9es ; Ex 4 : structures de donn\u00e9es, piles ; Ex 5 : algorithmique, arbres binaires Centre \u00e9trangers Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : structures de donn\u00e9es (liste, p-uplets, dictionnaires) ; Ex 2 : structures de donn\u00e9es, Python (files, POO) ; Ex 3 : structures de donn\u00e9es (dictionnaires) ; Ex 4 : bases de donn\u00e9es ; Ex 5 : architecture mat\u00e9rielle, r\u00e9seaux, routage Centre \u00e9trangers Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : programmation, r\u00e9cursivit\u00e9 ; Ex 2 : structures de donn\u00e9es, dictionnaires ; Ex 3 : BDD ; Ex 4 : POO ; Ex 5 : architectures mat\u00e9rielles, syst\u00e8mes d'exploitation, protocoles de routage M\u00e9tropole Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : structures de donn\u00e9es ; Ex 2 : BDD ; Ex 3 : binaire, routage ; Ex 4 : arbres binaires, diviser pour r\u00e9gner, r\u00e9cursivit\u00e9 : Ex 5 : POO M\u00e9tropole Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : arbres binaires de recherche, POO, r\u00e9cursivit\u00e9 ; Ex 2 : structures de donn\u00e9es (piles) ; Ex 3 : r\u00e9seaux, routage ; Ex 4 : BDD ; Ex 5 : POO, diviser pour r\u00e9gner Mayotte-Liban Sujet 1 Ex 1 : structures de donn\u00e9es (listes, piles et files) ; Ex 2 : POO ; Ex 3 : BDD ; Ex 4 : algorithmique (arbres binaires en profondeurs pr\u00e9fixe et infixe ; Ex 5 : transmission de donn\u00e9es dans un r\u00e9seau, architecture d\u2019un r\u00e9seau, protocoles de routage, langages et programmation Mayotte-Liban Sujet 2 Ex 1 : structures de donn\u00e9es (pile) ; Ex 2 : BDD ; Ex 3 : repr\u00e9sentation binaire d\u2019un entier relatif et les syst\u00e8mes d\u2019exploitation ; Ex 4 : arbres binaires de recherche ; Ex 5 : algorithmique, Python Asie Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : algorithmique \u2013 cha\u00eenes de caract\u00e8res \u2013 complexit\u00e9 ; Ex 2 : BDD ; Ex 3 : syst\u00e8me d\u2019exploitation ; Ex 4 : POO ; Ex 5 : Python Asie Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : syst\u00e8mes d\u2019exploitation linux ; Ex 2 : arbres binaires de recherche ; Ex 3 : structures de donn\u00e9es, programmation ; Ex 4 : BDD ; Ex 5 : Ex\u00e9cution de programmes, recherche et corrections de bugs Am\u00e9rique du Nord Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : BDD ; Ex 2 : r\u00e9seaux et protocoles de routage ; Ex 3 : arbres binaires de recherche et algorithmique ; Ex 4 : cha\u00eenes de caract\u00e8res, tableaux, Python ; Ex 5 : Files, tableaux et algorithmique Am\u00e9rique du Nord Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : arbres binaires de recherche, POO ; Ex 2 : syst\u00e8me d'exploitation, processus ; Ex 3 : BDD ; Ex 4 : arbres binaires, algorithmique ; Ex 5 : tableaux, Python"},{"location":"terminale/annales/#annee-2021","title":"Ann\u00e9e 2021","text":"Sujet Corrig\u00e9 Th\u00e8mes abord\u00e9s Sujet z\u00e9ro Corrig\u00e9 de D. ROCHE Ex 1 : piles ; Ex 2 : r\u00e9cursivit\u00e9 ; Ex 3 : arbres binaires, arbres binaire de recherche ; Ex 4 : BDD ; Ex 5 : r\u00e9seaux, protocoles RIP et OSPF Am\u00e9rique du Nord Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : BDD ; Ex 2 : routage, processus, SOC ; Ex 3 : tableaux ; Ex 4 : arbres binaires, algorithmique ; Ex 5 : piles, files Centres \u00e9trangers Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : POO ; Ex 2 : dictionnaires ; Ex 3 : arbres binaires de recherche ; Ex 4 : r\u00e9seaux ; Ex 5 : piles Centres \u00e9trangers Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : piles ; Ex 2 : programmation, tuples, listes ; Ex 3 : conversion d\u00e9cimal/binaire, table de v\u00e9rit\u00e9, codage des caract\u00e8res ; Ex 4 : BDD ; Ex 5 : nano-ordinateur Raspberry Pi en langage Python M\u00e9tropole Candidat Libre Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : BDD ; Ex 2 : piles, POO ; Ex 3 : processus, protocoles de routage ; Ex 4 : tableaux, programmation ; Ex 5 : tableaux, r\u00e9cursivit\u00e9, diviser pour r\u00e9gner M\u00e9tropole Candidat Libre Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : BDD ; Ex 2 : processus ; Ex 3 : arbres binaires de recherche, POO ; Ex 4 : r\u00e9cursivit\u00e9, programmation ; Ex 5 : tableaux, programmation M\u00e9tropole Sujet 1 Corrig\u00e9 de D. ROCHE Ex 1 : arbres binaires de recherche, POO ; Ex 2 : processus, op\u00e9rateurs bool\u00e9ens ; Ex 3 : BDD : Ex 4 : tri fusion, diviser pour r\u00e9gner ; Ex 5 : r\u00e9seaux, protocoles de routage M\u00e9tropole Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : arbres, POO ; Ex 2 : BDD ; Ex 3 : r\u00e9seaux, protocoles de routage ; Ex 4 : syst\u00e8mes d'exploitation, processus ; Ex 5 : structures de donn\u00e9es lin\u00e9aires Polyn\u00e9sie Sujet 2 Ex 1 : algorithmes de tri ; Ex 2 : BDD ; Ex 3 : arbres binaires de recherche, POO ; Ex 4 : architectures mat\u00e9rielles, syst\u00e8mes d'exploitation, routage ; Ex 5 : BDD M\u00e9tropole Septembre Sujet 1 Ex 1 : protocoles de communication, architecture r\u00e9seau, routage ; Ex 2 : algorithmique, r\u00e9cursivit\u00e9 ; Ex 3 : BDD ; Ex 4 : POO, sp\u00e9cification ; Ex 5 : arbre, arbre binaire, pile M\u00e9tropole Septembre Sujet 2 Corrig\u00e9 de D. ROCHE Ex 1 : protocoles de communication, r\u00e9seaux, protocoles de routage ; Ex 2 : tableaux, dictionnaires, sp\u00e9cification, programmation ; Ex 3 : BDD ; Ex 4 : POO, sp\u00e9cification ; Ex 5 : traitement des donn\u00e9es en tables, programmation, sp\u00e9cification"},{"location":"terminale/epreuve_pratique/","title":"Sujets \u00e9preuve pratique","text":"<p>Les sujets possibles de l'\u00e9preuve pratique sont publics et disponibles sur cette page EDUSCOL.</p> <p>Voici quelques corrig\u00e9s, la liste sera compl\u00e9t\u00e9e au fur et \u00e0 mesure de l'ann\u00e9e.</p> <ul> <li>Sujet 2022-04 : corrig\u00e9.</li> <li>Sujet 2022-40 : corrig\u00e9.</li> </ul>"},{"location":"terminale/01_langages/","title":"S1-Langages et programmation","text":"<p>Points du programme trait\u00e9s dans cette s\u00e9quence :</p> Contenus Capacit\u00e9s attendues Commentaires R\u00e9cursivit\u00e9. \u00c9crire un programme r\u00e9cursif. Analyser le fonctionnement d\u2019un programme r\u00e9cursif. Des exemples relevant de domaines vari\u00e9s sont \u00e0 privil\u00e9gier. Paradigmes de programmation. Distinguer sur des exemples les paradigmes imp\u00e9ratif, fonctionnel et objet. Choisir le paradigme de programmation selon le champ d\u2019application d\u2019un programme. Avec un m\u00eame langage de programmation, on peut utiliser des paradigmes diff\u00e9rents. Dans un m\u00eame programme, on peut utiliser des paradigmes diff\u00e9rents. Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets. \u00c9crire la d\u00e9finition d\u2019une classe. Acc\u00e9der aux attributs et m\u00e9thodes d\u2019une classe. On n\u2019aborde pas ici tous les aspects de la programmation objet comme le polymorphisme et l\u2019h\u00e9ritage."},{"location":"terminale/01_langages/01_recursivite/essentiel/","title":"L'essentiel","text":""},{"location":"terminale/01_langages/01_recursivite/essentiel/#1-motivation-et-introduction-du-concept","title":"1. Motivation et introduction du concept","text":"<p>Un algorithme est dit r\u00e9cursif s'il s'appelle lui-m\u00eame directement ou indirectement via l'appel d'une ou de plusieurs autres fonctions qui elles-m\u00eames finissent par l'appeler.</p>"},{"location":"terminale/01_langages/01_recursivite/essentiel/#2-mecanisme","title":"2. M\u00e9canisme","text":"<p>L'ex\u00e9cution d'une fonction r\u00e9cursive conduit \u00e0 la construction d'une pile d'ex\u00e9cution dans laquel chacun des appels est conserv\u00e9 avec son contexte (ses variables locales, ...) : </p> <p></p>"},{"location":"terminale/01_langages/01_recursivite/essentiel/#3-ecrire-un-algorithme-recursif","title":"3. \u00c9crire un algorithme r\u00e9cursif","text":"<p>Les trois r\u00e8gles de r\u00e9cursivit\u00e9</p> <ol> <li>La fonction s'appelle elle-m\u00eame !</li> <li>La fonction comporte un \"cas de base\" qui correspond \u00e0 une condition d'arr\u00eat.</li> <li>L'algorithme conduit vers le cas de base : il n'y a pas une infinit\u00e9 d'appels r\u00e9cursifs. (preuve de terminaison)</li> </ol>"},{"location":"terminale/01_langages/01_recursivite/essentiel/#4-fonction-recursive-et-fonction-iterative","title":"4. Fonction r\u00e9cursive et fonction it\u00e9rative","text":"<p>Toute fonction r\u00e9cursive peut s'\u00e9crire sous forme it\u00e9rative. La m\u00e9thode r\u00e9cursive peut poser des probl\u00e8mes d'occupation de la m\u00e9moire en cas d'un trop grand nombre d'appels r\u00e9cursifs.</p>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p> <p>Attention !</p> <p>Les exercices suivants comportent \u00e9galement quelques compl\u00e9ments de cours.</p> <p>Les exemples pr\u00e9sent\u00e9s dans ces exercices sont  des exemples tr\u00e8s classiques qu'il faut conna\u00eetre.</p>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-1-factorielle","title":"Exercice 1 : factorielle","text":"<p>On rappelle l'exemple du premier paragraphe du cours concernant le calcul de la factorielle \\(n!=1\\times 2\\times 3\\times\\ldots\\times n\\) d'un entier naturel \\(n\\), dans sa version r\u00e9cursive.</p> \ud83d\udc0d Script Python<pre><code>  def fact(n):\n\"\"\"Renvoie la factorielle de n (m\u00e9thode r\u00e9cursive).\"\"\"\n    if n == 0:\n      res = 1\n    else:\n      res = n*fact(n-1)\n    return res\n</code></pre> <ol> <li>Dans cette fonction, quel est le cas de base ?</li> <li>D\u00e9montrer que l'algorithme se termine (preuve de terminaison) d\u00e8s lors que l'argument \\(n\\) donn\u00e9 initialement est un entier naturel.</li> <li>Que se passe-t-il si on appelle la fonction <code>fact</code> avec \\(n=-2\\) ? Proposer une modification de la fonction pour traiter ce type de cas.</li> <li> <p>Pour d\u00e9montrer que cet algorithme renvoie bien \\(n!\\) lorsque \\(n\\) est un entier naturel, on peut proc\u00e9der par un raisonnement par r\u00e9currence.</p> <ul> <li>Cas de base : pour \\(n=0\\), la fonction renvoie-t-elle \\(0!\\) ?</li> <li>Hypoth\u00e8se : on suppose que, pour une certaine valeur de l'entier naturel non nul \\(n\\), <code>fact(n-1)</code> renvoie \\((n-1)!\\). Montrer que, sous cette hypoth\u00e8se, <code>fac(n)</code> renvoie bien \\(n!\\).</li> <li>Conclusion : en d\u00e9duire que <code>fac(n)</code> renvoie \\(n!\\) pour tout entier naturel \\(n\\).</li> </ul> </li> <li> <p>Pour \u00e9valuer la complexit\u00e9 de cet algorithme, nous allons compter le nombre de multiplications et de comparaisons effectu\u00e9es. D\u00e9montrer, \u00e0 l'aide d'un raisonnement pas r\u00e9currence, que la complexit\u00e9 de cet algorithme est en \\(\\mathcal{O}(n)\\).</p> </li> </ol> <p>\u00c0 retenir ...</p> <ul> <li>Le principe de la preuve de terminaison.</li> <li>Le principe du raisonnement pas r\u00e9currence</li> </ul>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-2-suite-de-fibonacci","title":"Exercice 2 : suite de Fibonacci","text":"<p>La suite de Fibonacci est une suite de nombres entiers not\u00e9s \\(F_n\\), d\u00e9finie par \\(F_0=0\\), \\(F_1=1\\) et dans laquelle chaque terme est \u00e9gal \u00e0 la somme des deux termes qui le pr\u00e9c\u00e8dent.</p> <ol> <li>Calculer \\(F_n\\) \u00e0 la main pour les valeurs de \\(n\\) allant de 2 jusqu'\u00e0 5.</li> <li> <p>Recopier et compl\u00e9ter le code de la fonction <code>fibo_iter</code> qui retourne \\(F_n\\) en utilisant un algorithme it\u00e9ratif.</p> \ud83d\udc0d Script Python<pre><code>def fibo_iter(n: int) -&gt; int:\n\"\"\"Suite de Fibonacci, version it\u00e9rative\"\"\"\n    if n == 0:\n        return 0\n    else:\n        f0, f1 = 0, 1\n        for k in range(1, n):\n            f0, f1 = ...  # Ligne \u00e0 compl\u00e9ter ...\n        return f1\n\n\nfor k in range(10):\n    print(fibo_iter(k))\n</code></pre> </li> <li> <p>\u00c9valuer la complexit\u00e9 en terme de nombre d'additions.</p> </li> <li> <p>D'apr\u00e8s la d\u00e9finition de la suite, on a, pour tout entier naturel \\(n\\geqslant 2\\) : </p> \\[F_{n}=F_{n-2}+F_{n-1}\\] <p>En d\u00e9duire une version r\u00e9cursive de l'algorithme de calcul de \\(F_n\\). Cet algorithme a ceci de particulier que chaque fonction proc\u00e8de \u00e0 deux appels r\u00e9cursifs. On pourra recopier et compl\u00e9ter le code ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>def fibo_rec(n: int) -&gt; int:\n\"\"\"Suite de Fibonacci version r\u00e9cursive\"\"\"\n    # Cas de base\n    if ...:\n        return n\n    # R\u00e9cursion\n    else:\n        return ...\n\n\nfor k in range(10):\n    print(fibo_rec(k))\n</code></pre> </li> <li> <p>Utiliser chacune des deux versions pour calculer la valeur de \\(F_{50}\\). Que constate-t-on ? Expliquer.</p> </li> </ol> Remarques et compl\u00e9ments <p>La version r\u00e9cursive se r\u00e9v\u00e8le beaucoup moins efficace. Pour comprendre pourquoi, nous pouvons repr\u00e9senter par un arbre les appels r\u00e9cursifs n\u00e9cessaires.</p> <pre><code>flowchart TD\n    id1(\"fib_rec(5)\") --&gt; id2(\"fib_rec(3)\");\n    id1 --&gt; id3(\"fib_rec(4)\");\n    id2 --&gt; id4[\"fib_rec(1)\"];\n    id2 --&gt; id5(\"fib_rec(2)\");\n    id3 --&gt; id6(\"fib_rec(2)\");\n    id3 --&gt; id7(\"fib_rec(3)\");\n    id5 --&gt; id8[\"fib_rec(0)\"];\n    id5 --&gt; id9[\"fib_rec(1)\"];\n    id6 --&gt; id10[\"fib_rec(0)\"];\n    id6 --&gt; id11[\"fib_rec(1)\"];\n    id7 --&gt; id12[\"fib_rec(1)\"];\n    id7 --&gt; id13(\"fib_rec(2)\");\n    id13 --&gt; id14[\"fib_rec(0)\"];\n    id13 --&gt; id15[\"fib_rec(1)\"];</code></pre> <p>On retrouve les cas de base dans les feuilles de l'arbre. Nous pouvons constater que le nombre d'appels r\u00e9cursifs est tr\u00e8s grand. Il est possible de d\u00e9montrer que ce nombre augmente de fa\u00e7on exponentielle. Pour calculer \\(F_{100}\\), il y aurait environ \\(10^{20}\\) op\u00e9rations. \u00c0 raison de \\(10^9\\) op\u00e9rations par seconde, la calcul prendra de l'ordre de \\(10^{11}\\) secondes, soit environ 3 000 ans !</p> <p>Un autre constat qui montre l'inefficacit\u00e9 de ce programme : plusieurs calculs identiques sont r\u00e9p\u00e9t\u00e9s plusieurs fois. On calcule par exemple \\(F_3\\) deux fois et \\(F_2\\) trois fois. Une solution meilleure serait de garder en m\u00e9moire les \u00e9l\u00e9ments d\u00e9j\u00e0 calcul\u00e9s et de ne calculer que les nouveaux \u00e9l\u00e9ments encore jamais rencontr\u00e9s. Une telle d\u00e9marche rel\u00e8ve de la programmation dynamique qui sera abord\u00e9e en fin d'ann\u00e9e.</p> <p>Pour satisfaire votre curiosit\u00e9 insatiable, vous pouvez d\u00e9j\u00e0 observer et tester le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def fibo_dyn(n: int, suite: dict = {0: 0, 1: 1}) -&gt; int:\n\"\"\"Suite de Fibonacci version dynamique\"\"\"\n    # Cas de base\n    if n == 0 or n == 1:\n        return n\n    # R\u00e9cursion\n    else:\n        # Si Fn est d\u00e9j\u00e0 calcul\u00e9, on le retourne\n        if n in suite.keys():\n            return suite[n]\n        else:\n            # Sinon, on le calcule et on le garde en m\u00e9moire\n            f = fibo_dyn(n-2, suite) + fibo_dyn(n-1, suite)\n            suite[n] = f\n            return f\n\n\nfor k in range(10):\n    print(fibo_dyn(k))\n</code></pre> <p>Une ex\u00e9cution dans PythonTutor est instructive :</p> <p> </p> <p>Voir cet article du blog qui explique comment visualiser le temps d'ex\u00e9cution d'une fonction.</p>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-3-calcul-de-xn","title":"Exercice 3 : calcul de \\(x^n\\)","text":"<p>Pour tout nombre r\u00e9el \\(x\\) et tout entier naturel \\(n\\), \\(x^n\\) est d\u00e9fini par \\(x^0=1\\) et, pour \\(n&gt;0\\), \\(x^n=x\\times x\\times x\\times \\ldots \\times x\\) : produit de \\(n\\) facteurs tous \u00e9gaux \u00e0 \\(x\\).</p> <p>Les r\u00e8gles de calcul sur les exposants permettent d'affirmer que, pour \\(n&gt;0\\), \\(x^n=x\\times x^{n-1}\\).</p> <ol> <li>\u00c9crire la fonction r\u00e9cursive <code>puissance(x,n)</code> qui calcule le nombre \\(x^n\\)  pour tout entier naturel \\(n\\).</li> <li>Dessiner l'arbre d'appels de cette fonction pour \\(x=3\\) et \\(n=5\\).</li> <li> <p>Pour les plus rapides</p> Question bonus <p>Un autre m\u00e9thode de calcul de \\(x^n\\) consiste \u00e0 distinguer le cas o\u00f9 \\(n\\) est pair et celui o\u00f9 \\(n\\) est impair :</p> <ul> <li>si \\(n=0\\), alors \\(x^n=1\\) ;</li> <li>si \\(n\\) est pair, alors \\(x^n=\\left(x^{n/2}\\right)^2\\) ;</li> <li>si \\(n\\) est impair, alors \\(x^n=x\\times\\left(x^{(n-1)/2}\\right)^2\\).</li> </ul> <p>L'algorithme qui d\u00e9coule de cette d\u00e9finition porte \u00e9galement le nom d'exponentiation rapide. Comme son nom l'indique, il s'agit d'un algorithme particuli\u00e8rement efficace pour calculer rapidement de grandes puissances enti\u00e8res.</p> <p>\u00c9crire la fonction r\u00e9cursive <code>puissancev2(x,n)</code> qui calcule le nombre \\(x^n\\) pour tout entier naturel n selon la m\u00e9thode d'exponentiation rapide.</p> </li> </ol>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-4-maximum-dune-liste","title":"Exercice 4 : maximum d'une liste","text":"<p>On consid\u00e8re le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def maximum(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\ndef maximum_tab(tab):\n    if len(tab) == 1:\n        return tab[0]\n    else:\n        return maximum(tab[0], maximum_tab(tab[1:]))\n\nfrom random import randint\n\nmon_tab = []\nfor i in range(20):\n    mon_tab.append(randint(-100, 100))\nprint(mon_tab)\nprint(maximum_tab(mon_tab))\n</code></pre> <ol> <li>D\u00e9crire, en langage usuel, le principe de fonctionnement de la fonction <code>maximum_tab</code>.</li> <li>Expliquer en quoi la fonction <code>maximum_tab</code> est r\u00e9cursive. Quel est le cas de base ?</li> <li>Prouver la terminaison de cette fonction.</li> <li>Effectuer par r\u00e9currence la preuve de cet algorithme (c'est-\u00e0-dire prouver que la fonction retourne bien le maximum du tableau donn\u00e9 en argument).</li> <li>Dessiner l'arbre d'appels de cette fonction pour l'appel <code>maximum_tab([-4,55,-1,-35,-52,31])</code>.</li> </ol>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-5-palindromes","title":"Exercice 5 : palindromes","text":"<p>On appelle palindrome un mot qui se lit dans les deux sens comme \u00ab \u00e9t\u00e9 \u00bb ou \u00ab radar \u00bb.</p> <p>\u00c9crire une fonction r\u00e9cursive <code>palindrome</code> qui teste si un mot est un palindrome.</p> <ul> <li>Entr\u00e9e : Un mot (type <code>str</code>).</li> <li>Sortie : Un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le mot est un palindrome, <code>False</code> sinon.</li> </ul> <p>On consid\u00e9rera les deux cas suivant comme cas de base :</p> <ul> <li>si le mot est la cha\u00eene vide, c'est un palindrome ;</li> <li>si le mot ne contient qu'une seule lettre, c'est un palindrome</li> </ul>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-6-flocon-de-von-koch","title":"Exercice 6 : flocon de von Koch","text":"<p>Une image qui a une apparence similaire quelle que soit l'\u00e9chelle \u00e0 laquelle on l'observe est appel\u00e9e une fractale (il y a d'autres types de fractales).</p> <p>Un exemple simple de fractale est le flocon de Von Koch, dont voici une repr\u00e9sentation (pour un degr\u00e9 4).</p> <p></p> <p>On peut la cr\u00e9er \u00e0 partir d'un segment de droite, en modifiant r\u00e9cursivement chaque segment de droite de la fa\u00e7on suivante :</p> <ul> <li>on divise le segment de droite en trois segments de longueurs \u00e9gales ;</li> <li>on construit un triangle \u00e9quilat\u00e9ral ayant pour base le segment m\u00e9dian de la premi\u00e8re \u00e9tape ;</li> <li>on supprime le segment de droite qui \u00e9tait la base du triangle de la deuxi\u00e8me \u00e9tape.</li> </ul> <p>Voici le r\u00e9sultat obtenu en une \u00e9tape :</p> <p></p> <p>Pour continuer, il suffit de consid\u00e9rer chaque segment de cette derni\u00e8re figure comme segment de d\u00e9part.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\n\ndef Koch(n, d):\n    if n == 0:\n        forward(d)\n    else:\n        Koch(n-1, d/3)\n        left(60)\n        Koch(n-1, d/3)\n        right(120)\n        Koch(n-1, d/3)\n        left(60)\n        Koch(n-1, d/3)\n    return None\n\n\ndef flocon(n, d):\n    for k in range(3):\n        Koch(n, d)\n        right(120)\n    return None\n\n\nflocon(4, 300)\nexitonclick()\n</code></pre> <ol> <li>Identifier le cas de base de la fonction r\u00e9cursive <code>Koch(n, d)</code>. Que fait-il ?</li> <li>Modifier les param\u00e8tres <code>n</code> et <code>d</code> lors de l'appel \u00e0 la fonction <code>flocon</code> et observer l'impact de ces modifications sur le dessin.</li> <li>Combien d'appels r\u00e9cursifs sont-ils r\u00e9alis\u00e9s lors de l'appel de la fonction <code>Koch(4, 300)</code> ?</li> </ol>"},{"location":"terminale/01_langages/01_recursivite/recurs_exos/#exercice-7-type-bac","title":"Exercice 7 (type bac)","text":""},{"location":"terminale/01_langages/01_recursivite/recursivite/","title":"01-R\u00e9cursivit\u00e9","text":""},{"location":"terminale/01_langages/01_recursivite/recursivite/#1-motivation-et-introduction-du-concept","title":"1. Motivation et introduction du concept","text":"<p>Un algorithme est dit r\u00e9cursif s'il s'appelle lui-m\u00eame directement ou indirectement via l'appel d'une ou de plusieurs autres fonctions qui elles-m\u00eames finissent par l'appeler.</p> <p>La r\u00e9cursivit\u00e9 est un concept fondamental en informatique qui met naturellement en pratique un mode de pens\u00e9e puissant qui consiste \u00e0 pouvoir d\u00e9couper la t\u00e2che \u00e0 r\u00e9aliser en sous-t\u00e2ches de m\u00eames natures mais plus petites qui finalement sont simples \u00e0 r\u00e9soudre.</p> <p>Prenons par exemple le calcul de la factorielle d'un nombre entier \\(n\\).  Par d\u00e9finition pour un \\(n\\) entier strictement positif, \\(n!\\) est \u00e9gale au produit des entiers strictement positifs inf\u00e9rieurs \u00e0 \\(n\\).  Par convention on a aussi \\(0! = 1\\).</p> <p>Par exemple, on a : \\(5!=1\\times 2\\times 3\\times 4\\times 5 = 120\\).</p> <p>Donnons le code it\u00e9ratif d'une fonction calculant la factorielle:</p> \ud83d\udc0d Script Python<pre><code>  def fact(n):\n\"\"\"Renvoie la factorielle de n.\"\"\"\n    res = 1\n    for i in range(1,n+1):\n      res = res * i  \n    return res\n</code></pre> <p>La d\u00e9finition r\u00e9cursive se base sur le fait que \\(n! = n\\times (n-1)!\\) pour tout \\(n&gt;0\\).</p> <p>On obtient le code:</p> \ud83d\udc0d Script Python<pre><code>  def fact(n):\n\"\"\"Renvoie la factorielle de n (m\u00e9thode r\u00e9cursive).\"\"\"\n    if n == 0:\n      res = 1\n    else:\n      res = n*fact(n-1)\n    return res\n</code></pre> <p>Pour commencer \u00e0 comprendre comment fonctionne cette fonction r\u00e9cursive, nous pouvons visualiser le calcul de <code>fact(4)</code> gr\u00e2ce \u00e0 l'outil Python Tutor ci-dessous.</p>"},{"location":"terminale/01_langages/01_recursivite/recursivite/#2-mecanisme","title":"2. M\u00e9canisme","text":"<p>Consid\u00e9rons la fonction <code>foo</code> ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def foo(n):\n    if n == 0:\n        print(\"Cas de base : \", n)\n    else:\n        print(\"D\u00e9but avec n = \" , n)\n        foo(n-1)\n        print(\"Fin avec n = \" , n)\n\n\nfoo(3)\n</code></pre> <p>Ce programme g\u00e9n\u00e8re la sortie suivante : </p> \ud83d\udc0d Console Python<pre><code>D\u00e9but avec n =  3\nD\u00e9but avec n =  2\nD\u00e9but avec n =  1\nCas de base :  0\nFin avec n =  1\nFin avec n =  2\nFin avec n =  3\n</code></pre> <p>L'observation de ces r\u00e9sultats permet de comprendre que le syst\u00e8me, lors de l'ex\u00e9cution de ce programme, utilise une pile d'ex\u00e9cution. Une pile d'ex\u00e9cution permet d'enregistrer des informations sur les fonctions en cours d'ex\u00e9cution dans un programme. On parle de pile, car les ex\u00e9cutions successives \"s'empilent\" les unes sur les autres, comme une pile d'assiettes, ou de cr\u00eapes. Si nous nous int\u00e9ressons \u00e0 la pile d'ex\u00e9cution du programme \u00e9tudi\u00e9 ci-dessus, nous obtenons le sch\u00e9ma suivant :</p> <p></p> <p>Il est important de bien comprendre que la fonction situ\u00e9e au sommet de la pile d'ex\u00e9cution est en cours d'ex\u00e9cution. Toutes les fonctions situ\u00e9es \"en dessous\" sont mises en pause jusqu'au moment o\u00f9 elles se retrouveront au sommet de la pile. Quand une fonction termine son ex\u00e9cution, elle est automatiquement retir\u00e9e du sommet de la pile (on dit que la fonction est d\u00e9pil\u00e9e).</p> <p>La pile d'ex\u00e9cution permet de retenir la prochaine instruction \u00e0 ex\u00e9cuter au moment o\u00f9 une fonction sera sortie de son \"\u00e9tat de pause\" (qu'elle se retrouvera au sommet de la pile d'ex\u00e9cution). Elle enregistre aussi le contexte, c'est-\u00e0-dire par exemple ici la valeur de la variable locale \\(n\\) associ\u00e9e \u00e0 chaque appel de la fonction.</p> <p>Nous pouvons comprendre que ce sont plusieurs copies (on dira plut\u00f4t des instances) de la fonction <code>foo</code> qui sont pr\u00e9sentent dans la pile, chacune ayant son propre espace de noms : la variable \\(n\\) de la fonction situ\u00e9e en haut de la pile n'est pas la m\u00eame que la variable \\(n\\) de la fonction situ\u00e9e en-dessous.</p> <p>Limitation propre \u00e0 Python</p> <p>Le langage Python limite \u00e0 1000 le nombre d'appels r\u00e9cursifs d'une fonction, autrement dit la hauteur de la pile.</p> \ud83d\udc0d Console Python<pre><code>RecursionError: maximum recursion depth exceeded while calling a Python object\n</code></pre>"},{"location":"terminale/01_langages/01_recursivite/recursivite/#3-ecrire-un-algorithme-recursif","title":"3. \u00c9crire un algorithme r\u00e9cursif","text":"<p>Lors de l'\u00e9criture d'un algorithme r\u00e9cursif, trois r\u00e8gles doivent toujours \u00eatre v\u00e9rifi\u00e9es :</p> <p>Les trois r\u00e8gles de r\u00e9cursivit\u00e9</p> <ol> <li>La fonction s'appelle elle-m\u00eame !</li> <li>La fonction comporte un \"cas de base\" qui correspond \u00e0 une condition d'arr\u00eat.</li> <li>L'algorithme conduit vers le cas de base : il n'y a pas une infinit\u00e9 d'appels r\u00e9cursifs.</li> </ol> <p>La troisi\u00e8me r\u00e8gle est assur\u00e9e par la preuve de terminaison qui se fait souvent en identifiant la construction d\u2019une suite strictement d\u00e9croissante d\u2019entiers positifs ou nuls.</p>"},{"location":"terminale/01_langages/01_recursivite/recursivite/#4-fonction-recursive-et-fonction-iterative","title":"4. Fonction r\u00e9cursive et fonction it\u00e9rative","text":"<p>La programmation r\u00e9cursive n'est ni meilleure, ni pire que, la programmation it\u00e9rative. Toute fonction r\u00e9cursive peut aussi \u00eatre programm\u00e9e de fa\u00e7on it\u00e9rative. Cependant, en cas de nombreux appels r\u00e9cursifs, la m\u00e9moire de la machine sera trop fortement sollicit\u00e9e et l'ex\u00e9cution ralentie, voire impossible.</p> <p>Le choix entre une solution r\u00e9cursive ou une solution it\u00e9rative est donc guid\u00e9 par le type de probl\u00e8me \u00e0 r\u00e9soudre car certains probl\u00e8mes s'\u00e9crivent naturellement de fa\u00e7on r\u00e9cursive.</p>"},{"location":"terminale/01_langages/01_recursivite/tp_hanoi/","title":"TP Tours de Hano\u00ef","text":"<p>Dans ce TP, vous mettrez en oeuvre une proc\u00e9dure r\u00e9cursive afin de r\u00e9soudre le c\u00e9l\u00e8bre probl\u00e8me des tours de Hano\u00ef.</p> <p>Objectifs</p> <ul> <li>Comprendre un algorithme.</li> <li>\u00c9crire une proc\u00e9dure r\u00e9cursive.</li> <li>Calculer une complexit\u00e9.</li> </ul> <p>L'\u00e9nonc\u00e9 au format PDF est disponible ci-dessous.</p> <p>Crit\u00e8res d'\u00e9valuation</p> <ul> <li>Repr\u00e9sentation correcte des solutions \"\u00e0 la main\".</li> <li>La proc\u00e9dure r\u00e9sout le probl\u00e8me.</li> <li>La proc\u00e9dure fournit l'affichage demand\u00e9.</li> <li>Justification correcte du calcul de complexit\u00e9 (en nombre de d\u00e9placements).</li> </ul>"},{"location":"terminale/01_langages/02_POO/POO/","title":"02 - Programmation Orient\u00e9e Objets","text":"<p>Objectifs</p> <ul> <li>Conna\u00eetre le vocabulaire de la POO : classes, attributs, m\u00e9thodes objets.</li> <li>\u00c9crire la d\u00e9finition d'une classe.</li> <li>Acc\u00e9der aux m\u00e9thodes et attributs d'une classe.</li> </ul> <p>Des compl\u00e9ments sur la POO sont propos\u00e9s \u00e0 la suite de ce cours.</p>"},{"location":"terminale/01_langages/02_POO/POO/#introduction","title":"Introduction","text":"<p>La Programmation Orient\u00e9e Objets (POO) pour les intimes (que vous allez devenir !) est un paradigme (c'est-\u00e0-dire une mani\u00e8re de faire) de programmation </p> <p>Pour un bref aper\u00e7u historique de l'id\u00e9e d'objet en programmation, lire l'encadr\u00e9 ci-dessous, en grande partie tir\u00e9 de l'article Object-oriented programming de Wikipedia en anglais.</p> <p>Histoire</p> <p>Les termes objets orient\u00e9 au sens moderne de la programmation orient\u00e9e objet ont fait leur premi\u00e8re apparition au MIT \u00e0 la fin des ann\u00e9es 1950 et au d\u00e9but des ann\u00e9es 1960. Dans l'environnement du groupe d'intelligence artificielle, d\u00e8s 1960, \"objet\" pouvait d\u00e9signer des \u00e9l\u00e9ments identifi\u00e9s avec des propri\u00e9t\u00e9s (attributs).</p> <p>C'est l'informaticien Alan Kay (1940-) qui est consid\u00e9r\u00e9 comme l'un de p\u00e8res de la programmation orient\u00e9e objets.</p> <p>Citation</p> <p>Je pensais que les objets \u00e9taient comme des cellules biologiques et / ou des ordinateurs individuels sur un r\u00e9seau, uniquement capables de communiquer avec des messages.</p> <p>Alan Kay</p> <p>Le langage Simula dans les ann\u00e9es 1960, puis Smalltalk dans les ann\u00e9es 1970 posent les bases toujours actuelles de ce paradigme.</p> <p>Au d\u00e9but et au milieu des ann\u00e9es 1990, la programmation orient\u00e9e objet s'est d\u00e9velopp\u00e9e comme le paradigme de programmation dominant lorsque les langages de programmation prenant en charge ces techniques sont devenus largement disponibles. Ceux-ci incluent par exemple C++ ou Delphi. Sa domination a \u00e9t\u00e9 renforc\u00e9e par la popularit\u00e9 croissante des interfaces utilisateur graphiques, qui reposent fortement sur des techniques de programmation orient\u00e9es objet.</p> <p>Des fonctionnalit\u00e9s orient\u00e9es objet ont \u00e9t\u00e9 ajout\u00e9es \u00e0 de nombreux langages existants, notamment Ada, BASIC, Fortran, Pascal et COBOL.</p> <p>Plus r\u00e9cemment, un certain nombre de langages ont \u00e9merg\u00e9 qui sont principalement orient\u00e9s objet, mais qui sont \u00e9galement compatibles avec la m\u00e9thodologie proc\u00e9durale. Deux de ces langages sont Python et Ruby. Les langages orient\u00e9s objet r\u00e9cents les plus importants sur le plan commercial sont probablement Java, d\u00e9velopp\u00e9 par Sun Microsystems, ainsi que C# et Visual Basic.NET (VB.NET), tous deux con\u00e7us pour la plate-forme.NET de Microsoft. </p> <p>Alors de quoi s'agit-il ? Une approche intuitive consiste \u00e0 dire que cette m\u00e9thode de programmation nous permet de d\u00e9finir des nouveaux types de donn\u00e9es, de nouveaux objets, correspondant \u00e0 un objectif pr\u00e9cis. Ces nouveaux types sont appel\u00e9s classes. En d\u00e9finissant une classe, nous pouvons \u00e9galement d\u00e9finir ses attributs, c'est-\u00e0-dire les variables qui lui sont associ\u00e9es et ses m\u00e9thodes, c'est-\u00e0-dire les fonctions sui lui sont propres.</p> <p>Voici ce que G\u00e9rard SWINNEN \u00e9crit dans son livre Apprendre \u00e0 programmer avec Python 3 : </p> <p>Citation</p> <p>Les classes sont les principaux outils de la programmation orient\u00e9e objet (Object Oriented Programming ou OOP). Ce type de programmation permet de structurer les logiciels complexes en les organisant comme des ensembles d\u2019objets qui interagissent, entre eux et avec le monde ext\u00e9rieur.</p> <p>Le premier b\u00e9n\u00e9fice de cette approche de la programmation r\u00e9side dans le fait que les diff\u00e9rents objets utilis\u00e9s peuvent \u00eatre construits ind\u00e9pendamment les uns des autres (par exemple par des programmeurs diff\u00e9rents) sans qu\u2019il n\u2019y ait de risque d\u2019interf\u00e9rence. Ce r\u00e9sultat est obtenu gr\u00e2ce au concept d\u2019encapsulation : la fonctionnalit\u00e9 interne de l\u2019objet et les variables qu\u2019il utilise pour effectuer son travail, sont en quelque sorte \u00ab enferm\u00e9es \u00bb dans l\u2019objet. Les autres objets et le monde ext\u00e9rieur ne peuvent y avoir acc\u00e8s qu\u2019\u00e0 travers des proc\u00e9dures bien d\u00e9finies : l\u2019interface de l\u2019objet.</p> <p>En particulier, l\u2019utilisation de classes dans vos programmes va vous permettre \u2013 entre autres avantages \u2013 d\u2019\u00e9viter au maximum l\u2019emploi de variables globales. Vous devez savoir en effet que l\u2019utilisation de variables globales comporte des risques, d\u2019autant plus importants que les programmes sont volumineux, parce qu\u2019il est toujours possible que de telles variables soient modifi\u00e9es, ou m\u00eame red\u00e9finies, n\u2019importe o\u00f9 dans le corps du programme (ce risque s\u2019aggrave particuli\u00e8rement si plusieurs programmeurs diff\u00e9rents travaillent sur un m\u00eame logiciel).</p> <p>En utilisant Python, nous avons d\u00e9j\u00e0 fr\u00e9quent\u00e9 des classes d'objets : il est usuel de lire qu'en Python \"tout est objet\", m\u00eame si Python ne permet pas vraiment de faire de la POO dans toute sa rigueur.</p> <p>Par exemple, d\u00e9finissons une cha\u00eene de caract\u00e8res et demandons \u00e0 Python quel est son type (dans Idle) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; a = \"Coucou !\"\n&gt;&gt;&gt; type(a)\n&lt;class 'str'&gt;\n</code></pre> <p>Le type 'str' bien connu est en fait une classe d'objet pr\u00e9d\u00e9finie. On dit que <code>a</code> est une instance de l'objet <code>str</code>.</p> <p>Un exemple de m\u00e9thode rattach\u00e9e \u00e0 la classe str est la fonction <code>capitalize</code> qui met le premier caract\u00e8re en majuscule. Cette m\u00e9thode est appel\u00e9e par la notation point\u00e9e d\u00e9j\u00e0 rencontr\u00e9e.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; a.capitalize()\n'Coucou !'\n</code></pre> <p>La commande <code>help(str)</code> affiche toutes les m\u00e9thodes pr\u00e9d\u00e9finies pour les objets de la classe <code>str</code>.</p>"},{"location":"terminale/01_langages/02_POO/POO/#classe-initialiseur-attributs","title":"Classe, initialiseur, attributs","text":"<p>En Python, la d\u00e9finition d'une classe se fait avec le mot-clef <code>class</code> suivi du nom de la classe.</p> <p>Supposons par exemple que nous voulons d\u00e9finir une classe pour repr\u00e9senter des rectangles. Nous avons besoin, pour chaque rectangle, de conna\u00eetre sa largeur et se hauteur, ce qui nous permettra de faire quelques calculs.</p> <p>Observons le code suivant : </p> \ud83d\udc0d Script Python<pre><code>class Rectangle:\n\"\"\"Repr\u00e9sente un rectangle\"\"\"\n\n    def __init__(self, largeur = 2, hauteur = 3):\n        self.largeur = largeur\n        self.hauteur = hauteur\n</code></pre> <p>\u00c0 l'int\u00e9rieur de la classe <code>Rectangle</code>, la m\u00e9thode <code>__init__</code> est l'initialiseur : elle est toujours ex\u00e9cut\u00e9e lorsqu'une instance de l'objet <code>Rectangle</code> est cr\u00e9\u00e9e (on parle aussi de constructeur). Cette fonction accepte des param\u00e8tres qui seront les valeurs \u00e0 donner aux attributs \u00e0 la cr\u00e9ation de l'objet (ici on a aussi donn\u00e9 des valeurs par d\u00e9faut \u00e0 ces param\u00e8tres) ; le premier param\u00e8tre est particulier : ce sera toujours le mot-cl\u00e9 <code>self</code> : ce mot-clef d\u00e9signe l'instance qui est en train d'\u00eatre d\u00e9finie au moment o\u00f9 cette fonction s'ex\u00e9cute.</p> <p>Remarque</p> <p>Il est d'usage, et recommand\u00e9, de nommer une classe par un nom commen\u00e7ant par une majuscule.</p> <p>Observons les lignes suivantes dans la console Python :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; rec1 = Rectangle()\n&gt;&gt;&gt; rec2=Rectangle(15, 25)\n&gt;&gt;&gt; rec1.largeur\n2\n&gt;&gt;&gt; rec2.largeur\n15\n</code></pre> <p><code>rec1</code> est une instance de l'objet <code>Rectangle</code>. Aucun param\u00e8tre n'\u00e9tant donn\u00e9 lors de sa cr\u00e9ation, les valeurs par d\u00e9faut ont \u00e9t\u00e9 appliqu\u00e9es. <code>rec2</code> est une autre instance de l'objet <code>Rectangle</code> pour laquelle on a d\u00e9fini les attributs d'instance <code>largeur</code> et <code>hauteur</code>. On acc\u00e8de \u00e0 ces attributs par la notation point\u00e9e.</p>"},{"location":"terminale/01_langages/02_POO/POO/#methodes","title":"M\u00e9thodes","text":"<p>Une m\u00e9thode, c'est ce qui permet \u00e0 une instance de r\u00e9aliser des actions. Techniquement se sont des fonctions d\u00e9finies dans le corps de la classe, et qui prennent toujours au moins un premier param\u00e8tre qui est <code>self</code>.</p> <p>Certaines m\u00e9thodes sont particuli\u00e8res, leurs noms commencent par un double undescore (le caract\u00e8re <code>_</code>). On a vu une premi\u00e8re de ces m\u00e9thodes : l'initialiseur <code>__init__</code>.</p> <p>D\u00e9finissons ici une m\u00e9thode permettant de calculer le p\u00e9rim\u00e8tre d'un rectangle et une autre pour l'aire :</p> \ud83d\udc0d Script Python<pre><code>class Rectangle:\n\"\"\"Repr\u00e9sente un rectangle\"\"\"\n\n    def __init__(self, largeur=2, hauteur=3):\n        self.largeur = largeur\n        self.hauteur = hauteur\n\n    def perimetre(self):\n\"\"\"Retourne le p\u00e9rim\u00e8tre\"\"\"\n        return 2 * (self.largeur + self.hauteur)\n\n    def aire(self):\n\"\"\"Retourne l'aire\"\"\"\n        return self.largeur * self.hauteur\n</code></pre> <p>Utilisation : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; rec = Rectangle(10, 5)\n&gt;&gt;&gt; rec.perimetre()\n30\n&gt;&gt;&gt; rec.aire()\n50\n</code></pre> <p>Une m\u00e9thode peut modifier la valeur d'un attribut. D\u00e9finissons par exemple une m\u00e9thode permettant de doubler la largeur d'un rectangle.</p> \ud83d\udc0d Script Python<pre><code>def double_largeur(self):\n\"\"\"Double la largeur du rectangle)\"\"\"\n    self.largeur *= 2\n</code></pre> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; rec = Rectangle(10, 5)\n&gt;&gt;&gt; rec.double_largeur()\n&gt;&gt;&gt; rec.largeur\n20\n</code></pre> <p>La POO encourage \u00e0 n'exposer que des m\u00e9thodes vers l'ext\u00e9rieur (on parle d'interface) en masquant les attributs. Il s'agit d'un des quatre \u00e9l\u00e9ments constitutifs de l'orient\u00e9 objet : l'encapsulation.</p> <p>Remarque</p> <p>Nous avons pr\u00e9sent\u00e9 ci-dessus les attributs d'instance, mais il est aussi possible de d\u00e9finir des attributs de classe qui seront donc les m\u00eames pour toutes les instances d'une m\u00eame classe cr\u00e9\u00e9es dans un programme. Ces attributs sont d\u00e9finis \u00e0 l'int\u00e9rieur de la classe, sans le pr\u00e9fixe <code>self</code> (puisque celui-ci fait r\u00e9f\u00e9rence \u00e0 l'instance en train d'\u00eatre cr\u00e9\u00e9e).</p> <p>Par exemple, dans la d\u00e9finition de la classe <code>Atome</code> ci-dessous, la liste <code>table</code> est un attribut de classe, alors que l'entier <code>np</code> est un attribut d'instance. Dans la m\u00e9thode <code>__init__</code>, on acc\u00e8de \u00e0 l'attribut de classe en le pr\u00e9fixant par le nom de la classe <code>Atome.table</code> et on acc\u00e8de \u00e0 l'attribut d'instance en le pr\u00e9fixant par le nom de l'instance <code>self.np</code>.</p> \ud83d\udc0d Script Python<pre><code>class Atome:\n\"\"\"atomes simplifi\u00e9s, choisis parmi les 10 premiers \u00e9l\u00e9ments du TP\"\"\"\ntable = [None, ('hydrog\u00e8ne', 0), ('h\u00e9lium', 2), ('lithium', 4), ('b\u00e9ryllium', 5),\n         ('bore', 6), ('carbone', 6), ('azote', 7), ('oxyg\u00e8ne', 8), ('fluor', 10), ('n\u00e9on', 10)]\n\ndef __init__(self, nat):\n    \"le n\u00b0 atomique d\u00e9termine le n. de protons, d'\u00e9lectrons et de neutrons\"\n    self.np, self.ne = nat, nat  # nat = num\u00e9ro atomique\n    self.nn = Atome.table[nat][1]\n\ndef affiche(self):\n    print()\n    print(\"Nom de l'\u00e9l\u00e9ment :\", Atome.table[self.np][0])\n    print(f\"{self.np} protons, {self.ne} \u00e9lectrons, {self.nn} neutrons\")\n</code></pre> <p>De la m\u00eame fa\u00e7on, il est possible de d\u00e9finir des m\u00e9thodes de classe.</p>"},{"location":"terminale/01_langages/02_POO/POO/#representation-simplifiee-dune-classe","title":"Repr\u00e9sentation simplifi\u00e9e d'une classe","text":"<p>Lorsqu'un module comportant plusieurs d\u00e9finitions de classe est d\u00e9velopp\u00e9, on peut r\u00e9aliser une repr\u00e9sentation graphique, appel\u00e9e diagramme de classes qui permet de visualiser le nom de chaque classe, son interface (c'est-\u00e0-dire l'ensemble de ses attributs et m\u00e9thodes publiques) et les relations \u00e9ventuelles entre les diff\u00e9rentes classes.</p> <p>Une pr\u00e9sentation d\u00e9taill\u00e9e de ce type de diagramme n'est pas au programme, mais de mani\u00e8re simplifi\u00e9e, le diagramme correspondant \u00e0 la classe <code>Rectangle</code> pourrait ressembler \u00e0 ce qui suit :</p> <pre><code>classDiagram\n    class Rectangle{\n        -float hauteur\n        -float largeur\n        +perimetre() float\n        +aire() float\n        +double_largeur()\n    }</code></pre> <p>Dans des cases s\u00e9par\u00e9es, on place d'abord le nom de la classe, puis ses attributs et enfin ses m\u00e9thodes. Un codage sp\u00e9cifique permet de pr\u00e9ciser le type des diff\u00e9rents membres, leur caract\u00e8re public ou priv\u00e9 (voir les compl\u00e9ments \u00e0 ce sujet) ou m\u00eame leur \u00e9tat.</p> <p>Un attribut de classe ou une m\u00e9thode de classe seront soulign\u00e9s dans un tel diagramme.</p> <p>Pour en savoir un peu plus sur les diagrammes de classes, je vous conseille ce document ou encore ce cours plus difficile.</p> <p>Des compl\u00e9ments sur la POO sont propos\u00e9s \u00e0 la suite de ce cours.</p>"},{"location":"terminale/01_langages/02_POO/POO_complements/","title":"Compl\u00e9ments sur la POO","text":"<p>Avertissement</p> <p>Les compl\u00e9ments pr\u00e9sent\u00e9s ici sont hors programme. Ils peuvent n\u00e9anmoins apporter une connaissance et une compr\u00e9hension plus fine de la POO et \u00eatre utiles dans le cadre du travail sur les projets.</p>"},{"location":"terminale/01_langages/02_POO/POO_complements/#principes-et-definitions","title":"Principes et d\u00e9finitions","text":"Objet <p>Un objet est une donn\u00e9e manipulable par un programme : il s'agit d'un conteneur pour une valeur ou un \u00e9tat auquel est associ\u00e9 un ensemble d'op\u00e9rations. Cet objet est associ\u00e9 \u00e0 un type, d\u00e9fini comme l'ensemble des valeurs possibles, cette liste d'op\u00e9rations, ainsi que leur codage (binaire).</p> <p>Un objet est identifi\u00e9 dans un programme par un nom ou une notation litt\u00e9rale, mais peut parfois \u00eatre anonyme (comme les variables temporaires ou les composantes d'un tableau).</p> <p>Et pour une d\u00e9finition d'un langage orient\u00e9 objet, l'id\u00e9e premi\u00e8re que l'on retrouve dans la d\u00e9finition de wikip\u00e9dia offre un cadre int\u00e9ressant : un langage objet doit permettre l'analyse et le d\u00e9veloppement logiciel fond\u00e9s sur des relations entre objets. </p> <p>Concr\u00e8tement, un objet est une structure de donn\u00e9es qui r\u00e9pond \u00e0 un ensemble de messages. Cette structure de donn\u00e9es d\u00e9finit son \u00e9tat tandis que l'ensemble des messages qu'il comprend d\u00e9crit son comportement :</p> <ul> <li>les donn\u00e9es, ou champs, qui d\u00e9crivent sa structure interne sont appel\u00e9es ses attributs ;</li> <li>l'ensemble des messages forme ce que l'on appelle l'interface de l'objet ; c'est seulement au travers de celle-ci que les objets interagissent entre eux. La r\u00e9ponse \u00e0 la r\u00e9ception d'un message par un objet est appel\u00e9e une m\u00e9thode (m\u00e9thode de mise en \u0153uvre du message) ; elle d\u00e9crit quelle r\u00e9ponse doit \u00eatre donn\u00e9e au message.</li> </ul> <p>Les attributs et les m\u00e9thodes constituent les membres d'un objet. Un objet poss\u00e8de un type.</p> <p>En Python, un objet la cr\u00e9ation d'un objet se fait en utilisant une classe : un objet est alors une instance de sa classe. La classe est un type, un ensemble d'objets partageant les m\u00eames propri\u00e9t\u00e9s concr\u00e9tis\u00e9es par une liste de membres.</p> Langage orient\u00e9 objet <p>Un langage orient\u00e9 objet est un langage de programmation qui comporte de mani\u00e8re native les \u00e9l\u00e9ments suivants : l'encapsulation, l'h\u00e9ritage, le polymorphisme et la programmation g\u00e9n\u00e9rique.</p>"},{"location":"terminale/01_langages/02_POO/POO_complements/#les-principes-cles-de-la-poo","title":"Les principes cl\u00e9s de la POO","text":""},{"location":"terminale/01_langages/02_POO/POO_complements/#lencapsulation","title":"L'encapsulation","text":"<p>Certains membres (ou plus exactement leur repr\u00e9sentation informatique) sont cach\u00e9s : c'est le principe d'encapsulation. Ainsi, le programme peut modifier la structure interne des objets ou leurs m\u00e9thodes associ\u00e9es sans avoir d'impact sur les utilisateurs de l'objet. C'est un des principes fondamentaux notamment pour la robustesse du code.</p> <p>En particulier, les bonnes pratiques de POO recommandent de na pas permettre un acc\u00e8s direct aux attributs d'un objet \u00e0 l'ext\u00e9rieur de celui-ci. On appelle interface d'un objet l'ensemble de ses membres qui sont accessibles \u00e0 l'ext\u00e9rieur de celui-ci. L'interface ne devrait donc contenir que des m\u00e9thodes. Pas forc\u00e9ment toutes, certaines m\u00e9thodes (comme <code>__init__</code>) restent priv\u00e9es.</p> <p>Contrairement \u00e0 d'autres langages, Python offre une totale libert\u00e9 de modification sur les membres d'un objet. C'est au programmeur de rester vigilant. Il existe n\u00e9anmoins des conventions permettant d'identifier les membres de l'interface des autres membres d'un objet.</p> <p>Conventions de nommage en Python</p> <ul> <li>un nom d'attribut commen\u00e7ant par un double underscore <code>__</code> d\u00e9signe un attribut priv\u00e9.</li> <li>une m\u00e9thode dont le nom est de la forme <code>__nom__</code> d\u00e9signe une m\u00e9thode priv\u00e9e.</li> </ul> <p>Mais alors si les attributs doivent rester priv\u00e9s, comment y acc\u00e9der, et comment les modifier ?</p> <p>Il convient pour cela, en toute rigueur, de d\u00e9finit des m\u00e9thodes ad-hoc : une m\u00e9thode qui permet d'acc\u00e9der \u00e0 un attribut est un <code>getter</code>, une p\u00e9riode qui permet de changer la valeur d'un attribut est un <code>setter</code>.</p> <p>Voici par exemple un nouvelle d\u00e9finition de la classe \"Rectangle\" tenant compte des remarques pr\u00e9c\u00e9dentes.</p> \ud83d\udc0d Script Python<pre><code>class Rectangle:\n\"\"\"Repr\u00e9sente un rectangle\"\"\"\n\n    def __init__(self, largeur=2, hauteur=3):\n        self.__largeur = largeur\n        self.__hauteur = hauteur\n\n    def get_largeur(self):\n        return self.__largeur\n\n    def set_largeur(self, largeur):\n        self.__largeur = largeur\n\n    def get_hauteur(self):\n        return self.__hauteur\n\n    def set_hauteur(self, hauteur):\n        self.__hauteur = hauteur\n\n    def perimetre(self):\n\"\"\"Retourne le p\u00e9rim\u00e8tre\"\"\"\n        return 2 * (self.__largeur + self.__hauteur)\n\n    def aire(self):\n\"\"\"Retourne l'aire\"\"\"\n        return self.__largeur * self.__hauteur\n</code></pre> <p>Utilisation : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; rec = Rectangle(10, 5)\n&gt;&gt;&gt; rec.__hauteur\nAttributeError: 'Rectangle' object has no attribute '__hauteur'\n&gt;&gt;&gt; rec.get_hauteur()\n5\n</code></pre> <p>Nous voyons que l'acc\u00e8s direct \u00e0 l'attribut n'est plus possible.</p> <p>Cela n'est pas tr\u00e8s pratique et change nos habitudes : nous aimerions en effet pouvoir acc\u00e9der \u00e0 la valeur d'un attribut en utilisant la notation point\u00e9e. Deux remarques \u00e0 ces objections. D'une part, ces r\u00e8gles de programmation ne sont pas l\u00e0 pour nous emb\u00eater ! Il s'agit de s\u00e9curiser notre code : la d\u00e9finition d'un <code>setter</code> par exemple, peut permettre de v\u00e9rifier la validit\u00e9 des arguments entr\u00e9s et afficher un message d'erreur si besoin (par exemple si on appelle <code>set_hauteur(-10</code>). Deuxi\u00e8me remarque : Python propose une fonctionnalit\u00e9 avanc\u00e9e, appel\u00e9e d\u00e9corateurs et qui permet de retrouver, en apparence, l'acc\u00e8s direct aux attributs. Voici une nouvelle version de la classe \"Rectangle\" avec l'utilisation du d\u00e9corateur <code>@property</code> et la red\u00e9finition des <code>getter</code> et <code>setter</code> (qui doivent maintenant porter le m\u00eame nom que le pseudo argument). On a introduit dans les <code>setter</code> des tests de validit\u00e9 des donn\u00e9es.</p> \ud83d\udc0d Script Python<pre><code>class Rectangle:\n\"\"\"Repr\u00e9sente un rectangle\"\"\"\n\n    def __init__(self, largeur=2, hauteur=3):\n        self.__largeur = largeur\n        self.__hauteur = hauteur\n\n    @property\n    def largeur(self):\n        return self.__largeur\n\n    @largeur.setter\n    def largeur(self, largeur):\n        if isinstance(largeur, (int, float)) and largeur &gt;= 0:\n            self.__largeur = largeur\n        else:\n            print(\"Argument invalide, largeur inchang\u00e9e !\")\n\n    @property\n    def hauteur(self):\n        return self.__hauteur\n\n    @hauteur.setter\n    def hauteur(self, hauteur):\n        if isinstance(hauteur, (int, float)) and hauteur &gt;= 0:\n            self.__hauteur = hauteur\n        else:\n            print(\"Argument invalide, hauteur inchang\u00e9e !\")\n\n    def perimetre(self):\n\"\"\"Retourne le p\u00e9rim\u00e8tre\"\"\"\n        return 2 * (self.__largeur + self.__hauteur)\n\n    def aire(self):\n\"\"\"Retourne l'aire\"\"\"\n        return self.__largeur * self.__hauteur\n\n\nrec = Rectangle(10, 25)\nprint(rec.largeur)\nrec.largeur = -15\nprint(rec.largeur)\n</code></pre> <p>Sortie en console : </p> \ud83d\udc0d Console Python<pre><code>10\nArgument invalide, largeur inchang\u00e9e !\n10\n</code></pre>"},{"location":"terminale/01_langages/02_POO/POO_complements/#lheritage","title":"L'h\u00e9ritage","text":"<p>L'h\u00e9ritage est une relation asym\u00e9trique entre deux classes : l'une est la classe m\u00e8re (aussi nomm\u00e9e classe parente, superclasse, classe de base), l'autre la classe-fille. L'h\u00e9ritage permet une \u00e9conomie d'\u00e9criture par la r\u00e9utilisation automatique, lors de la d\u00e9finition de la classe-fille, de tous les membres et autres \u00e9l\u00e9ments d\u00e9finis dans la classe m\u00e8re. Ainsi, les objets de la classe-fille h\u00e9ritent de toutes les propri\u00e9t\u00e9s de leur classe m\u00e8re.</p> <p>Par exemple, nous pouvons d\u00e9finir une classe <code>carre</code>, fille de la classe <code>Rectangle</code>. Les attributs et les m\u00e9thodes d\u00e9finis pour la classe <code>Rectangle</code> existent alors automatiquement aussi pour la classe <code>carre</code>.</p> <p>Voici la syntaxe Python pour d\u00e9finir une classe fille :</p> \ud83d\udc0d Script Python<pre><code>class Carre(Rectangle):\n\n    def __init__(self, cote=2):\n        Rectangle.__init__(self, cote, cote)\n</code></pre> <p>Utilisation : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; car = Carre(5)\n&gt;&gt;&gt; car.perimetre()\n20\n</code></pre> <p>La m\u00e9thode <code>perimetre</code> est h\u00e9rit\u00e9e de la classe m\u00e8re <code>Rectangle</code>.</p> <p>H\u00e9ritage et initialiseur</p> <p>La m\u00e9thode initialiseur de la classe <code>Carre</code> fait appel \u00e0 la m\u00e9thode initialiseur de sa classe parente par la commande <code>Rectangle.__init__(self, cote, cote)</code>. Cet appel est n\u00e9cessaire afin que les membres de la classe <code>Carre</code> soient d\u00e9finis de la m\u00eame mani\u00e8re que les membres de la classe <code>Rectangle</code>. La m\u00e9thode <code>__init__</code> est un initialiseur d'instance : elle n'est pas invoqu\u00e9e automatiquement lorsqu'on instancie des objets d'une classe fille.</p>"},{"location":"terminale/01_langages/02_POO/POO_complements/#le-polymorphisme-et-la-redefinition","title":"Le polymorphisme et la red\u00e9finition","text":"<p>La red\u00e9finition des m\u00e9thodes permet \u00e0 un objet de raffiner une m\u00e9thode d\u00e9finie avec la m\u00eame en-t\u00eate dans la classe m\u00e8re. Une m\u00eame m\u00e9thode pourra ainsi avoir un comportement diff\u00e9rent selon qu'elle s'applique \u00e0 la classe m\u00e8re ou \u00e0 la classe fille : on parle de polymorphisme d'h\u00e9ritage.</p> <p>Par exemple, nous pouvons red\u00e9finir la m\u00e9thode <code>aire</code> de la classe <code>Carre</code> comme ci-dessous : appliqu\u00e9e \u00e0 un objet <code>Carre</code>, la nouvelle d\u00e9finition sera utilis\u00e9e \u00e0 la place de la m\u00e9thode h\u00e9rit\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Carre(Rectangle):\n\n    def __init__(self, cote=2):\n        self.__largeur = cote\n        self.__hauteur = cote\n\n    def aire(self):\n\"\"\"Retourne l'aire\"\"\"\n        return self.__largeur ** 2\n</code></pre>"},{"location":"terminale/01_langages/02_POO/POO_complements/#les-methodes-speciales","title":"Les m\u00e9thodes sp\u00e9ciales","text":"<p>Un bon exemple de polymorphisme est fourni par la red\u00e9finition des m\u00e9thodes sp\u00e9ciales.</p> <p>Nous savons que la fonction <code>dir()</code> renvoie tous les membres d'un objet.</p> <p>Appliquons cette commande \u00e0 notre objet <code>rec</code>, instance de la classe <code>Rectangle</code> : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; dir(rec)\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_hauteur',\n '_largeur',\n 'aire',\n 'hauteur',\n 'largeur',\n 'perimetre']\n</code></pre> <p>Nous reconnaissons en fin de liste les attributs et m\u00e9thodes que nous avons d\u00e9finis, mais nous d\u00e9couvrons l'existence d'un grand nombre de m\u00e9thodes sp\u00e9ciales priv\u00e9es (puisque leur nom est entour\u00e9 de <code>__</code>) qui sont en fait h\u00e9rit\u00e9es d'une classe <code>Object</code> parente de toutes les classes. Parmi celles-ci, nous avons d\u00e9j\u00e0 rencontr\u00e9 <code>__init__</code>, la m\u00e9thode initialiseur.</p> <p>Les curieux pourront rechercher le r\u00f4le de chacune de ces m\u00e9thodes sp\u00e9ciales. Le voici pour certaines d'entre elles : </p> M\u00e9thode sp\u00e9ciale Usage add + mul * sub - eq == ne != lt &lt; ge &lt;= gt &gt; ge &gt;= repr affichage dans la console &gt;&gt;&gt; obj str str(obj), print(obj) <p>La red\u00e9finition de la m\u00e9thode <code>__add__</code> permettrait par exemple de donner un sens \u00e0 l'utilisation du symbole <code>+</code> entre deux objets (instruction du type <code>rec1 + rec 2</code>).</p> <p>Dans notre exemple, nous allons red\u00e9finir la m\u00e9thode <code>__str__</code> pour sp\u00e9cifier ce qui doit s'afficher quand l'instruction <code>print(rec)</code> est ex\u00e9cut\u00e9e.</p> <p>Pour l'instant, on obtient : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; print(rec)\n&lt;__main__.Rectangle object at 0x000002386735C730&gt;\n</code></pre> <p>Ajoutons la m\u00e9thode ci-dessous dans la classe <code>Rectangle</code> :</p> \ud83d\udc0d Script Python<pre><code>def __str__(self):\n    return f\"Rectangle de largeur {self.__largeur} et de hauteur {self.__hauteur}.\"\n</code></pre> <p>On obtient maintenant : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; print(rec)\nRectangle de largeur 10 et de hauteur 25.\n</code></pre>"},{"location":"terminale/01_langages/02_POO/POO_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/01_langages/02_POO/POO_exos/#exercice-1","title":"Exercice 1","text":"<p>On consid\u00e8re la classe suivante :</p> \ud83d\udc0d Script Python<pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def deplace(self, dx, dy):\n        self.x = self.x + dx\n        self.y = self.y + dy\n\n    def symetrique(self):\n        return Point(-self.x, -self.y)\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n</code></pre> <ol> <li>Quelle instruction entrer dans la console pour cr\u00e9er le point a d\u2019abscisse 2 et d\u2019ordonn\u00e9e 4 ?</li> <li>Quels sont les attributs et les m\u00e9thodes de cette classe ? Dresser le diagramme de classe de cette classe.</li> <li> <p>La m\u00e9thode sp\u00e9ciale <code>__repr__</code> permet de d\u00e9finir comment l'objet sera affich\u00e9 dans la console Python.</p> <p>Qu\u2019affichent les instructions suivantes dont la sortie a \u00e9t\u00e9 effac\u00e9e ?</p> <p>\ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; b = Point(1, 2)\n&gt;&gt;&gt; b\n...\n&gt;&gt;&gt; b.deplace(3, 5)\n&gt;&gt;&gt; b\n...\n</code></pre> 4. D\u00e9finir une m\u00e9thode <code>abscisse</code> qui renvoie l\u2019abscisse du point. 5. Recommencer avec la m\u00e9thode <code>ordonnee</code>.</p> </li> </ol>"},{"location":"terminale/01_langages/02_POO/POO_exos/#exercice-2","title":"Exercice 2","text":"<p>Soit la classe <code>Date</code> d\u00e9finie par le diagramme de classe suivant :</p> <pre><code>classDiagram\n    class Date{\n        +int jour\n        +int mois\n        +annee int\n    }</code></pre> <ol> <li>Impl\u00e9menter cette classe en Python.</li> <li>Cr\u00e9er deux dates le 20 janvier 2012 et le 14 f\u00e9vrier 2022.</li> <li>Dans la m\u00e9thode d'initialisation d'instance de la classe, pr\u00e9voir un dispositif pour \u00e9viter les dates impossibles (du genre 32/14/2020). Dans ce cas, la cr\u00e9ation doit provoquer une erreur, chose possible gr\u00e2ce \u00e0 l\u2019instruction <code>raise</code> (documentation \u00e0 rechercher !).</li> <li>Ajouter une m\u00e9thode <code>__repr__</code> et une m\u00e9thode <code>__str__</code>permettant d\u2019afficher la date sous la forme \u201c25 janvier 1989\u201d. Les noms des mois seront d\u00e9finis en tant qu\u2019attribut de classe \u00e0 l\u2019aide d\u2019une liste.</li> <li>Ajouter une m\u00e9thode <code>__lt__</code> qui permet de comparer deux dates. L\u2019expression <code>d1 &lt; d2</code> (<code>d1</code> et <code>d2</code> \u00e9tant deux objets de type <code>Date</code>) doit gr\u00e2ce \u00e0 cette m\u00e9thode renvoyer <code>True</code> ou <code>False</code> .</li> </ol>"},{"location":"terminale/01_langages/02_POO/POO_exos/#exercice-3-bac-2022-extrait","title":"Exercice 3 (Bac 2022, extrait)","text":"<p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu. On rappelle ici les r\u00e8gles du jeu de la bataille : </p> <p>Pr\u00e9paration :</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement :</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l'ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible).</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \"bataille\".</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne. </p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa valeur et un pour sa couleur. Il donne au valet la valeur 11, \u00e0 la dame la valeur 12, au roi la valeur 13 et \u00e0 l'as la valeur 14. La couleur est une cha\u00eene de caract\u00e8res: \"trefle\", \"carreau\", \"coeur\" ou \"pique\". </p> <p>Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments: <code>val</code> et <code>coul</code>.</p> <ol> <li> <p>Recopier et compl\u00e9ter les pointill\u00e9s des lignes ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... . ... = coul\n</code></pre> </li> <li> <p>Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom c7 ?</p> <ul> <li><code>c7. init (self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte ( 7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> </li> <li> <p>On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser()</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = [] \n    for c in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n        for v in range( ... ) :\n            carte_cree = ...\n            jeu.append(carte_cree)\n    return jeu\n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>comparer(cartel, carte2)</code> qui prend en param\u00e8tres deux objets de la classe <code>Carte</code>. Cette fonction renvoie :</p> <ul> <li>0 si la force des deux cartes est identique,</li> <li>1 si la carte cartel est strictement plus forte que carte2</li> <li>-1 si la carte carte2 est strictement plus forte que cartel</li> </ul> </li> </ol> <p>Voir le corrig\u00e9</p>"},{"location":"terminale/01_langages/02_POO/POO_exos/#exercice-4-bac-2022","title":"Exercice 4 (Bac 2022)","text":"<p>Un fabricant de brioches d\u00e9cide d\u2019informatiser sa gestion des stocks. Il \u00e9crit pour cela un programme en langage Python. Une partie de son travail consiste \u00e0 d\u00e9velopper une classe Stock dont la premi\u00e8re version est la suivante :</p> \ud83d\udc0d Script Python<pre><code>class Stock:\n    def __init__(self):\n        self.qt_farine = 0 # quantit\u00e9 de farine initialis\u00e9e \u00e0 0 g\n        self.nb_oeufs = 0 # nombre d\u2019\u0153ufs (0 \u00e0 l\u2019initialisation)\n        self.qt_beurre = 0 # quantit\u00e9 de beurre initialis\u00e9e \u00e0 0 g\n</code></pre> <ol> <li> <p>\u00c9crire une m\u00e9thode <code>ajouter_beurre(self, qt)</code> qui ajoute la quantit\u00e9 <code>qt</code> de beurre \u00e0 un objet de la classe <code>Stock</code>.</p> <p>On admet que l\u2019on a \u00e9crit deux autres m\u00e9thodes <code>ajouter_farine</code> et <code>ajouter_oeufs</code> qui ont des fonctionnements analogues.</p> </li> <li> <p>\u00c9crire une m\u00e9thode <code>afficher(self)</code> qui affiche la quantit\u00e9 de farine, d\u2019\u0153ufs et de beurre d\u2019un objet de type <code>Stock</code>. L\u2019exemple ci-dessous illustre l\u2019ex\u00e9cution de cette m\u00e9thode dans la console :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; mon_stock = Stock() \n&gt;&gt;&gt; mon_stock.afficher() \nfarine: 0 \noeuf: 0 \nbeurre: 0 \n&gt;&gt;&gt; mon_stock.ajouter_beurre(560) \n&gt;&gt;&gt; mon_stock.afficher() \nfarine: 0 \noeuf: 0 \nbeurre: 560 \n</code></pre> </li> <li> <p>Pour faire une brioche, il faut 350 g de farine, 175 g de beurre et 4 oeufs. \u00c9crire une m\u00e9thode <code>stock_suffisant_brioche(self)</code> qui renvoie un bool\u00e9en : VRAI s'il y a assez d'ingr\u00e9dients dans le stock pour faire une brioche et FAUX sinon.</p> </li> <li> <p>On consid\u00e8re la m\u00e9thode suppl\u00e9mentaire <code>produire(self)</code> de la classe <code>Stock</code> donn\u00e9e par le code suivant :</p> \ud83d\udc0d Script Python<pre><code>def produire(self):\n    res = 0 \n    while self.stock_suffisant_brioche():\n        self.qt_beurre = self.qt_beurre - 175 \n        self.qt_farine = self.qt_farine - 350 \n        self.nb_oeufs = self.nb_oeufs - 4 \n        res = res + 1\n    return res\n</code></pre> <p>On consid\u00e8re un stock d\u00e9fini par les instructions suivantes :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; mon_stock=Stock()\n&gt;&gt;&gt; mon_stock.ajouter_beurre(1000) \n&gt;&gt;&gt; mon_stock.ajouter_farine(1000) \n&gt;&gt;&gt; mon_stock.ajouter_oeufs(10)\n</code></pre> <ol> <li>On ex\u00e9cute ensuite l\u2019instruction : <code>&gt;&gt;&gt; mon_stock.produire()</code>. Quelle valeur s\u2019affiche dans la console ? Que repr\u00e9sente cette valeur ?</li> <li>On ex\u00e9cute ensuite l\u2019instruction : <code>&gt;&gt;&gt; mon_stock.afficher()</code>. Que s\u2019affiche-t-il dans la console ?</li> </ol> </li> <li> <p>L\u2019industriel poss\u00e8de n lieux de production distincts et donc n stocks distincts.</p> <p>On suppose que ces stocks sont dans une liste dont chaque \u00e9l\u00e9ment est un objet de type <code>Stock</code>. \u00c9crire une fonction Python <code>nb_brioches(liste_stocks)</code> poss\u00e9dant pour unique param\u00e8tre la liste des stocks et qui renvoie le nombre total de brioches produites.</p> </li> </ol> <p>Voir le corrig\u00e9</p>"},{"location":"terminale/01_langages/02_POO/TP_POO/","title":"TP : le jeu de la bataille","text":"<p>Dans ce TP, vous mettrez en oeuvre la POO pour cr\u00e9er un programme qui joue \u00e0 la bataille.</p> <p></p> <p>Objectifs</p> <ul> <li>D\u00e9finir une classe et ses membres.</li> <li>Utiliser des objets, leurs attributs, leurs m\u00e9thodes.</li> <li>R\u00e9pondre \u00e0 un cahier des charges.</li> </ul> <p>L'\u00e9nonc\u00e9 au format PDF est disponible ci-dessous.</p> <p>Crit\u00e8res d'\u00e9valuation</p> <ul> <li>Respect du cahier de charges.</li> <li>Documentation, sp\u00e9cification des m\u00e9thodes cr\u00e9\u00e9es.</li> <li>Le jeu se d\u00e9roule sans erreur.</li> <li>Bonus : tenir compte des compl\u00e9ments sur la POO.</li> </ul> <p>Fichier Python \u00e0 t\u00e9l\u00e9charger et \u00e0 compl\u00e9ter : bataille_eleves.py</p>"},{"location":"terminale/01_langages/02_POO/essentiel/","title":"L'essentiel","text":"<p>La POO consiste \u00e0 d\u00e9finir de nouveaux objets pour d\u00e9couper un programme en briques ind\u00e9pendantes (ou non) qui peuvent facilement resservir.</p>"},{"location":"terminale/01_langages/02_POO/essentiel/#classe-initialiseur-attributs","title":"Classe, initialiseur, attributs","text":"<p>En Python, la d\u00e9finition d'une classe se fait avec le mot-clef <code>class</code> suivi du nom de la classe.</p> <p>L'initialiseur <code>__init__</code> permet de d\u00e9finir les attributs d'instance.</p> \ud83d\udc0d Script Python<pre><code>class Rectangle:\n\"\"\"Repr\u00e9sente un rectangle\"\"\"\n\n    def __init__(self, largeur = 2, hauteur = 3):\n        self.largeur = largeur\n        self.hauteur = hauteur\n</code></pre>"},{"location":"terminale/01_langages/02_POO/essentiel/#methodes","title":"M\u00e9thodes","text":"<p>Une m\u00e9thode, c'est ce qui permet \u00e0 une instance de r\u00e9aliser des actions. Techniquement se sont des fonctions d\u00e9finies dans le corps de la classe, et qui prennent toujours au moins un premier param\u00e8tre qui est <code>self</code>.</p> <p>On acc\u00e8de aux m\u00e9thodes par la notation point\u00e9e : <code>mon_rectangle.aire()</code>.</p> <p>Encapsulation : les m\u00e9thodes et les attributs sont d\u00e9finis \u00e0 l'int\u00e9rieur de la classe. Les attributs ne devraient pas \u00eatre directement accessible en dehors de la classe. On y acc\u00e8de par des m\u00e9thodes (voir les compl\u00e9ments). L'ensemble des m\u00e9thodes et attributs publics est l'interface de l'objet.</p>"},{"location":"terminale/01_langages/02_POO/essentiel/#representation-simplifiee-dune-classe","title":"Repr\u00e9sentation simplifi\u00e9e d'une classe","text":"<pre><code>classDiagram\n    class Rectangle{\n        -float hauteur\n        -float largeur\n        +perimetre() float\n        +aire() float\n        +double_largeur()\n    }</code></pre>"},{"location":"terminale/01_langages/03_paradigmes/essentiel/","title":"L'essentiel : paradigmes de programmation","text":""},{"location":"terminale/01_langages/03_paradigmes/essentiel/#introduction-et-definition","title":"Introduction et d\u00e9finition","text":"<p>Un paradigme de programmation est une m\u00e9thode de programmation.</p>"},{"location":"terminale/01_langages/03_paradigmes/essentiel/#le-paradigme-imperatif","title":"Le paradigme imp\u00e9ratif","text":"<p>C'est le plus couramment utilis\u00e9 : il se concentre sur la description des op\u00e9rations en s\u00e9quences d'instructions.</p> <p>La plupart des langages de haut niveau comporte cinq types d'instructions principales :</p> <ul> <li>la s\u00e9quence d'instructions</li> <li>l'assignation ou affectation</li> <li>l'instruction conditionnelle (if, else)</li> <li>la boucle (for, while)</li> <li>les branchements.</li> </ul> <p>Exemples : C, C++, Java, Javascript, Python, ...</p>"},{"location":"terminale/01_langages/03_paradigmes/essentiel/#le-paradigme-fonctionnel","title":"Le paradigme fonctionnel","text":"<ul> <li>Les fonctions sont des donn\u00e9es comme les autres.</li> <li>Une fonction doit renvoyer une valeur enti\u00e8rement d\u00e9termin\u00e9e par ses arguments.</li> <li>Un programme n'est qu'une composition de fonctions.</li> <li>Fonctions pures : fonction sans effet de bord. Une fonction pure ne modifie la valeur d'aucune variable ext\u00e9rieure.</li> <li>Fonctions d'ordre sup\u00e9rieur : fonctions qui s'appliquent \u00e0 des fonctions, comme <code>map</code> en Python.</li> </ul> <p>Exemples : OCamL, Haskell, F#, Rust</p>"},{"location":"terminale/01_langages/03_paradigmes/essentiel/#le-paradigme-objet","title":"Le paradigme objet","text":"<p>Voir le cours pr\u00e9c\u00e9dent.</p>"},{"location":"terminale/01_langages/03_paradigmes/essentiel/#a-quel-paradigme-se-vouer","title":"\u00c0 quel paradigme se vouer ?","text":"<ul> <li>Il faut ma\u00eetriser plusieurs paradigmes.</li> <li>En fonction des objectifs \u00e0 atteindre, certains paradigmes sont plus adapt\u00e9s que d'autres.</li> <li>Un programme peut m\u00e9langer plusieurs paradigmes.</li> </ul>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/","title":"Paradigmes de programmation (Cours)","text":""},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#introduction-et-definition","title":"Introduction et d\u00e9finition","text":"<p>Tout d'abord, nous pouvons nous demander ce que signifie le mot paradigme. Parmi les trois d\u00e9finitions fournies par le dictionnaire Le Robert, celle qui nous int\u00e9resse est la suivante : </p> <p>D\u00e9finition</p> Paradigme <p>Mod\u00e8le de pens\u00e9e.</p> <p>En programmation, un paradigme est donc une mani\u00e8re de penser un programme, une m\u00e9thode de programmation.</p> <p>Un programme est un texte, avec ses conventions d'\u00e9criture. Il s'agit bien d'un langage \u00e9crit, au sens commun, mais il doit toujours avoir un sens univoque et non contextuel. </p> <p>Il faut que la formulation textuelle d'un programme soit :</p> <ul> <li>suffisamment proche d'un code r\u00e9el, conforme \u00e0 une famille d'ordinateurs particuliers ;</li> <li>standardis\u00e9e et g\u00e9n\u00e9rale pour permettre une adaptation imm\u00e9diate et automatique \u2014 on parle de \u00ab portabilit\u00e9 \u00bb \u2014 \u00e0 d'autres contextes similaires ;</li> <li>parfaitement univoque, non ambigu\u00eb, puisque destin\u00e9e \u00e0 un traitement automatique ;</li> <li>intelligible par un \u00eatre humain.</li> </ul> <p>Vu le grand nombre de langages existants, une classification s'est fait jour. On regroupe en g\u00e9n\u00e9ral les langages en \u00ab familles \u00bb selon le paradigme de programmation auquel ils sont (le mieux) adapt\u00e9s.</p> <p>Conform\u00e9ment au programme, nous allons d\u00e9finir les paradigmes imp\u00e9ratif, fonctionnel et objet.</p> <p>Notons tout d'abord que la plupart des langages de programmation modernes sont multiparadigmes : ils permettent de programmer aussi bien de fa\u00e7on imp\u00e9rative, fonctionnelle qu'avec des objets.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#paradigme-imperatif","title":"Paradigme imp\u00e9ratif","text":"<p>La programmation imp\u00e9rative est la m\u00e9thode de programmation que vous avez le plus couramment utilis\u00e9e jusqu'\u00e0 pr\u00e9sent.</p> <p>Il s'agit d'un paradigme de programmation qui d\u00e9crit les op\u00e9rations en s\u00e9quences d'instructions ex\u00e9cut\u00e9es par l'ordinateur pour modifier l'\u00e9tat du programme.</p> <p>La programmation imp\u00e9rative se concentre sur la description du fonctionnement d'un programme.</p> <p>La plupart des langages de haut niveau comporte cinq types d'instructions principales :</p> <ul> <li>la s\u00e9quence d'instructions</li> <li>l'assignation ou affectation</li> <li>l'instruction conditionnelle (if, else)</li> <li>la boucle (for, while)</li> <li>les branchements.</li> </ul> <p>Ce type de programmation est le plus ancien et utilis\u00e9, il est facile \u00e0 comprendre, souvent efficace car proche des instructions r\u00e9alis\u00e9s par les processeurs. Par contre, il est assez difficile \u00e0 tester car l'\u00e9tat du programme ne cesse de changer et il est difficile de tester une petite partie du programme au milieu de son ex\u00e9cution par exemple car elle n\u00e9cessite que toutes les instructions pr\u00e9c\u00e9dentes aient d\u00e9j\u00e0 \u00e9t\u00e9 appliqu\u00e9es correctement.</p> <p>Les langages C, C++, Java, Javascript, Python et beaucoup d'autres permettent la programmation imp\u00e9rative.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#paradigme-fonctionnel","title":"Paradigme fonctionnel","text":""},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#introduction","title":"Introduction","text":"<p>Le paradigme fonctionnel est un paradigme de programmation qui reprend les principes du lambda-calcul introduit par Alonzo Church dans les ann\u00e9es 1930.</p> <p>L'id\u00e9e fondamentale du lambda-calcul est de consid\u00e9rer que les fonctions sont des donn\u00e9es comme les autres. Ainsi, elles peuvent \u00eatre par exemple pass\u00e9es en param\u00e8tre \u00e0 d'autres fonctions.</p> <p>D'autres principes d\u00e9coulent \u00e9galement de la th\u00e8se de Church :</p> <ul> <li>les fonctions sont des fonctions au sens math\u00e9matique du terme : elles se contentent de renvoyer une valeur en fonction de leurs arguments ;</li> <li>il n'y a pas de notion \u00ab d'\u00e9tat \u00bb, ni \u00e0 l'ext\u00e9rieur des fonctions, ni dans les fonctions. Un programme n'est donc qu'une composition de fonctions.</li> </ul> <p>Le paradigme fonctionnel a d'abord \u00e9t\u00e9 implant\u00e9 au sein de langages d\u00e9di\u00e9s, plus ou moins \u00ab purement fonctionnel \u00bb. Parmi les langages dits fonctionnels, on peut citer :</p> <ul> <li>LISP (List Processing) : 1958 ;</li> <li>SML (Standard Meta Language) : 1983 ;</li> <li>CAML (Categorical Abstract Machine Language) : 1987, puis son extension objet OCAML ;</li> <li>Haskell : 1990 ;</li> <li>Clojure : 2007.</li> </ul> <p>Mais certains aspects du paradigme fonctionnel ont fini par \u00eatre int\u00e9gr\u00e9s dans des langages imp\u00e9ratifs, car ils pr\u00e9sentent certains avantages :</p> <ul> <li>fonctions pures ;</li> <li>fonctions d'ordre sup\u00e9rieur ;</li> <li>lambda-expressions ;</li> <li>\u00e9valuation paresseuse.</li> </ul> <p>En programmation fonctionnelle, les variables sont toujours constantes : une fois qu'elles ont \u00e9t\u00e9 affect\u00e9es, leur valeur ne doit plus changer ; de plus les boucles sont remplac\u00e9es par des appels r\u00e9cursifs.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#mise-en-oeuvre-en-python","title":"Mise en oeuvre en Python","text":""},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#fonctions-pures","title":"Fonctions pures","text":"<p>Une fonction pure est une fonction qui ne modifie rien ; elle ne fait que renvoyer des valeurs en fonction de ses param\u00e8tres. Et les valeurs renvoy\u00e9es ne doivent d\u00e9pendre que de ses param\u00e8tres, et pas de variables ext\u00e9rieures \u00e0 la fonction.</p> <p>Les modifications qu'une fonction peut effectuer sur l'\u00e9tat du syst\u00e8me sont appel\u00e9es effets de bord. Un affichage \u00e0 l'\u00e9cran est un exemple d'effet de bord.</p> <p>En Python, rien n'impose d'impl\u00e9menter des fonctions pures. Notamment, \u00e9tant donn\u00e9 la fa\u00e7on dont les arguments sont pass\u00e9s \u00e0 une fonction en Python (utilisation d'une copie de la r\u00e9f\u00e9rence initiale), rien n'interdit qu'une fonction modifie l'objet r\u00e9f\u00e9renc\u00e9 par l'un de ses param\u00e8tres.</p> <p>Voici un tel exemple :</p> \ud83d\udc0d Script Python<pre><code>def retirer_dernier(liste) :\n    liste.pop()\n</code></pre> <p>On utilise cette fonction ainsi :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ma_liste = [1, 2, 3]\n&gt;&gt;&gt; retirer_dernier(ma_liste)\n</code></pre> <p>L'inconv\u00e9nient de ce type de fonction est qu'elle modifie la variable <code>ma_liste</code> qui, \u00e0 l'issue de l'ex\u00e9cution des deux lignes pr\u00e9c\u00e9dentes contient <code>[1, 2]</code>. Cela peut rendre le code plus difficile \u00e0 comprendre et g\u00e9n\u00e9rer des comportements inattendus. Une fonction pure, au contraire, doit renvoyer la valeur calcul\u00e9e sans modifier ses param\u00e8tres. Ainsi, on peut r\u00e9\u00e9crire le traitement pr\u00e9c\u00e9dent de la fa\u00e7on suivante :</p> \ud83d\udc0d Script Python<pre><code>def retirer_dernier_pure(liste) :\n    retour = liste[:]\n    retour.pop()\n    return retour\n</code></pre> <p>Cette fonction s'utilise ainsi :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; l1 = [1, 2, 3]\n&gt;&gt;&gt; l2 = retirer_dernier_pure(l1)\n</code></pre> <p>Dans ce dernier cas, le fait que l'appel \u00e0 <code>retirer_dernier_pure</code> ne modifie par <code>l1</code> est bien plus intuitif.</p> <p>\u00c0 retenir</p> <p>Pour faciliter l'\u00e9criture de fonctions pures en Python, on peut :</p> <ul> <li>utiliser au maximum des donn\u00e9es non mutables (tuples plut\u00f4t que listes par exemple) ;</li> <li>copier syst\u00e9matiquement au d\u00e9but des fonctions les param\u00e8tres r\u00e9f\u00e9ren\u00e7ant des donn\u00e9es mutables et utiliser ces copies dans la fonction.</li> <li>on veille \u00e0 ne pas modifier de valeur existante, mais plut\u00f4t \u00e0 cr\u00e9er une nouvelle valeur \u00e0 partir de la valeur existante.</li> </ul> <p>Essayer de n'\u00e9crire que des fonctions pures permet de limiter les risques de bugs et facilite la relecture des programmes. Il s'agit donc d'un style de programmation \u00e0 privil\u00e9gier.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#fonctions-dordre-superieur","title":"Fonctions d'ordre sup\u00e9rieur","text":"<p>Les fonctions \u00e9tant consid\u00e9r\u00e9es comme des donn\u00e9es comme les autres, il est possible de d\u00e9finir des fonctions dont les arguments sont d'autres fonctions. On parle alors de fonctions d'ordre sup\u00e9rieur.</p> <p>Python fournit des fonctions d'ordre sup\u00e9rieur dans sa biblioth\u00e8que standard. Voyons par exemple la fonction <code>map</code> qui permet d'appliquer une fonction \u00e0 tous les \u00e9l\u00e9ments d'une liste. Quelques remarques et explications s'imposent :</p> <ul> <li><code>map</code> peut s'appliquer \u00e0 tout objet it\u00e9rable, donc aux cha\u00eenes de caract\u00e8res, aux tuples, aux listes.</li> <li><code>map</code> retourne un objet it\u00e9rable : les valeurs r\u00e9sultat ne sont pas toutes calcul\u00e9es par avance, elles le seront \u00e0 la demande. Cet it\u00e9rable peut \u00eatre transform\u00e9 en liste en tapant <code>list(map(...))</code> ou \u00eatre utilis\u00e9 dans une boucle <code>for item in map(...):</code>. Ce calcul des valeurs \u00e0 la demande est une mise en oeuvre du principe de l'\u00e9valuation paresseuse caract\u00e9ristique de la programmation fonctionnelle.</li> </ul> <p>Consid\u00e9rons le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>def carre(x):\n    return x**2\n\n\ndef capit(ch):\n    return ch.capitalize()\n\n\nma_str = \"azerty\"\nmon_tuple = (1, 2, 3, 4, 5)\nma_liste = [1, 2, 3, 4, 5]\n\niter1 = map(capit, ma_str)\niter2 = map(carre, mon_tuple)\niter3 = map(carre, ma_liste)\n\nfor car in iter1:\n    print(car, end=\"\")\nprint()\nprint(tuple(iter2))\nprint(list(iter3))\n</code></pre> <p>On obtient en sortie : </p> \ud83d\udc0d Console Python<pre><code>AZERTY\n(1, 4, 9, 16, 25)\n[1, 4, 9, 16, 25]\n</code></pre> <p>Remarque</p> <p>Le programme ci-dessus est donn\u00e9 pour illustrer l'id\u00e9e de fonction d'ordre sup\u00e9rieur, mais il n'est pas r\u00e9dig\u00e9, notamment sa partie it\u00e9rative, dans l'esprit de la programmation fonctionnelle !</p> <p>Les langages OCamL, Haskell, F#, Rust par exemple sont des langages fonctionnels.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#paradigme-objet","title":"Paradigme objet","text":"<p>La POO consiste en la d\u00e9finition et l'interaction de briques logicielles appel\u00e9es objets; un objet repr\u00e9sente un concept, une id\u00e9e ou toute entit\u00e9 du monde physique, comme une voiture, une personne ou encore une page d'un livre.</p> <p>Un objet poss\u00e8de:</p> <ul> <li>des donn\u00e9es: ses attributs et</li> <li>des fonctions: ses m\u00e9thodes</li> </ul> <p>Les diff\u00e9rents principes de la conception orient\u00e9e objet aident \u00e0 la r\u00e9utilisation du code, au masquage des donn\u00e9es, etc. Les bases de la POO sont d\u00e9taill\u00e9es dans le cours pr\u00e9c\u00e9dent, avec ses compl\u00e9ments.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes/#a-quel-paradigme-se-vouer","title":"\u00c0 quel paradigme se vouer ?","text":"<p>Comment choisir entre les diff\u00e9rents paradigmes existants ?</p> <p>Il est important de bien comprendre qu'un programmeur doit maitriser plusieurs paradigmes de programmation (imp\u00e9ratif, objet ou encore fonctionnelle). En effet, il sera plus facile d'utiliser le paradigme objet dans certains cas alors que dans d'autres situations, l'utilisation du paradigme fonctionnel sera pr\u00e9f\u00e9rable. \u00catre capable de choisir le \"bon\" paradigme en fonction des situations fait partie du bagage de tout bon programmeur.</p> <p>Il est aussi important de bien comprendre que la fronti\u00e8re entre ces diff\u00e9rents paradigmes est parfois floue, par exemple on utilise tr\u00e8s souvent de l'imp\u00e9ratif en programmation orient\u00e9e objet.</p> <p>Dans l'article Perceiving Python programming paradigms du site opensource.com/, les conseils suivants sont donn\u00e9s :</p> <ul> <li>Pour simplifier, si votre probl\u00e8me implique une s\u00e9rie de manipulations s\u00e9quentielles simples, suivre le paradigme de programmation imp\u00e9rative de la vieille \u00e9cole serait le moins cher en termes de temps et d'efforts et vous donnerait potentiellement les meilleures performances. </li> <li>Dans le cas de probl\u00e8mes n\u00e9cessitant des transformations math\u00e9matiques des valeurs, le filtrage des informations, le mappage (transformer une liste en une autre) et les r\u00e9ductions (transformer une liste en une valeur), la programmation fonctionnelle pourrait \u00eatre adapt\u00e9e.</li> <li>Si le probl\u00e8me est structur\u00e9 comme un tas d'objets interd\u00e9pendants avec certains attributs qui peuvent changer avec le temps, en fonction de certaines conditions, la programmation orient\u00e9e objet sera certainement la plus naturelle. </li> </ul> <p>Bien s\u00fbr, il n'y a pas de r\u00e8gle simple, car le choix du paradigme de programmation d\u00e9pend \u00e9galement fortement du type de donn\u00e9es \u00e0 traiter, des connaissances des programmeurs et de diverses autres choses comme l'\u00e9volutivit\u00e9. </p> <p>Notons pour finir que cette courte pr\u00e9sentation ne recouvre pas tous les paradigmes de programmation existants. On rencontrera notamment l'id\u00e9e de programmation \u00e9v\u00e9nementielle lors du d\u00e9veloppement d'interfaces graphiques.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_exos/#exercice-1","title":"Exercice 1","text":"<p>Voici diff\u00e9rents algorithmiques permettant l'affichage des 10 chiffres entiers dans l'ordre d\u00e9croissant.</p> <p>Pr\u00e9ciser pour chacun des algorithme le type de paradigme auquel il correspond.</p> <p>Algorithme 1 :</p> \ud83d\udc0d Script Python<pre><code>def decompter(n:int)-&gt;None:\n    if n&gt;=0: \n        print(n)\n        decompter(n-1)\ndecompter(9)\n</code></pre> <p>Algorithme 2 :</p> \ud83d\udc0d Script Python<pre><code>for i in range(10):\n    print(9-i)\n</code></pre> <p>Algorithme 3 :</p> \ud83d\udc0d Script Python<pre><code>class Nombres():\n\n    def __init__(self,valeur):\n        self.valeur = valeur\n\n    def diminuer(self):\n        self.valeur -= 1\n\n    def __str__(self):\n        return str(self.valeur)\n\nn = Nombres(9)\nwhile n.valeur &gt;= 0 :\n    print(n)\n    n.diminuer()\n</code></pre>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_exos/#exercice-2","title":"Exercice 2","text":"<p>Voici deux versions d'une fonction <code>teste_ordre_liste</code> dont l'objectif est de savoir si une liste est ordonn\u00e9e par ordre croissant. Indiquer quel paradigme est utilis\u00e9 dans chacune des deux versions et expliquer votre r\u00e9ponse.</p> <p>Version 1</p> \ud83d\udc0d Script Python<pre><code># -*- coding: utf-8 -*-\n\ndef test_ordre(a,b) :\n    if a &lt; b :\n        return True\n    else :\n        return False\n\ndef test_ordre_liste(liste) :\n    if len(liste) &lt; 2 :\n        return True\n    return test_ordre(liste[0],liste[1]) and test_ordre_liste(liste[1:])\n\ntest_ordre_liste([2,3,2])\n</code></pre> <p>Version 2</p> \ud83d\udc0d Script Python<pre><code># -*- coding: utf-8 -*-\n\ndef test_ordre(a,b) :\n    if a &lt; b :\n        return True\n    else :\n        return False\n\ndef test_ordre_liste(liste) :\n    if len(liste) &lt; 2 :\n        return True\n    else :\n        if test_ordre(liste[0],liste[1]) == False :\n            return False\n        else :\n            del liste[0]\n            return test_ordre_liste(liste)\n\ntest_ordre_liste([2,3,2])\n</code></pre>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_exos/#exercice-3","title":"Exercice 3","text":"<p>Le programme ci-dessous ne respecte pas le paradigme fonctionnel. Pourquoi ?</p> \ud83d\udc0d Script Python<pre><code>i = 5\n\ndef fct():\n  if i &gt; 5:\n    return True\n  else :\n    return False\n\nfct()\n</code></pre> <p>Modifier le programme pour qu'il respecte le paradigme fonctionnel.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_exos/#exercice-4","title":"Exercice 4","text":"<p>M\u00eame exercice avec le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>l = [4,7,3]\n\ndef ajout(i):\n  l.append(i)\n</code></pre> <p>Compl\u00e9ment pour les curieux</p> <p>Pour ceux qui voudraient d\u00e9couvrir un langage fonctionnel, cette page fournit une introduction pas \u00e0 pas aux bases de OCamL. Ce langage est utilis\u00e9 en CPGE scientifiques dans le cadre de l'option informatique. Une autre introduction, pour la pr\u00e9pa, est disponible ici. On peut programmer en OCamL en ligne ici.</p>"},{"location":"terminale/01_langages/03_paradigmes/paradigmes_quiz/","title":"Quiz","text":""},{"location":"terminale/02_structures/","title":"S2-Structures de donn\u00e9es","text":"<p>Points du programme trait\u00e9s dans cette s\u00e9quence :</p> Contenus Capacit\u00e9s attendues Commentaires Structures de donn\u00e9es, interface et impl\u00e9mentation. Sp\u00e9cifier une structure de donn\u00e9es par son interface. Distinguer interface et impl\u00e9mentation. \u00c9crire plusieurs impl\u00e9mentations d'une m\u00eame structure de donn\u00e9es. L'abstraction des structures de donn\u00e9es est introduite apr\u00e8s plusieurs impl\u00e9mentations d'une structure simple comme la file (avec un tableau ou avec deux piles) Listes, piles, files : structures lin\u00e9aires. Dictionnaires, index et cl\u00e9. Distinguer des structures par le jeu des m\u00e9thodes qui les caract\u00e9risent. Choisir une structure de donn\u00e9es adapt\u00e9e \u00e0 la situation \u00e0 mod\u00e9liser. Distinguer la recherche d'une valeur dans une liste et dans un dictionnaire. On distingue les modes FIFO (first in first out) et LIFO (last in first out) des piles et des files."},{"location":"terminale/02_structures/bilan/","title":"Bilan de la s\u00e9quence : Structures de donn\u00e9es abstraites","text":"<ul> <li> <p>Cours :</p> <ul> <li>Interfaces et impl\u00e9mentation. : savoir diff\u00e9rencier un type abstrait de donn\u00e9es et un de ses impl\u00e9mentations, notion d'interface et d'API.</li> <li>Listes., Piles. et Files. : conna\u00eetre pour chacune de ces structures, sa d\u00e9finition, son fonctionnement, ses m\u00e9thodes primitives et une ou deux impl\u00e9mentations diff\u00e9rentes. Conna\u00eetre des situations typiques d'utilisation de ces structures.</li> <li>Dictionnaires. : conna\u00eetre la d\u00e9finition, le fonctionnement et les m\u00e9thodes primitives associ\u00e9es. En particulier, ma\u00eetriser l'utilisation des dictionnaires en Python. Conna\u00eetre l'avantage des dictionnaires dur les listes en termes de performance.</li> </ul> </li> <li> <p>Exercices de base faits et corrig\u00e9s durant la s\u00e9quence :</p> <ul> <li>Fiche sur les listes, piles et files. : exercices 1, 2, 3, 4, 6, 7.</li> <li>Fiche sur les dictionnaires. : exercices 1, 2, 3, 4. Correction de l'exercice 4.</li> </ul> </li> <li> <p>Probl\u00e8mes, T.P. et mini projets \u00e9tudi\u00e9s durant la s\u00e9quence :</p> <ul> <li>Parenth\u00e9sage correct. : exercice 5. Corrig\u00e9.</li> <li>T.P. Carnet d'adresses sur les dictionnaires. Corrig\u00e9.</li> <li>Projet d\u00e9tecteur de langue : utilisation de dictionnaires. corrig\u00e9.</li> <li>Notation polonaise inverse : \u00e9nonc\u00e9 et corrig\u00e9.</li> <li>2021 M\u00e9tropole Jour 1 : exo 2 : \u00e9nonc\u00e9 et corrig\u00e9.</li> <li>2022 Centres \u00e9trangers Jour 1 : exo 1 : \u00e9nonc\u00e9 et corrig\u00e9.</li> <li>2022 Centres \u00e9trangers Jour 1 : exo 2 : \u00e9nonc\u00e9 et corrig\u00e9.</li> </ul> </li> <li> <p>Probl\u00e8mes suppl\u00e9mentaires tir\u00e9s des annales :</p> <ul> <li>2021 Centres \u00e9trangers Jour 2 : exo 1.</li> <li>2021 Centres \u00e9trangers Jour 1 : exo 5.</li> <li>2021 Am\u00e9rique du Nord Jour1 : exo 5.</li> <li>2021 Sujet z\u00e9ro : exo 1.</li> <li>2022 M\u00e9tropole Jour 1 : exo 1.</li> <li>2022 M\u00e9tropole Jour 2 : exo 2.</li> <li>2022 Mayotte Liban Jour 1 : exo 1.</li> <li>2022 Mayotte Liban Jour 2 : exo 1.</li> <li>2022 Am\u00e9rique du Nord Jour 1 : exo 5.</li> <li>2022 Centres \u00e9trangers Jour 2 : exo 2.</li> <li>2021 Centres \u00e9trangers Jour 1 : exo 2.</li> <li>2021 M\u00e9tropole Septembre Jour 2 : exo 2.</li> </ul> </li> </ul>"},{"location":"terminale/02_structures/essentiel/","title":"S2-Structures de donn\u00e9es","text":""},{"location":"terminale/02_structures/essentiel/#1-interface-et-implementations","title":"1. Interface et impl\u00e9mentations","text":"<p>Pour les diff\u00e9rentes structures de donn\u00e9es \u00e9tudi\u00e9es dans ce chapitre, on distinguera l'interface qui regroupe les primitives, fonctions et m\u00e9thodes dont l'utilisateur du type abstrait dispose, de l'impl\u00e9mentation, programmation effective de la structure de donn\u00e9es dans un langage, travail r\u00e9alis\u00e9 par le concepteur.</p>"},{"location":"terminale/02_structures/essentiel/#2-listes-piles-et-files","title":"2. Listes, Piles et files","text":""},{"location":"terminale/02_structures/essentiel/#21-listes","title":"2.1. Listes","text":"<p>Une liste est une structure de donn\u00e9es qui permet de stocker des donn\u00e9es et d'y acc\u00e9der directement.</p> <p>Une liste est une collection finie de donn\u00e9es. On appelle t\u00eate le premier \u00e9l\u00e9ment de la liste et queue la liste priv\u00e9e de son premier \u00e9l\u00e9ment.</p> <p>L'interface minimale  permettant de d\u00e9finir le type abstrait de donn\u00e9es \"liste\" comporte cinq fonctions, qui sont appel\u00e9es primitives :</p> <ul> <li><code>creer()</code>, qui cr\u00e9e une liste vide ;</li> <li><code>ajouter(element, liste)</code>, qui ajoute un \u00e9l\u00e9ment en t\u00eate de liste ; ces deux premi\u00e8re primitives peuvent parfois se regrouper en une seule ;</li> <li><code>tete(liste)</code>, qui renvoie la valeur de l'\u00e9l\u00e9ment en t\u00eate de liste ;</li> <li><code>queue(liste)</code>, qui renvoie la liste priv\u00e9e de son premier \u00e9l\u00e9ment ;</li> <li><code>est_vide(liste)</code>, qui renvoie vrai si la liste est vide, faux sinon.</li> </ul> <p>Diff\u00e9rentes impl\u00e9mentations sont possibles : avec des tuples, en utilisant la POO.</p>"},{"location":"terminale/02_structures/essentiel/#22-piles","title":"2.2. Piles","text":"<p>La pile est une structure de donn\u00e9es qui permet de stocker des donn\u00e9es et d'y acc\u00e9der. Une pile se comporte comme une pile d'assiettes : on parle de mode LIFO (Last In, First Out, en anglais, dernier arriv\u00e9, premier sorti), c'est-\u00e0-dire que le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e9dera. Les premiers \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments qui ont \u00e9t\u00e9 ajout\u00e9s apr\u00e8s eux soient sortis de la pile. Pour g\u00e9rer cette contrainte, on d\u00e9finit alors le sommet de la pile qui caract\u00e9rise l'emplacement pour ajouter ou retirer des \u00e9l\u00e9ments.</p> <p>L'interface suivante permet de d\u00e9finir le type abstrait de donn\u00e9es pile : </p> <ul> <li><code>creer()</code>, qui cr\u00e9e une pile vide ;</li> <li><code>taille(pile)</code>, qui permet de conna\u00eetre le nombre d'\u00e9l\u00e9ments contenus dans la pile ;</li> <li><code>est_vide(pile)</code>, qui renvoie vrai si la pile est vide, faux sinon ;</li> <li><code>empiler(pile, element)</code>, qui ajoute un \u00e9l\u00e9ment au sommet de la pile (qui devient le nouveau sommet) ;</li> <li><code>depiler(pile)</code>, qui retire et renvoie l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile (le nouveau sommet devient l'\u00e9l\u00e9ment qui suivait l'ancien sommet) ;</li> <li><code>sommet(pile)</code>, qui renvoie l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile (sans le retirer).</li> </ul> <p>L'op\u00e9ration d'empilement se dit \"push\" en anglais, l'op\u00e9ration de d\u00e9pilement se dit \"pop\".</p> <p></p> <p>Diff\u00e9rentes impl\u00e9mentations sont possibles : avec des listes Python, utilisation de la POO, ...</p>"},{"location":"terminale/02_structures/essentiel/#23-files","title":"2.3. Files","text":"<p>La file, comme la liste et la pile, permet de stocker des donn\u00e9es et d'y acc\u00e9der. La diff\u00e9rence se situe au niveau de l'ajout et du retrait d'\u00e9l\u00e9ments. Le prochain \u00e9l\u00e9ment auquel on peut acc\u00e9der est le premier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure ; les nouveaux \u00e9l\u00e9ments viennent en bout de file : on ne pourra y acc\u00e9der que lorsque tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux seront sortis de la file. On parle de mode FIFO (First in, First out, en anglais, premier arriv\u00e9, premier sorti), c'est-\u00e0-dire que le premier \u00e9l\u00e9ment ayant \u00e9t\u00e9 ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e9dera. Les derniers \u00e9l\u00e9ments ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux soient sortis de la file. Pour g\u00e9rer cette contrainte, la pile est caract\u00e9ris\u00e9e par deux \u00ab emplacements \u00bb : la t\u00eate de file, sortie de la file (d\u00e9but de la structure), o\u00f9 les \u00e9l\u00e9ments sont retir\u00e9s ; le bout de file, entr\u00e9e de la file (fin de la structure), o\u00f9 les \u00e9l\u00e9ments sont ajout\u00e9s.</p> <p>6 primitives constituent l'interface permettant de d\u00e9finir le type abstrait de donn\u00e9es \"file\" :</p> <ul> <li><code>creer()</code>, qui cr\u00e9e une file vide ;</li> <li><code>taille(file)</code>, qui permet de conna\u00eetre le nombre d'\u00e9l\u00e9ments contenus dans la file ;</li> <li><code>est_vide(file)</code>, qui renvoie vrai si la file est vide, faux sinon ;</li> <li><code>enfiler(file, element)</code>, qui ajoute un \u00e9l\u00e9ment au bout de la file (et devient le nouveau bout de file) ;</li> <li><code>defiler(file)</code>, qui retire et renvoie l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la t\u00eate de la file (la nouvelle t\u00eate devient l'\u00e9l\u00e9ment qui suivait l'ancienne t\u00eate) ;</li> <li><code>tete(file)</code>, qui renvoie l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la t\u00eate de la file (sans le retirer).</li> </ul> <p>Enfiler se dit enqueue en anglais et d\u00e9filer se dit dequeue.</p> <p></p> <p>Diff\u00e9rentes impl\u00e9mentations sont possibles : utilisation de deux piles, POO, ...</p>"},{"location":"terminale/02_structures/essentiel/#3-dictionnaires","title":"3. Dictionnaires","text":"<p>Un dictionnaire, ou tableau associatif,  est une structure de donn\u00e9e permettant d'indexer des objets par leur nom plut\u00f4t que par un nombre. On dit qu'un dictionnaire contient des couples cl\u00e9:valeur (chaque cl\u00e9 est associ\u00e9e \u00e0 une valeur).</p> <p>Les m\u00e9thodes primitives permettant de d\u00e9finir l'interface de la structure de dictionnaire peuvent \u00eatre les suivantes :</p> <ul> <li><code>cr\u00e9er()</code> : cr\u00e9ation d'un nouveau dictionnaire vide ;</li> <li><code>ajouter(dict, cl\u00e9, valeur)</code> : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 ;</li> <li><code>modifier(dict, cl\u00e9, valeur)</code> : on modifie un couple cl\u00e9:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) ;</li> <li><code>supprimer(dict, cl\u00e9)</code> : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) ;</li> <li><code>rechercher(dict, cl\u00e9)</code> : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur.</li> </ul> <p>L'impl\u00e9mentation des dictionnaires repose sur des fonctions et tables de hachage. Ces techniques (hors programme) permettent de tr\u00e8s bonnes performance : par exemple, la recherche dans un dictionnaire de fait \u00e0 co\u00fbt constant (ne d\u00e9pend pas du nombre d'entr\u00e9es dans le dictionnaire) alors que dans un tableau non tri\u00e9, nous avons un co\u00fbt lin\u00e9aire (proportionnel au nombre de donn\u00e9es). </p>"},{"location":"terminale/02_structures/interfaces/","title":"1-Interfaces et impl\u00e9mentations","text":"<p>Nous allons dans ce chapitre nous int\u00e9resser aux structures de donn\u00e9es comme les listes, les piles, les files et les dictionnaires.</p> <p>Les dictionnaires ont d\u00e9j\u00e0 \u00e9t\u00e9 rencontr\u00e9s en premi\u00e8re. Plus pr\u00e9cis\u00e9ment, c'est l'impl\u00e9mentation du type abstrait \"dictionnaire\" en Python qui a \u00e9t\u00e9 utilis\u00e9e.</p> <p>Toutes ces structures de donn\u00e9es sont des types abstraits qui doivent \u00eatre d\u00e9finis dans un langage de programmation pour pouvoir \u00eatre utilis\u00e9s.</p> <p>D\u00e9finition</p> <p>Impl\u00e9menter un algorithme, c'est le traduire dans un langage de programmation.</p> <p>Pour un type abstrait donn\u00e9, disons les dictionnaires, plusieurs impl\u00e9mentations sont possibles. Elles peuvent se diff\u00e9rencier par leur rapidit\u00e9 d'ex\u00e9cution ou leur capacit\u00e9 \u00e0 travailler avec des donn\u00e9es de grande taille par exemple.</p> <p>Une fois impl\u00e9ment\u00e9, le type abstrait doit pouvoir \u00eatre utilis\u00e9 par un programmeur (utilisateur). Cet utilisateur n'a pas besoin de conna\u00eetre comment le type \"dictionnaire\" a \u00e9t\u00e9 concr\u00e8tement impl\u00e9ment\u00e9 dans le langage de programmation qu'il utilise. Par contre, il faut qu'il connaisse pr\u00e9cis\u00e9ment les actions qu'i peut r\u00e9aliser sur ce type de donn\u00e9es.</p> <p>Par exemple, un dictionnaire associe \u00e0 un ensemble de cl\u00e9s un ensemble de valeurs (ce sont les donn\u00e9es) et permet notamment les op\u00e9rations :</p> <ul> <li>d'ajout d'un couple cl\u00e9-valeur ;</li> <li>de suppression d'une cl\u00e9, et donc de la valeur correspondante ;</li> <li>de modification de la valeur associ\u00e9e \u00e0 une cl\u00e9 et ;</li> <li>de recherche de la valeur correspondant \u00e0 une cl\u00e9.</li> </ul> <p>L'ensemble des fonctions (m\u00e9thodes) associ\u00e9es \u00e0 un type abstrait constitue son interface. Ces fonctions, et leurs sp\u00e9cifications, permettent \u00e0 l'utilisateur d'utiliser le type abstrait dans son programme.</p> <p>Quand on utilise une biblioth\u00e8que contenant l'impl\u00e9mentation de structures de donn\u00e9es, l'ensemble de ces sp\u00e9cifications est nomm\u00e9e API (Application Programming Interface, Interface de Programmation en fran\u00e7ais).</p> <p>D\u00e9finition (d'apr\u00e8s Wikipedia)</p> <p>En informatique, une interface de programmation (souvent d\u00e9sign\u00e9e par le terme API pour Application Programming Interface) est un ensemble normalis\u00e9 de classes, de m\u00e9thodes, de fonctions et de constantes qui sert de fa\u00e7ade par laquelle un logiciel offre des services \u00e0 d'autres logiciels. Elle est offerte par une biblioth\u00e8que logicielle ou un service web, le plus souvent accompagn\u00e9e d'une description qui sp\u00e9cifie comment des programmes consommateurs peuvent se servir des fonctionnalit\u00e9s du programme fournisseur. </p> <p>L'usage des biblioth\u00e8ques permet \u00e0 chaque programmeur d'ajouter des structures r\u00e9alisant des types abstraits de donn\u00e9es, cette impl\u00e9mentation n'\u00e9tant pas n\u00e9cessairement connue de l'utilisateur de la structure. Cette m\u00e9thode de conception logicielle, utilisant l'encapsulation, permet \u00e0 la fois :</p> <ul> <li>le d\u00e9veloppement s\u00e9par\u00e9 de l'application et de l'impl\u00e9mentation de la structure ;</li> <li>la modification de l'impl\u00e9mentation sans modification de ses utilisations (on pr\u00e9serve l'interface) ;</li> <li>l'utilisation facile de l'impl\u00e9mentation de la structure dans des programmes \u00e0 venir ;</li> <li>la limitation des erreurs ;</li> <li>l'ajout :<ul> <li>de v\u00e9rifications sous forme d'assertions ;</li> <li>d'outils de correction des probl\u00e8mes de programmation ;</li> </ul> </li> <li>une meilleure lisibilit\u00e9 du code de l'application.</li> </ul> <p>Dans la suite de ce chapitre, nous allons \u00e9tudier successivement les listes, les piles, les files et les dictionnaire du point de vue du concepteur (impl\u00e9mentation) et de l'utilisateur (interface).</p>"},{"location":"terminale/02_structures/projet1/","title":"Projet : d\u00e9tecteur de la langue d'un texte","text":"<p>L'objectif final de ce projet est de produire un programme qui d\u00e9tecte dans quelle langue un texte est \u00e9crit, en s'appuyant sur une analyse fr\u00e9quentielle des lettres du texte.</p> <p>Il s'agit d'un projet : les consignes sont donc volontairement tr\u00e8s limit\u00e9es et seul le r\u00e9sultat attendu est d\u00e9taill\u00e9 (cahier des charges). Il vous revient d'organiser votre travail comme vous le voulez : cr\u00e9ation de fichiers, de biblioth\u00e8ques, recherches documentaires.</p> <p>Vous pouvez exercer votre libert\u00e9 et choisir le style de programmation qui vous plait : imp\u00e9ratif, POO, modulaire ...</p> <p>Des compl\u00e9ments facultatifs sont propos\u00e9s pour les plus rapides.</p>"},{"location":"terminale/02_structures/projet1/#etape-1","title":"\u00c9tape 1","text":"<p>Cr\u00e9er un programme qui :</p> <ul> <li>lit un fichier texte (encod\u00e9 en UTF-8) ;</li> <li>cr\u00e9e un dictionnaire dont les cl\u00e9s sont les lettres de l'alphabet de \"a\" \u00e0 \"z\" ;</li> <li>analyse le contenu du fichier caract\u00e8re par caract\u00e8re et remplit le dictionnaire avec comme valeur le nombre d'apparitions de chacune des lettres dans le texte. Les lettres autres que les lettres \"a\" \u00e0 \"z\" sont ignor\u00e9es ;</li> <li>cr\u00e9e un nouveau dictionnaire avec les m\u00eames cl\u00e9s, mais en valeurs les fr\u00e9quences d'apparition de chaque lettre ;</li> <li>affiche un diagramme en barres de cette r\u00e9partition de fr\u00e9quences \u00e0 l'aide de la librairie MatPlotLib.</li> </ul> <p>Remarques : </p> <ul> <li>il peut \u00eatre judicieux de d\u00e9composer le programme en plusieurs fonctions ;</li> <li>vous rechercherez dans la documentation les exemples d'utilisation de MatPlotLib ;</li> <li>voici un fichier texte pour tester votre programme : texte.</li> </ul>"},{"location":"terminale/02_structures/projet1/#etape-2","title":"\u00c9tape 2","text":"<p>La fr\u00e9quence d'apparition des lettres dans les diff\u00e9rentes langues qui utilisent l'alphabet latin est diff\u00e9rente. C'est pour cette raison que les points attribu\u00e9s aux diff\u00e9rentes lettres ainsi que le nombre de ces lettres dans le jeu du Scrabble ne sont pas les m\u00eames dans tous les pays.</p> <p>Le tableau disponible sur Wikip\u00e9dia \u00e0 cette adresse : -Wikip\u00e9dia- donne cette fr\u00e9quence dans les langues les plus courantes.</p> <p>Nous allons choisir comme signature d'une langue la liste des dix lettres les plus utilis\u00e9es dans cette langue, de la plus utilis\u00e9e \u00e0 la moins utilis\u00e9e.</p> <p>Cr\u00e9er un dictionnaire <code>signature</code> dont les cl\u00e9s sont le nom des langues sous forme de cha\u00eene de caract\u00e8res et les valeurs sont ces listes de dix lettres.</p> <p>Par exemple, l'appel <code>signature[\"Fran\u00e7ais\"][0]</code> retournera <code>\"e\"</code>.</p> <p>On se limitera aux langues suivantes : Fran\u00e7ais, Anglais, Allemand, Espagnol, Italien, Portugais, Esp\u00e9ranto, Polonais et N\u00e9erlandais.</p>"},{"location":"terminale/02_structures/projet1/#etape-3","title":"\u00c9tape 3","text":"<p>\u00c0 partir du programme r\u00e9alis\u00e9 \u00e0 l'\u00e9tape 1, programmer une fonction qui, pour un fichier texte donn\u00e9, cr\u00e9e une liste <code>signature_texte</code> avec pour \u00e9l\u00e9ments les dix lettres les plus utilis\u00e9es dans ce texte, de la plus utilis\u00e9e \u00e0 la moins utilis\u00e9e.</p> <p>\u00c9crire une fonction <code>detecte_langue(texte)</code> qui, \u00e0 partir des \u00e9l\u00e9ments pr\u00e9c\u00e9dents, retourne le nom de la langue dans laquelle le <code>texte</code> donn\u00e9 en param\u00e8tre est le plus probablement \u00e9crit. Il vous faudra notamment choisir un moyen de comparer la liste <code>signature_texte</code> avec l'ensemble des listes du dictionnaire <code>signature</code> afin de trouver cette qui est la plus \"proche\".</p> <p>Pour tester votre programme, voici des fichiers texte dans les diff\u00e9rentes langues concern\u00e9es : textes (fichier .zip \u00e0 d\u00e9compresser).</p> <p>Proposer des am\u00e9liorations possibles.</p>"},{"location":"terminale/02_structures/projet1/#complement-facultatif","title":"Compl\u00e9ment facultatif","text":"<p>Programmer une fonction <code>detecte_langue(url)</code> qui prend en argument l'adresse d'une page web et qui retourne le nom de la langue dans laquelle la page est le plus probablement \u00e9crite. Vous pourrez utiliser la biblioth\u00e8que Python BeautifulSoup qui permet d'extraire le texte pr\u00e9sent dans les balises HTML d'une page web (voir la documentation).</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_TP/","title":"T.P. Dictionnaires","text":"<p>Ce T. P. prend la forme d'un notebook Jupyter \u00e0 compl\u00e9ter.</p> <p>T\u00e9l\u00e9charger la notebook en cliquant sur le bouton ci-dessous et l'ouvrir dans Edupython pour le compl\u00e9ter.</p> <p>Notebook</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/#exercice-1","title":"Exercice 1","text":"<p>Soit le programme Python suivant :</p> \ud83d\udc0d Script Python<pre><code>inventaire = {'pommes': 430, 'bananes': 312,'oranges' : 274, 'poires' : 137}\n\nstock = 0\nfor fruit in inventaire.keys():\n  if fruit != 'bananes':\n    stock = stock + inventaire[fruit]\n</code></pre> <p>Quelle est la valeur de la variable stock apr\u00e8s l'ex\u00e9cution de ce programme ?</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/#exercice-2","title":"Exercice 2","text":"<p>Soit le programme Python suivant :</p> \ud83d\udc0d Script Python<pre><code>P = [{\"nom\":\"Turing\",\"prenom\":\"Alan\",\"age\":28},{\"nom\":\"Lovelace\",\"prenom\":\"Ada\",\"age\":27}]\n</code></pre> <p>Qu'obtient-on si on tape <code>P[1]['age']</code> dans une console Python ?</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/#exercice-3","title":"Exercice 3","text":"<p>Soit le programme Python suivant :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(stock,element,quantite):\n  if element in stock:\n    stock[element] = stock[element] + quantite\n  else:\n    stock[element] = quantite\n\nstock = { 'clous': 14, 'vis': 27, 'boulons': 8, '\u00e9crous': 24 }\najoute(stock,'vis',5)\najoute(stock,'chevilles',3)\n</code></pre> <p>Quelle est la valeur de la variable stock \u00e0 la fin de cette ex\u00e9cution ?</p>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire une fonction <code>occurrences(texte)</code> r\u00e9pondant aux sp\u00e9cifications ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def occurrences(texte: str) -&gt; dict:\n\"\"\"\n    Retourne un dictionnaire indiquant le nombre d'apparitions de chaque mot dans le texte\n\n    Parameters\n    ----------\n    texte : str\n        cha\u00eene de caract\u00e8re \u00e0 \u00e9tudier\n\n    Returns\n    -------\n    occurrences : dict\n        dictionnaire, cl\u00e9s : str, valeurs = int\n    \"\"\"\n</code></pre> <p>Indication : la m\u00e9thode <code>split</code> des cha\u00eenes de caract\u00e8res sera fort utile.</p> <p>Exemple d'ex\u00e9cution en console :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; phrase = \"coucou les gars coucou les filles\"\n&gt;&gt;&gt; occurrences(phrase)\n{'coucou': 2, 'les': 2, 'gars': 1, 'filles': 1}\n</code></pre>"},{"location":"terminale/02_structures/dictionnaires/dicos_exos/#exercices-tombes-au-bac","title":"Exercices tomb\u00e9s au bac","text":"<ul> <li>2022 Centres \u00e9trangers Jour 1 : exo 1 et exo 3.</li> <li>2022 Centres \u00e9trangers Jour 2 : exo 2.</li> <li>2021 Centres \u00e9trangers Jour 1 : exo 2.</li> <li>2021 M\u00e9tropole Septembre Jour 2 : exo 2.</li> </ul>"},{"location":"terminale/02_structures/dictionnaires/dictionnaires/","title":"3-Dictionnaires","text":""},{"location":"terminale/02_structures/dictionnaires/dictionnaires/#31-du-point-de-vue-utilisateur-interface","title":"3.1. Du point de vue utilisateur : Interface","text":"<p>Nous allons maintenant \u00e9tudier un autre type abstrait de donn\u00e9es : les dictionnaires aussi appel\u00e9s tableaux associatifs.</p> <p>D\u00e9finition</p> <p>Un dictionnaire est une structure de donn\u00e9e permettant d'indexer des objets par leur nom plut\u00f4t que par un nombre.</p> <p>On retrouve une structure qui ressemble, \u00e0 premi\u00e8re vue, beaucoup \u00e0 un tableau (\u00e0 chaque \u00e9l\u00e9ment on associe un indice de position). Mais au lieu d'associer chaque \u00e9l\u00e9ment \u00e0 un indice de position, dans un dictionnaire, on associe chaque \u00e9l\u00e9ment (on parle de valeur dans un dictionnaire) \u00e0 une cl\u00e9, on dit qu'un dictionnaire contient des couples cl\u00e9:valeur (chaque cl\u00e9 est associ\u00e9e \u00e0 une valeur).</p> <p>Un dictionnaire associe une cl\u00e9 \u00e0 une valeur. On peut voir les tableaux comme un dictionnaire o\u00f9 les cl\u00e9s sont des entiers allant de 0 \u00e0 la longueur de la liste moins 1.</p> <p>Mais cela peut \u00eatre bien plus g\u00e9n\u00e9ral :</p> <ul> <li>les cl\u00e9s peuvent \u00eatre des mots et les valeurs un nombre. Cela permet par exemple de compter le nombre de fois o\u00f9 un chaque mot d'un texte appara\u00eet.</li> <li>associer un nom (valeur) \u00e0 un num\u00e9ro de t\u00e9l\u00e9phone (cl\u00e9) sans avoir besoin d'une liste allant de 0 \u00e0 num\u00e9ro max de t\u00e9l\u00e9phone.</li> </ul> <p>Les cl\u00e9s ne doivent pas changer une fois cr\u00e9\u00e9es, sinon la serrure fabriqu\u00e9e dans le dictionnaire ne fonctionne plus. On ne doit donc utiliser que des objets non modifiables pour cr\u00e9er des cl\u00e9s d'un dictionnaire Python. Comme :</p> <ul> <li>des entiers</li> <li>des r\u00e9els</li> <li>des chaines de caract\u00e8res</li> <li>des tuples</li> </ul> <p>Exemple</p> <p>Exemples de couples cl\u00e9:valeur :</p> <ul> <li>prenom:Kevin, nom:Durand, naissance:17-05-2005. </li> <li>prenom, nom et naissance sont des cl\u00e9s ; Kevin, Durand et 17-05-2005 sont des valeurs.</li> </ul> <p>Les m\u00e9thodes primitives permettant de d\u00e9finir l'interface de la structure de dictionnaire peuvent \u00eatre les suivantes :</p> <ul> <li><code>cr\u00e9er()</code> : cr\u00e9ation d'un nouveau dictionnaire vide ;</li> <li><code>ajouter(dict, cl\u00e9, valeur)</code> : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 ;</li> <li><code>modifier(dict, cl\u00e9, valeur)</code> : on modifie un couple cl\u00e9:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) ;</li> <li><code>supprimer(dict, cl\u00e9)</code> : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) ;</li> <li><code>rechercher(dict, cl\u00e9)</code> : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur.</li> </ul> <p>Exemple</p> <p>Soit le dictionnaire D compos\u00e9 des couples cl\u00e9:valeur suivants : prenom:Kevin, nom:Durand, naissance:17-05-2005. Pour chaque exemple ci-dessous on repart du dictionnaire d'origine :</p> Code<pre><code>ajouter(D, tel, 06060606)\nmodifier(D,nom,Dupont)\nsupprimer(D, naissance)\nrechercher(D, prenom)\n</code></pre> <ul> <li>Ligne 1 : le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand, date-naissance:17-05-2005, tel:06060606 ;</li> <li>Ligne 2 : le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Dupont, date-naissance:17-05-2005 ;</li> <li>Ligne 3 : le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand ;</li> <li>Ligne 4 : la fonction renvoie Kevin.</li> </ul> <p>L'utilisation de la structure dictionnaire en Python a \u00e9t\u00e9 \u00e9tudi\u00e9e en premi\u00e8re. Il faut donc revoir le cours correspondant.</p>"},{"location":"terminale/02_structures/dictionnaires/dictionnaires/#32-du-point-de-vue-concepteur-implementation","title":"3.2. Du point de vue concepteur : Impl\u00e9mentation","text":"<p>L'impl\u00e9mentation du type abstrait dictionnaire est complexe et d\u00e9passe le cadre du programme de NSI. Cette impl\u00e9mentation utilise des fonctions de hachage.</p> <p></p> <p>L'utilisation des tables et des fonctions de hachages est omnipr\u00e9sente en informatique, il est donc utile pour votre \"culture g\u00e9n\u00e9rale informatique\", de conna\u00eetre le principe des fonctions de hachages. Voici un texte qui vous permettra de comprendre le principe des fonctions de hachages : c'est quoi le hachage ? . Pour avoir quelques id\u00e9es sur le principe des tables de hachages, je vous recommande le visionnage de cette vid\u00e9o : les tables de hachage.</p> <p>On peut retenir que </p> <p>\u00c0 retenir</p> <p>La complexit\u00e9 de recherche, d'ajout et de suppression d'un \u00e9l\u00e9ment dans un dictionnaire est en \\(\\mathcal{O}(1)\\) : elle ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments pr\u00e9sents dans le dictionnaire.</p> <p>En comparaison, la complexit\u00e9 de l'algorithme de recherche dans un tableau non tri\u00e9 est \\(\\mathcal{O}(n)\\).</p> <p>La structure de dictionnaire est donc une structure tr\u00e8s efficace ! N'h\u00e9sitez pas \u00e0 l'utiliser car son temps moyen d'ex\u00e9cution est tr\u00e8s rapide.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-1-listes","title":"Exercice 1 (listes)","text":"<p>On reprend l'impl\u00e9mentation des listes avec des tuples pr\u00e9sent\u00e9e dans le cours.</p> <p>Pr\u00e9voir l'effet et l'affichage en console des instructions suivantes, puis v\u00e9rifier en ex\u00e9cutant ces instructions dans la console interactive apr\u00e8s avoir cr\u00e9\u00e9 et import\u00e9 un fichier contenant le code du cours :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; L = creer()\n&gt;&gt;&gt; est_vide(L)\n&gt;&gt;&gt; L = ajouter(5, ajouter(4, ajouter(3, ajouter(2, ajouter(1, ajouter(0,()))))))\n&gt;&gt;&gt; est_vide(L)\n&gt;&gt;&gt; longueur(L)\n&gt;&gt;&gt; L = ajouter(6,L)\n&gt;&gt;&gt; longueur(L)\n&gt;&gt;&gt; tete(L)\n&gt;&gt;&gt; queue(L)\n&gt;&gt;&gt; longueur(queue(L))\n</code></pre>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-2-listes","title":"Exercice 2 (listes)","text":"<p>Soit la suite d'instructions suivantes :</p> \ud83d\udc0d Console Python<pre><code>L = creer()\nL = ajouter(2, ajouter(15, ajouter (23, L)))\nL1 = queue(L)\na = tete(L1)\nL1 = ajouter(4, ajouter(3, L1))\n</code></pre> <p>Donnez le contenu des listes <code>L</code> et <code>L1</code> et la valeur de <code>a</code>.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-3-piles","title":"Exercice 3 (piles)","text":"<p>Soit une pile P initialement vide. Soit les instructions suivantes (impl\u00e9mentation des piles avec des listes Python) :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; empiler(P,4)\n&gt;&gt;&gt; empiler(P,7)\n&gt;&gt;&gt; a = depiler(P)\n&gt;&gt;&gt; b = taille(P)\n&gt;&gt;&gt; c = depiler(P)\n&gt;&gt;&gt; empiler(P,3)\n&gt;&gt;&gt; empiler(P,2)\n&gt;&gt;&gt; d = taille(P)\n</code></pre> <p>Donnez le contenu de la pile <code>P</code>, la valeur de <code>a</code>, la valeur de <code>b</code>, la valeur de <code>c</code> et la valeur de <code>d</code>.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-4-piles","title":"Exercice 4 (piles)","text":"<p>Soit le programme Python suivant (on utilise l'impl\u00e9mentation des piles en POO) :</p> \ud83d\udc0d Script Python<pre><code>pile = Pile()\ntab = [5,8,6,1,3,7]\nfor k in tab:\n    pile.empiler(k)\npile.empiler(5)\npile.empiler(10)\npile.empiler(8)\npile.empiler(15)\nfor k in tab:\n    if k &gt; 5:\n        pile.depiler()\n</code></pre> <p>Donnez l'\u00e9tat de la pile pile apr\u00e8s l'ex\u00e9cution de ce programme.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-5-piles","title":"Exercice 5 (piles)","text":"<p>Ce probl\u00e8me propose une application concr\u00e8te des piles. Il s'agit d'\u00e9crire une fonction qui contr\u00f4le si une expression math\u00e9matique, donn\u00e9e sous forme d'une cha\u00eene de caract\u00e8res, est bien parenth\u00e9s\u00e9e, c'est- \u00e0-dire s'il y a autant de parenth\u00e8ses ouvrantes que de fermantes, et qu'elles sont bien plac\u00e9es</p> <p>Par exemple :</p> <ul> <li>(..(..)..) est bien parenth\u00e9s\u00e9e</li> <li>(...(..(..)...) ne l'est pas</li> </ul> <p>L'algorithme :</p> <ul> <li>On cr\u00e9e une pile</li> <li>On parcourt l'expression de gauche \u00e0 droite.</li> <li>\u00c0 chaque fois que l'on rencontre une parenth\u00e8se ouvrante \"( \" on l'empile</li> <li>Si on rencontre une parenth\u00e8se fermante \" ) \" et que la pile n'est pas vide on d\u00e9pile ( sinon on retourne faux )</li> <li> <p>\u00c0 la fin la pile doit \u00eatre vide...</p> </li> <li> <p>En utilisant l'une des structures pile du cours, \u00e9crire une fonction <code>verification(expr)</code> qui v\u00e9rifie si une expression math\u00e9matique pass\u00e9e en param\u00e8tre est correctement parenth\u00e9s\u00e9e.</p> </li> <li>Proposer un jeu de tests unitaires v\u00e9rifiant le bon fonctionnement de la fonction.</li> <li>Faire en sorte que le programme tienne compte \u00e9galement des [.</li> </ul>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-6-files","title":"Exercice 6 (files)","text":"<p>Soit une file F initialement vide. Soit les instructions suivantes :</p> \ud83d\udc0d Script Python<pre><code>enfiler(F,6)\nenfiler(F,3)\na = defiler(F)\nenfiler(F,9)\nb = taille_file(F)\nenfiler(F,17)\nc = defiler(F)\nenfiler(F,2)\nd = taille_file(F)\n</code></pre> <p>Donnez le contenu de la file <code>F</code>, la valeur de <code>a</code>, la valeur de <code>b</code>, la valeur de <code>c</code> et la valeur de <code>d</code>.</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercice-7-files","title":"Exercice 7 (files)","text":"<p>Soit le programme Python suivant :</p> \ud83d\udc0d Script Python<pre><code>file = File()\ntab = [2,78,6,89,3,17]\nfile.enfiler(5)\nfile.enfiler(10)\nfile.enfiler(8)\nfile.enfiler(15)\nfor i in tab:\n    if i &gt; 50:\n        file.defiler()\n</code></pre> <p>Donnez l'\u00e9tat de la file file apr\u00e8s l'ex\u00e9cution de ce programme</p>"},{"location":"terminale/02_structures/listes_piles_files/exercices/#exercices-tombes-au-bac","title":"Exercices tomb\u00e9s au bac","text":"<ul> <li>2021 M\u00e9tropole Jour 1 : exo 2.</li> <li>2021 Centres \u00e9trangers Jour 2 : exo 1.</li> <li>2021 Centres \u00e9trangers Jour 1 : exo 5.</li> <li>2021 Am\u00e9rique du Nord Jour1 : exo 5.</li> <li>2021 Sujet z\u00e9ro : exo 1.</li> <li>2022 Centres \u00e9trangers Jour 1 : exo 2.</li> <li>2022 M\u00e9tropole Jour 1 : exo 1.</li> <li>2022 M\u00e9tropole Jour 2 : exo 2.</li> <li>2022 Mayotte Liban Jour 1 : exo 1.</li> <li>2022 Mayotte Liban Jour 2 : exo 1.</li> <li>2022 Am\u00e9rique du Nord Jour 1 : exo 5.</li> </ul>"},{"location":"terminale/02_structures/listes_piles_files/files/","title":"2.3. Files","text":""},{"location":"terminale/02_structures/listes_piles_files/files/#231-du-point-de-vue-utilisateur-interface","title":"2.3.1. Du point de vue utilisateur : interface","text":"<p>D\u00e9finition</p> <p>La file, comme la liste et la pile, permet de stocker des donn\u00e9es et d'y acc\u00e9der. La diff\u00e9rence se situe au niveau de l'ajout et du retrait d'\u00e9l\u00e9ments.</p> <ul> <li>Le prochain \u00e9l\u00e9ment auquel on peut acc\u00e9der est le premier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure ;</li> <li>Les nouveaux \u00e9l\u00e9ments viennent en bout de file : on ne pourra y acc\u00e9der que lorsque tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux seront sortis de la file.</li> </ul> <p>On parle de mode FIFO (First in, First out, en anglais, premier arriv\u00e9, premier sorti), c'est-\u00e0-dire que le premier \u00e9l\u00e9ment ayant \u00e9t\u00e9 ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e9dera. Les derniers \u00e9l\u00e9ments ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux soient sortis de la file. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n'importe quelle valeur de la structure (pas d'index).</p> <p>Pour g\u00e9rer cette contrainte, la pile est caract\u00e9ris\u00e9e par deux \u00ab emplacements \u00bb :</p> <ul> <li>la t\u00eate de file, sortie de la file (d\u00e9but de la structure), o\u00f9 les \u00e9l\u00e9ments sont retir\u00e9s ;</li> <li>le bout de file, entr\u00e9e de la file (fin de la structure), o\u00f9 les \u00e9l\u00e9ments sont ajout\u00e9s.</li> </ul> <p>On peut s'imaginer une file d'attente, dans un cin\u00e9ma par exemple. Les premi\u00e8res personnes \u00e0 pouvoir acheter leur place sont les premi\u00e8res arriv\u00e9es, et les nouveaux arrivants se placent au bout de la file.</p> <p></p> <p>Une file est une collection de donn\u00e9es. On appelle t\u00eate de file le premier \u00e9l\u00e9ment de la structure et bout de file le dernier \u00e9l\u00e9ment. Quand un \u00e9l\u00e9ment est ajout\u00e9 \u00e0 la file, on l'ajoute en bout de file et il devient le nouveau bout de file c'est-\u00e0-dire l'\u00e9l\u00e9ment \u00ab suivant \u00bb l'\u00e9l\u00e9ment situ\u00e9 pr\u00e9c\u00e9demment en bout de file. Quand un \u00e9l\u00e9ment est retir\u00e9 de la file, on le s\u00e9lectionne \u00e0 la t\u00eate de la file et la nouvelle t\u00eate est l'\u00e9l\u00e9ment qui suivait l'ancienne t\u00eate. Lorsqu'on ajoute un \u00e9l\u00e9ment \u00e0 une file vide, celui-ci est donc \u00e0 la fois la t\u00eate et le bout de la file.</p> <p></p> <p>6 primitives constituent l'interface permettant de d\u00e9finir le type abstrait de donn\u00e9es \"file\" :</p> <ul> <li><code>creer()</code>, qui cr\u00e9e une file vide ;</li> <li><code>taille(file)</code>, qui permet de conna\u00eetre le nombre d'\u00e9l\u00e9ments contenus dans la file ;</li> <li><code>est_vide(file)</code>, qui renvoie vrai si la file est vide, faux sinon ;</li> <li><code>enfiler(file, element)</code>, qui ajoute un \u00e9l\u00e9ment au bout de la file (et devient le nouveau bout de file) ;</li> <li><code>defiler(file)</code>, qui retire et renvoie l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la t\u00eate de la file (la nouvelle t\u00eate devient l'\u00e9l\u00e9ment qui suivait l'ancienne t\u00eate) ;</li> <li><code>tete(file)</code>, qui renvoie l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la t\u00eate de la file (sans le retirer).</li> </ul> <p>Enfiler se dit enqueue en anglais et d\u00e9filer se dit dequeue.</p> <p>La file est utile dans diff\u00e9rents types de probl\u00e8mes :</p> <ul> <li>pour une imprimante, gestion de la file d'attente des documents \u00e0 imprimer ;</li> <li>mod\u00e9lisation du jeu de la bataille (on r\u00e9v\u00e8le la carte au-dessus du paquet et on place celles gagn\u00e9es en dessous...) ;</li> <li>gestion de m\u00e9moires tampon, pour g\u00e9rer les flux de lecture et d'\u00e9criture dans un fichier, par exemple ;</li> <li>mat\u00e9rialisation d'une file d'attente, pour un logiciel (visioconf\u00e9rence par exemple) ou un jeu (gestion des connexions des utilisateurs, des tours de jeu...),...</li> <li>algorithme du parcours en largeur pour les arbres et les graphes, par exemple, pour trouver le plus court trajet sur une carte, ou r\u00e9cup\u00e9rer les valeurs d'une structure dans l'ordre croissant.. (voir s\u00e9quence 6).</li> </ul> <p>Exemple</p> <p>Supposons impl\u00e9ment\u00e9 le type abstrait file. Nous disposons d'une interface compos\u00e9e des six primitives d\u00e9crites ci-dessus. On consid\u00e8re une file <code>F</code> compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (la t\u00eate = premier \u00e9l\u00e9ment entr\u00e9 dans la file est 22, le dernier \u00e9l\u00e9ment entr\u00e9 est 12). On ex\u00e9cute le code suivant ligne par ligne :</p> Code<pre><code>    enfiler(F,42)\n    defiler(F)\n    defiler(F)\n    taille(F)\n    estVide(F)\n    tete(F)\n</code></pre> <ul> <li>L'ex\u00e9cution de la ligne 1 ajoute l'\u00e9l\u00e9ment 42 au bout de la file qui contient alors 42, 12, 14, 8, 7, 19, 22 ;</li> <li>L'ex\u00e9cution de la ligne 2 affiche 22 et retire cet \u00e9l\u00e9ment de la file qui contient maintenant 42, 12, 14, 8, 7, 19 ;</li> <li>L'ex\u00e9cution de la ligne 3 affiche 19 et retire cet \u00e9l\u00e9ment de la file qui contient maintenant 42, 12, 14, 8, 7 ;</li> <li>La ligne 4 renvoie la taille de <code>F</code> : 5 ;</li> <li>La file n'est pas vide, on obtient dont <code>False</code>.</li> </ul>"},{"location":"terminale/02_structures/listes_piles_files/files/#232-du-point-de-vue-concepteur-implementations","title":"2.3.2. Du point de vue concepteur : impl\u00e9mentation(s)","text":"<p>L'impl\u00e9mentation utilisant des listes Python est possible, mais l'op\u00e9ration <code>defiler()</code> est inefficace dans ce cas (on a une complexit\u00e9 en \\(\\mathcal{O}(n)\\)).</p> <p>Nous allons tout d'abord \u00e9tudier une impl\u00e9mentation utilisant deux piles.</p>"},{"location":"terminale/02_structures/listes_piles_files/files/#implementation-utilisant-deux-piles","title":"Impl\u00e9mentation utilisant deux piles","text":"<p>Comme le programme le sugg\u00e8re, il est possible d'implanter une file en utilisant deux piles. Le proc\u00e9d\u00e9 est le suivant :</p> <ul> <li>la file est, au d\u00e9part, compos\u00e9e de deux piles vides ;</li> <li>la premi\u00e8re pile est une pile dite \u00ab d'entr\u00e9e \u00bb et la seconde \u00ab de sortie \u00bb ;</li> <li>quand on ajoute un \u00e9l\u00e9ment dans la file, on le place dans la pile \u00ab d'entr\u00e9e \u00bb ;</li> <li> <p>Quand on retire (ou qu'on acc\u00e8de) au premier \u00e9l\u00e9ment de la file, on a deux cas :</p> <ul> <li>soit la pile \u00ab de sortie \u00bb est vide et on d\u00e9pile chaque \u00e9l\u00e9ment de la pile \u00ab d'entr\u00e9e \u00bb pour les empiler imm\u00e9diatement dans la pile \u00ab de sortie \u00bb ;</li> <li>soit il y a au moins un \u00e9l\u00e9ment dans la pile \u00ab de sortie \u00bb, auquel cas on ne fait rien de plus.</li> <li>Enfin, on s\u00e9lectionne le sommet de la pile \u00ab de sortie \u00bb ;</li> </ul> </li> <li> <p>comme il y a deux piles, la taille de la file (et le fait qu'elle soit vide ou non) doit se baser sur les \u00e9l\u00e9ments contenus dans les deux piles.</p> </li> </ul> <p></p> <p>Dans notre impl\u00e9mentation, on propose de mat\u00e9rialiser la file sous la forme d'un tuple contenant deux piles, cr\u00e9es (et manipul\u00e9es) avec les m\u00e9thodes du module mod\u00e9lisant le type abstrait de donn\u00e9es pile en utilisant les listes Python, d\u00e9finit plus t\u00f4t dans la section sur les piles. Ce module, nomm\u00e9 <code>piles.py</code> sera import\u00e9 dans le pr\u00e9sent fichier. On introduit \u00e9galement une nouvelle m\u00e9thode \u00ab transferer \u00bb qui sert \u00e0 effectuer le transfert entre les piles (si n\u00e9cessaire) avant de retirer ou de r\u00e9cup\u00e9rer le premier \u00e9l\u00e9ment de la file.</p> \ud83d\udc0d Script Python<pre><code>import piles\n\n\"\"\"Impl\u00e9mentation du type abstrait \"file\" avec deux piles\"\"\"\n\n\ndef creer_file():\n\"\"\"Retourne une file vide\"\"\"\n    pile_in = piles.creer()\n    pile_out = piles.creer()\n    return (pile_in, pile_out)\n\n\ndef taille_file(file):\n\"\"\"Retourne le nombre d'\u00e9l\u00e9ments dans la file\"\"\"\n    return piles.taille(file[0]) + piles.taille(file[1])\n\n\ndef est_vide_file(file):\n\"\"\"Retourne True si la file est vide, False sinon\"\"\"\n    return piles.est_vide(file[0]) and piles.est_vide(file[1])\n\n\ndef enfiler(file, element):\n\"\"\"Ajoute un nouvel \u00e9l\u00e9ment \u00e0 l'arri\u00e8re de la file\"\"\"\n    piles.empiler(file[0], element)\n\n\ndef transferer(file):\n\"\"\"Transf\u00e8re les \u00e9l\u00e9ments de la pile d'entr\u00e9e vers la pile de sortie\"\"\"\n    while piles.taille(file[0]) != 0:\n        item = piles.depiler(file[0])\n        piles.empiler(file[1], item)\n\n\ndef defiler(file):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate de la file et le supprime de la file\"\"\"\n    if taille_file(file) == 0:\n        return None\n    else:\n        if piles.sommet(file[1]) is None:\n            transferer(file)\n        return file[1].pop()\n\n\ndef tete_file(file):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate de la file\"\"\"\n    if taille_file(file) == 0:\n        return None\n    else:\n        if piles.sommet(file[1]) is None:\n            transferer(file)\n        return piles.sommet(file[1])\n</code></pre> <p>Cette impl\u00e9mentation sera test\u00e9e en exercices.</p>"},{"location":"terminale/02_structures/listes_piles_files/files/#implementation-utilisant-la-poo","title":"Impl\u00e9mentation utilisant la POO","text":"<p>On reprend l'id\u00e9e du cha\u00eenon, mais cette fois-ci, un cha\u00eenon est li\u00e9 \u00e0 son \u00e9l\u00e9ment pr\u00e9c\u00e9dent dans la file, et non \u00e0 son \u00e9l\u00e9ment suivant : en effet, quand un \u00e9l\u00e9ment sort de la file, c'est le pr\u00e9c\u00e9dent qui prend la t\u00eate.</p> \ud83d\udc0d Script Python<pre><code>\"\"\"\"Impl\u00e9mentation du type abstrait file en POO\"\"\"\n\n\nclass Chainon:\n    def __init__(self, element=None, precedent=None):\n\"\"\"element est la valeur du chainon et precedent est le chainon qui suit\"\"\"\n        self.element = element\n        self.precedent = precedent\n\n\nclass File():\n    def __init__(self):\n        self.front = None\n        self.back = None\n\n    def taille(self) -&gt; int:\n\"\"\"Retourne le nombre d'\u00e9l\u00e9ments dans la file\"\"\"\n        long = 0\n        chainon = self.front\n        while chainon is not None:\n            chainon = chainon.precedent\n            long = long + 1\n        return long\n\n    def est_vide(self) -&gt; bool:\n\"\"\"Retourne True si la file est vide et False sinon\"\"\"\n        return self.front is None\n\n    def enfiler(self, element):\n\"\"\"Ajoute un nouvel \u00e9l\u00e9ment \u00e0 l'arri\u00e8re de la file\"\"\"\n        new_back = Chainon(element, None)   # Cr\u00e9ation d'un nouveau cha\u00eenon\n        if self.taille() == 0:\n            # dans ce cas la file est vide et la t\u00eate est la queue\n            self.front = new_back\n        else:\n            self.back.precedent = new_back    # On relie l'ancien dernier \u00e9l\u00e9ment au nouveau\n        self.back = new_back    # On d\u00e9finit le nouveau dernier \u00e9l\u00e9ment\n\n    def defiler(self):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate de la file et le supprime de la file\"\"\"\n        item = self.front.element\n        self.front = self.front.precedent\n        return item\n\n    def tete(self):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate de la file\"\"\"\n        return self.front.element\n\n    def __str__(self):\n        chainon = self.front\n        res = str(chainon.element)\n        while chainon.precedent is not None:\n            res = \" &lt;-- \" + res\n            chainon = chainon.precedent\n            res = str(chainon.element) + res\n        return res\n</code></pre> <p>La m\u00e9thode enfiler demande un peu d'attention et doit \u00eatre bien comprise. </p> <p>Exemple d'utilisation de cette interface en console :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; a = File()\n&gt;&gt;&gt; a.taille()\n0\n&gt;&gt;&gt; a.est_vide()\nTrue\n&gt;&gt;&gt; for k in range(5):\n        a.enfiler(10*k)\n&gt;&gt;&gt; a.est_vide()\nFalse\n&gt;&gt;&gt; a.taille()\n5\n&gt;&gt;&gt; print(a)\n40 &lt;-- 30 &lt;-- 20 &lt;-- 10 &lt;-- 0\n&gt;&gt;&gt; a.tete()\n0\n&gt;&gt;&gt; a.defiler()\n0\n&gt;&gt;&gt; a.defiler()\n10\n&gt;&gt;&gt; a.taille()\n3\n</code></pre> <p>Remarque (extrait de la documentation Python)</p> <p>Il est \u00e9galement possible d'utiliser une liste comme une file, o\u00f9 le premier \u00e9l\u00e9ment ajout\u00e9 est le premier r\u00e9cup\u00e9r\u00e9 (\u00ab premier entr\u00e9, premier sorti \u00bb ou FIFO pour first-in, first-out) ; toutefois, les listes ne sont pas tr\u00e8s efficaces pour r\u00e9aliser ce type de traitement. Alors que les ajouts et suppressions en fin de liste sont rapides, les insertions ou les retraits en d\u00e9but de liste sont lents (car tous les autres \u00e9l\u00e9ments doivent \u00eatre d\u00e9cal\u00e9s d'une position).</p> <p>Pour impl\u00e9menter une file, utilisez plut\u00f4t la classe <code>collections.deque</code> qui a \u00e9t\u00e9 con\u00e7ue sp\u00e9cialement pour r\u00e9aliser rapidement les op\u00e9rations d'ajout et de retrait aux deux extr\u00e9mit\u00e9s. Par exemple :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; queue = deque([\"Eric\", \"John\", \"Michael\"])\n&gt;&gt;&gt; queue.append(\"Terry\")           # Terry arrives\n&gt;&gt;&gt; queue.append(\"Graham\")          # Graham arrives\n&gt;&gt;&gt; queue.popleft()                 # The first to arrive now leaves\n'Eric'\n&gt;&gt;&gt; queue.popleft()                 # The second to arrive now leaves\n'John'\n&gt;&gt;&gt; queue                           # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n</code></pre>"},{"location":"terminale/02_structures/listes_piles_files/listes/","title":"2.1. Listes","text":"<p>Attention !</p> <p>En Premi\u00e8re, nous avons utilis\u00e9 le type de donn\u00e9es <code>list</code> de Python pour repr\u00e9senter des tableaux de d'\u00e9l\u00e9ments de m\u00eame type. Le vocabulaire propre \u00e0 Python peut induire en erreur et amener \u00e0 penser que le type \"liste\" est d\u00e9j\u00e0 connu. La structure <code>list</code> de Python r\u00e9alise en fait l'impl\u00e9mentation du type abstrait de donn\u00e9es \"tableau dynamique\" et doit \u00eatre laiss\u00e9e de c\u00f4t\u00e9, malgr\u00e9 l'utilisation du m\u00eame vocabulaire.</p> <p>Cela ne nous emp\u00eachera pas d'impl\u00e9menter le type abstrait de donn\u00e9es liste en utilisant des structures de type <code>list</code> en Python.</p>"},{"location":"terminale/02_structures/listes_piles_files/listes/#211-du-point-de-vue-utilisateur-interface","title":"2.1.1. Du point de vue utilisateur : interface","text":"<p>D\u00e9finition</p> <p>Une liste est une structure de donn\u00e9es qui permet de stocker des donn\u00e9es et d'y acc\u00e9der directement. </p> <p>C'est un type abstrait de donn\u00e9es :</p> <ul> <li>lin\u00e9aire : les donn\u00e9es sont stock\u00e9es dans une structure unidimensionnelle ;</li> <li>index\u00e9 : chaque donn\u00e9e est associ\u00e9e \u00e0 une valeur ;</li> <li>ordonn\u00e9 : les donn\u00e9es sont pr\u00e9sent\u00e9es les unes apr\u00e8s les autres.</li> </ul> <p>Une liste est une collection finie de donn\u00e9es. On appelle t\u00eate le premier \u00e9l\u00e9ment de la liste et queue la liste priv\u00e9e de son premier \u00e9l\u00e9ment. Il est seulement possible d'ajouter et de lire une donn\u00e9e en t\u00eate de la liste.</p> <p>L'interface minimale  permettant de d\u00e9finir le type abstrait de donn\u00e9es \"liste\" comporte cinq fonctions, qui sont appel\u00e9es primitives :</p> <ul> <li><code>creer()</code>, qui cr\u00e9e une liste vide ;</li> <li><code>ajouter(element, liste)</code>, qui ajoute un \u00e9l\u00e9ment en t\u00eate de liste ; ces deux premi\u00e8re primitives peuvent parfois se regrouper en une seule ;</li> <li><code>tete(liste)</code>, qui renvoie la valeur de l'\u00e9l\u00e9ment en t\u00eate de liste ;</li> <li><code>queue(liste)</code>, qui renvoie la liste priv\u00e9e de son premier \u00e9l\u00e9ment ;</li> <li><code>est_vide(liste)</code>, qui renvoie vrai si la liste est vide, faux sinon.</li> </ul> <p>Ce type abstrait de donn\u00e9es est non mutable (il n'y a pas de primitive permettant de modifier la valeur d'un \u00e9l\u00e9ment de la liste).</p> <p>Remarque : on peut selon les besoins ajouter d'autres fonctions permettant par exemple de renvoyer la longueur d'une liste, de rechercher un \u00e9l\u00e9ment ou d'acc\u00e9der au i\u00e8me \u00e9l\u00e9ment ...</p> <p>Exemple</p> <p>Supposons impl\u00e9ment\u00e9 le type abstrait liste. Nous disposons d'une interface compos\u00e9e des cinq primitives d\u00e9crites ci-dessus. On ex\u00e9cute le code suivant ligne par ligne :</p> Code<pre><code>L = creer()\nest_vide(L)\nL1 = ajouter(12, L)\nest_vide(L1)\nL1 = ajouter(15, L1)\nL1 = ajouter(1, ajouter(11,L1))\ntete(L1)\nL2 = queue(L1)\n</code></pre> <ul> <li>La ligne 1 cr\u00e9\u00e9e une liste vide <code>L</code> ;</li> <li>La ligne 2 affiche <code>True</code> car la liste <code>L</code> est vide ;</li> <li>Apr\u00e8s ex\u00e9cution de la ligne 3, la liste <code>L1</code> contient l'\u00e9l\u00e9ment unique 12 ;</li> <li>La ligne 4 affiche <code>False</code> car la liste <code>L1</code> n'est pas vide ;</li> <li>Apr\u00e8s ex\u00e9cution de la ligne 5, la liste <code>L1</code> contient les \u00e9l\u00e9ments 12 et 15 ;</li> <li>La ligne 6 montre que l'on peut composer les ajouts pour ajouter en une seule fois plusieurs \u00e9l\u00e9ments. Apr\u00e8s ex\u00e9cution de la ligne 6, la liste <code>L1</code> contient les \u00e9l\u00e9ments 12, 15, 11 et 1 ;</li> <li>La ligne 7 affiche 1 : c'est la t\u00eate de la liste (il s'agit du dernier \u00e9l\u00e9ment ajout\u00e9) ;</li> <li>La ligne 8 d\u00e9finit une liste <code>L2</code> \u00e9gale \u00e0 la queue de la liste <code>L1</code>. <code>L2</code> contient donc les \u00e9l\u00e9ments 12, 15 et 11.</li> </ul>"},{"location":"terminale/02_structures/listes_piles_files/listes/#212-du-point-de-vue-concepteur-implementations","title":"2.1.2. Du point de vue concepteur : impl\u00e9mentation(s)","text":"<p>Nous allons impl\u00e9menter le type abstrait \"liste\" en Python de deux fa\u00e7ons diff\u00e9rentes.</p>"},{"location":"terminale/02_structures/listes_piles_files/listes/#implementation-avec-des-tuples","title":"Impl\u00e9mentation avec des tuples","text":"<p>Nous allons ici utiliser des tuples et la programmation fonctionnelle (rappel : fonctions pures, pas d'affectations, pas de boucles).</p> \ud83d\udc0d Script Python<pre><code>\"\"\" Impl\u00e9mentation du type abstrait \"liste\" avec des tuples\"\"\"\n\n\ndef creer() -&gt; tuple:\n\"\"\"Retourne une liste vide\"\"\"\n    return ()\n\n\ndef ajouter(element: all, liste: tuple) -&gt; tuple:\n\"\"\"Retourne la liste avec l'\u00e9l\u00e9ment ajout\u00e9 en t\u00eate de liste\"\"\"\n    return (element, liste)\n\n\ndef est_vide(liste: tuple) -&gt; bool:\n\"\"\"Retourne True si la liste est vide et False sinon\"\"\"\n    return liste == ()\n\n\ndef tete(liste: tuple) -&gt; all:\n\"\"\"Retourne la t\u00eate de la liste\"\"\"\n    assert not est_vide(liste), \"Erreur : liste vide\"\n    return liste[0]\n\n\ndef queue(liste: tuple) -&gt; tuple:\n\"\"\"Retourne la queue de la liste\"\"\"\n    assert not est_vide(liste), \"Erreur : liste vide\"\n    return liste[1]\n\n\ndef longueur(liste: tuple) -&gt; int:\n\"\"\"Retourne le nombre d'\u00e9l\u00e9ments de la liste\"\"\"\n    if est_vide(liste):\n        return 0\n    else:\n        return 1 + longueur(liste[1])\n</code></pre> <p>Avec cette repr\u00e9sentation une liste est toujours un tuple \u00e0 deux \u00e9l\u00e9ments dont le premier est la t\u00eate de la liste (le dernier \u00e9l\u00e9ment ajout\u00e9) et le deuxi\u00e8me est la queue (c'est donc une liste).</p> \\[L=(1, (11, (15, (12, ()))))\\] <p>On remarquera que la fonction <code>longueur</code> est cod\u00e9e sans boucle, mais de fa\u00e7on r\u00e9cursive, afin de correspondre au paradigme fonctionnel.</p>"},{"location":"terminale/02_structures/listes_piles_files/listes/#implementation-en-poo","title":"Impl\u00e9mentation en POO","text":"<p>Conform\u00e9ment au programme, on se limite \u00e0 une version na\u00efve de la POO. On pourra \u00e0 titre d'exercice reprendre cette impl\u00e9mentation en respectant les r\u00e8gles plus strictes \u00e9dict\u00e9es dans les compl\u00e9ments de cours sur la POO.</p> <p>On d\u00e9finit ci-dessous une liste cha\u00een\u00e9e : chaque cha\u00eenon est constitu\u00e9 de l'\u00e9l\u00e9ment qui fait partie de la liste et de la r\u00e9f\u00e9rence \u00e0 l'\u00e9l\u00e9ment suivant. C'est la classe <code>Chainon</code> qui impl\u00e9mente cette structure. L'objet <code>Liste</code> est d\u00e9fini \u00e0 partir de son premier \u00e9l\u00e9ment (t\u00eate) et ses primitives sont d\u00e9finies sous forme de m\u00e9thodes.</p> \ud83d\udc0d Script Python<pre><code>\"\"\"Impl\u00e9mentation du type abstrait liste en POO\"\"\"\n\n\nclass Chainon:\n    def __init__(self, element=None, suivant=None):\n\"\"\"element est la valeur du chainon et suivant est le chainon qui suit\"\"\"\n        self.element = element\n        self.suivant = suivant\n\n\nclass Liste:\n    def __init__(self):\n\"\"\"Cr\u00e9e une liste vide\"\"\"\n        self.head = Chainon()\n\n    def est_vide(self) -&gt; bool:\n\"\"\"Retourne True si la liste est vide et False sinon\"\"\"\n        return self.head.element is None\n\n    def ajouter(self, element):\n\"\"\"Ajoute element en t\u00eate de la liste\"\"\"\n        self.head = Chainon(element, self.head)\n\n    def tete(self):\n\"\"\"Retourne la valeur de la t\u00eate de la liste\"\"\"\n        return self.head.element\n\n    def queue(self):\n\"\"\"Retourne la queue de la liste, c.-\u00e0-d. la liste priv\u00e9e de sa t\u00eate\"\"\"\n        new_liste = Liste()\n        new_liste.head = self.head.suivant\n        return new_liste\n\n    def longueur(self):\n\"\"\"Retourne la longueur de la liste\"\"\"\n        long = 0\n        chainon = self.head\n        while chainon.element is not None:\n            chainon = chainon.suivant\n            long = long + 1\n        return long\n</code></pre> <p>On peut am\u00e9liorer l'impl\u00e9mentation en red\u00e9finissant les m\u00e9thodes sp\u00e9ciales <code>__len__</code> (qui permettra de taper <code>len(L)</code> au lieu de <code>L.longueur()</code>) et <code>__str__</code> (qui permettra d'utiliser l'instruction <code>print(L)</code>).</p> \ud83d\udc0d Script Python<pre><code>    def __len__(self):\n        return self.longueur()\n\n    def __str__(self):\n        rep = \"\"\n        chainon = self.head\n        while chainon.element is not None:\n            rep = rep + str(chainon.element) + \" --&gt; \"\n            chainon = chainon.suivant\n        return rep[:-4]\n</code></pre> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; L=Liste()\n&gt;&gt;&gt; L.ajouter(11)\n&gt;&gt;&gt; L.ajouter(12)\n&gt;&gt;&gt; L.ajouter(13)\n&gt;&gt;&gt; print(L)\n13 --&gt; 12 --&gt; 11 \n</code></pre>"},{"location":"terminale/02_structures/listes_piles_files/piles/","title":"2.2. Piles","text":""},{"location":"terminale/02_structures/listes_piles_files/piles/#221-du-point-de-vue-utilisateur-interface","title":"2.2.1. Du point de vue utilisateur : interface","text":"<p>D\u00e9finition</p> <p>La pile est une structure de donn\u00e9es qui permet de stocker des donn\u00e9es et d'y acc\u00e9der. Une pile se comporte comme une pile d'assiettes :</p> <ul> <li>on ajoute des nouvelles assiettes au sommet de la pile ;</li> <li>quand on veut en retirer une, on est oblig\u00e9 de prendre celle situ\u00e9e au sommet.</li> </ul> <p>On parle de mode LIFO (Last In, First Out, en anglais, dernier arriv\u00e9, premier sorti), c'est-\u00e0-dire que le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e9dera. Les premiers \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments qui ont \u00e9t\u00e9 ajout\u00e9s apr\u00e8s eux soient sortis de la pile. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n'importe quelle valeur de la structure (pas d'index). Pour g\u00e9rer cette contrainte, on d\u00e9finit le sommet de la pile qui caract\u00e9rise l'emplacement pour ajouter ou retirer des \u00e9l\u00e9ments.</p> <p></p> <p></p> <p>L'interface suivante permet de d\u00e9finir le type abstrait de donn\u00e9es pile : </p> <ul> <li><code>creer()</code>, qui cr\u00e9e une pile vide ;</li> <li><code>taille(pile)</code>, qui permet de conna\u00eetre le nombre d'\u00e9l\u00e9ments contenus dans la pile ;</li> <li><code>est_vide(pile)</code>, qui renvoie vrai si la pile est vide, faux sinon ;</li> <li><code>empiler(pile, element)</code>, qui ajoute un \u00e9l\u00e9ment au sommet de la pile (qui devient le nouveau sommet) ;</li> <li><code>depiler(pile)</code>, qui retire et renvoie l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile (le nouveau sommet devient l'\u00e9l\u00e9ment qui suivait l'ancien sommet) ;</li> <li><code>sommet(pile)</code>, qui renvoie l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile (sans le retirer).</li> </ul> <p>L'op\u00e9ration d'empilement se dit \"push\" en anglais, l'op\u00e9ration de d\u00e9pilement se dit \"pop\".</p> <p>La pile est utile dans diff\u00e9rents types de probl\u00e8mes :</p> <ul> <li>algorithme d'un navigateur pour pouvoir m\u00e9moriser les pages web et revenir en arri\u00e8re (ou r\u00e9-avancer) sur certaines pages ;</li> <li>stocker des actions et les annuler (ou les r\u00e9appliquer), sur l'ordinateur (fonction CTRL+Z, et CTRL+Y) ;</li> <li>coder une calculatrice en notation polonaise invers\u00e9e (voir exercices) ;</li> <li>algorithme du parcours en profondeur pour les arbres et les graphes, par exemple, pour r\u00e9soudre un labyrinthe, trouver un trajet sur une carte... (voir s\u00e9quence 6) ;</li> <li>\u00e9crire des versions it\u00e9ratives de certains algorithmes r\u00e9cursifs (voir s\u00e9quence 1) ;</li> <li>illustration du fonctionnement de la pile d'appels des fonctions lors de l'ex\u00e9cution d'un programme.</li> </ul> <p>Exemple</p> <p>Supposons impl\u00e9ment\u00e9 le type abstrait pile. Nous disposons d'une interface compos\u00e9e des six primitives d\u00e9crites ci-dessus. On consid\u00e8re une pile <code>P</code> compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (le sommet de la pile est 22). On ex\u00e9cute le code suivant ligne par ligne :</p> Code<pre><code>    depiler(P)\n    empiler(P,42)\n    depiler(P)\n    taille(P)\n    estVide(P)\n</code></pre> <ul> <li>L'ex\u00e9cution de la ligne 1 renvoie la valeur 22 et la pile est maintenant compos\u00e9e des \u00e9l\u00e9ments 12, 14, 8, 7 et 19 ;</li> <li>L'ex\u00e9cution de la ligne 2 place l'\u00e9l\u00e9ment 42 au sommet de la pile ;</li> <li>L'ex\u00e9cution de la ligne 3 renvoie la valeur 42 et la pile est maintenant \u00e0 nouveau compos\u00e9e des \u00e9l\u00e9ments 12, 14, 8, 7 et 19 ;</li> <li>La ligne 4 renvoie la taille de <code>P</code> : 5 ;</li> <li>La pile n'est pas vide, on obtient dont <code>False</code>.</li> </ul>"},{"location":"terminale/02_structures/listes_piles_files/piles/#222-du-point-de-vue-concepteur-implementations","title":"2.2.2. Du point de vue concepteur : impl\u00e9mentation(s)","text":""},{"location":"terminale/02_structures/listes_piles_files/piles/#implementation-avec-listes-python","title":"Impl\u00e9mentation avec listes Python","text":"<p>Premi\u00e8re solution, on peut impl\u00e9menter une pile en utilisant des listes Python. Cette solution est tr\u00e8s facile car les m\u00e9thodes <code>append</code> et <code>pop</code> des objets de type <code>list</code> correspondent exactement aux primitives empiler et d\u00e9piler de la structure pile.</p> \ud83d\udc0d Script Python<pre><code>\"\"\"Impl\u00e9mentation des piles avec des listes Python\"\"\"\n\n\ndef creer():\n\"\"\"Retourne une pile vide\"\"\"\n    return []\n\n\ndef taille(pile):\n\"\"\"Retourne le nombre d'\u00e9l\u00e9ments de la pile\"\"\"\n    return len(pile)\n\n\ndef est_vide(pile):\n\"\"\"Retourne True si la pile est vide, False sinon\"\"\"\n    return pile == []\n\n\ndef empiler(pile, element):\n\"\"\"Empile un nouvel \u00e9l\u00e9ment au sommet de la pile\"\"\"\n    pile.append(element)\n\n\ndef depiler(pile):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile\n    et le supprime de celle-ci\"\"\"\n    if not est_vide(pile):\n        return pile.pop()\n    else:\n        return None\n\n\ndef sommet(pile):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile\"\"\"\n    if not est_vide(pile):\n        return pile[-1]\n    else:\n        return None\n</code></pre> <p>Cette impl\u00e9mentation sera test\u00e9e en exercices.</p>"},{"location":"terminale/02_structures/listes_piles_files/piles/#implementation-en-poo","title":"Impl\u00e9mentation en POO","text":"<p>Conform\u00e9ment au programme, on se limite \u00e0 une version na\u00efve de la POO. On pourra \u00e0 titre d'exercice reprendre cette impl\u00e9mentation en respectant les r\u00e8gles plus strictes \u00e9dict\u00e9es dans les compl\u00e9ments de cours sur la POO.</p> <p>On reprend l'id\u00e9e de cha\u00eenon utilis\u00e9e pour les listes.</p> \ud83d\udc0d Script Python<pre><code>\"\"\"Impl\u00e9mentation du type abstrait pile en POO\"\"\"\n\n\nclass Chainon:\n    def __init__(self, element=None, suivant=None):\n\"\"\"element est la valeur du chainon et suivant est le chainon qui suit\"\"\"\n        self.element = element\n        self.suivant = suivant\n\n\nclass Pile:\n    def __init__(self):\n\"\"\"Cr\u00e9e une pile vide\"\"\"\n        self.summit = Chainon()\n\n    def taille(self):\n\"\"\"Retourne le nombre d'\u00e9l\u00e9ments dans la pile\"\"\"\n        long = 0\n        chainon = self.summit\n        while chainon.element is not None:\n            chainon = chainon.suivant\n            long = long + 1\n        return long\n\n    def est_vide(self) -&gt; bool:\n\"\"\"Retourne True si la pile est vide et False sinon\"\"\"\n        return self.summit.element is None\n\n    def empiler(self, element):\n\"\"\"Empile element qu sommet de la pile\"\"\"\n        self.summit = Chainon(element, self.summit)\n\n    def depiler(self):\n\"\"\"Retourne l'\u00e9l\u00e9ment situ\u00e9 au sommet de la pile\n        et le supprime de celle-ci\"\"\"\n        item = self.summit.element\n        self.summit = self.summit.suivant\n        return item\n\n    def sommet(self):\n\"\"\"Retourne la valeur du sommet de la pile\"\"\"\n        return self.summit.element\n</code></pre> <p>Cette impl\u00e9mentation sera test\u00e9e en exercices.</p> <p>Comparaison des deux impl\u00e9mentations</p> <p>On peut comparer en termes de temps d'ex\u00e9cution l'efficacit\u00e9 de ces deux impl\u00e9mentations.</p> <p>On utilise pour cela la biblioth\u00e8que <code>timeit</code> pr\u00e9sent\u00e9e dans cet article.</p> <p>Pour cela, on ajoute les lignes suivantes au code de la version \"listes Python\" :</p> \ud83d\udc0d Script Python<pre><code>import timeit\n\nma_pile = creer()\nprint(timeit.timeit('empiler(ma_pile,1)', number=10000000, globals=globals()))\n</code></pre> <p>on obtient : </p> \ud83d\udc0d Console Python<pre><code>2.2605971000011778\n</code></pre> <p>et les lignes suivantes au code de la version \"POO\" :</p> \ud83d\udc0d Script Python<pre><code>import timeit\n\nma_pile = Pile()\nprint(timeit.timeit('ma_pile.empiler(1)', number=10000000, globals=globals()))\n</code></pre> <p>on obtient : </p> \ud83d\udc0d Console Python<pre><code>7.292327400005888\n</code></pre> <p>On constate donc que la version utilisant les listes Python est beaucoup plus efficace. Cela s'explique notamment car l'implantation avec les listes Python repose sur une programmation avanc\u00e9e et optimis\u00e9e, contrairement \u00e0 l'implantation objet qui a \u00e9t\u00e9 construite sans utiliser de structure externe.</p> <p>N\u00e9anmoins, on peut montrer que, dans les deux impl\u00e9mentations, les op\u00e9rations d'empilement et de d\u00e9pilement sont en \\(\\mathcal{O}(1)\\), ce qui signifie que le temps d'ex\u00e9cution ne d\u00e9pend pas du nombre de donn\u00e9es.</p> <p>L'utilisation des listes est la plus efficace. N\u00e9anmoins, l'implantation objet a pour avantage de montrer et d'assimiler le fonctionnement interne de cette structure. C'est donc un meilleur outil d'apprentissage des concepts.</p>"},{"location":"terminale/03_BDD/","title":"S3-Bases de donn\u00e9es","text":""},{"location":"terminale/03_BDD/#programme","title":"Programme","text":"<p>Le d\u00e9veloppement des traitements informatiques n\u00e9cessite la manipulation de donn\u00e9es de plus en plus nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance.</p> <p>Le recours aux bases de donn\u00e9es relationnelles est aujourd\u2019hui une solution tr\u00e8s r\u00e9pandue. Ces bases de donn\u00e9es permettent d'organiser, de stocker, de mettre \u00e0 jour et d'interroger des donn\u00e9es structur\u00e9es volumineuses utilis\u00e9es simultan\u00e9ment par diff\u00e9rents programmes ou diff\u00e9rents utilisateurs. Cela est impossible avec les repr\u00e9sentations tabulaires \u00e9tudi\u00e9es en classe de premi\u00e8re.</p> <p>Des syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) de tr\u00e8s grande taille (de l'ordre du p\u00e9taoctet) sont au centre de nombreux dispositifs de collecte, de stockage et de production d'informations.</p> <p>L'acc\u00e8s aux donn\u00e9es d'une base de donn\u00e9es relationnelle s'effectue gr\u00e2ce \u00e0 des requ\u00eates d'interrogation et de mise \u00e0 jour qui peuvent par exemple \u00eatre r\u00e9dig\u00e9es dans le langage SQL (Structured Query Language). Les traitements peuvent conjuguer le recours au langage SQL et \u00e0 un langage de programmation.</p> <p>Il convient de sensibiliser les \u00e9l\u00e8ves \u00e0 un usage critique et responsable des donn\u00e9es.</p> Contenus Capacit\u00e9s attendues Commentaires Mod\u00e8le relationnel : relation, attribut, domaine, clef primaire, clef \u00e9trang\u00e8re, sch\u00e9ma relationnel. Identifier les concepts d\u00e9finissant le mod\u00e8le relationnel. Ces concepts permettent d'exprimer les contraintes d'int\u00e9grit\u00e9 (domaine, relation et r\u00e9f\u00e9rence). Base de donn\u00e9es relationnelle. Savoir distinguer la structure d'une base de donn\u00e9es de son contenu. Rep\u00e9rer des anomalies dans le sch\u00e9ma d'une base de donn\u00e9es. La structure est un ensemble de sch\u00e9mas relationnels qui respecte les contraintes du mod\u00e8le relationnel. Les anomalies peuvent \u00eatre des redondances de donn\u00e9es ou des anomalies d'insertion, de suppression, de mise \u00e0 jour. On privil\u00e9gie la manipulation de donn\u00e9es nombreuses et r\u00e9alistes. Syst\u00e8me de gestion de bases de donn\u00e9es relationnelles. Identifier les services rendus par un syst\u00e8me de gestion de bases de donn\u00e9es relationnelles : persistance des donn\u00e9es, gestion des acc\u00e8s concurrents, efficacit\u00e9 de traitement des requ\u00eates, s\u00e9curisation des acc\u00e8s. Il s'agit de comprendre le r\u00f4le et les enjeux des diff\u00e9rents services sans en d\u00e9tailler le fonctionnement.\\ Langage SQL : requ\u00eates d'interrogation et de mise \u00e0 jour d'une base de donn\u00e9es. Identifier les composants d'une requ\u00eate. Construire des requ\u00eates d'interrogation \u00e0 l'aide des clauses du langage SQL : SELECT, FROM, WHERE, JOIN. Construire des requ\u00eates d'insertion et de mise \u00e0 jour \u00e0 l'aide de : UPDATE, INSERT, DELETE. On peut utiliser DISTINCT, ORDER BY ou les fonctions d'agr\u00e9gation sans utiliser les clauses GROUP BY et HAVING."},{"location":"terminale/03_BDD/TP1/","title":"T.P.1 - Cr\u00e9er une base de donn\u00e9es","text":"<p>Objectifs</p> <p>Utiliser le logiciel \"DB Browser for SqLite\" et le langage SQL pour :</p> <ul> <li> cr\u00e9er une base de donn\u00e9es ;</li> <li> ajouter des donn\u00e9es dans une table ;</li> <li> \u00e9crire et tester diff\u00e9rentes requ\u00eates.</li> </ul>"},{"location":"terminale/03_BDD/TP1/#1-creation-dune-bdd-et-insertion-de-valeurs","title":"1. Cr\u00e9ation d'une BDD et insertion de valeurs","text":"<p>Pour cr\u00e9er une base de donn\u00e9es et effectuer des requ\u00eates sur cette derni\u00e8re, nous allons utiliser le logiciel \"DB Browser for SQLite\" : https://sqlitebrowser.org/. Ce logiciel est int\u00e9gr\u00e9 dans EduPython.</p> <ol> <li> <p>Ouvrez le logiciel, puis cliquez sur \"Nouvelle base de donn\u00e9es\". Apr\u00e8s avoir choisi un nom pour votre base de donn\u00e9es (par exemple \"db_livres.db\"), vous devriez avoir la fen\u00eatre suivante :</p> <p></p> <p>Cliquez alors sur \"Annuler\".</p> <p>Une nouvelle base de donn\u00e9e a bien \u00e9t\u00e9 cr\u00e9\u00e9e, mais elle ne contient encore aucune table.</p> <p></p> </li> <li> <p>Pour cr\u00e9er une table, cliquez sur l'onglet \"Ex\u00e9cuter le SQL\". On obtient alors :</p> <p></p> <p>Copiez-collez le texte ci-dessous dans la fen\u00eatre \"SQL 1\" :</p> SQL<pre><code>CREATE TABLE LIVRES\n(id INT, titre TEXT, auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (id));\n</code></pre> <p>Cliquez ensuite sur le petit triangle situ\u00e9 au-dessus de la fen\u00eatre SQL 1 (ou appuyez sur F5), vous devriez avoir ceci :</p> <p></p> <p>Comme indiqu\u00e9 dans la fen\u00eatre, \"Requ\u00eate ex\u00e9cut\u00e9e avec succ\u00e8s\" !</p> <p>Quelques explications : la commande  CREATE TABLE LIVRES permet de cr\u00e9er une nouvelle table nomm\u00e9e \"LIVRES\". Elle est suivie d'un p-uplet d\u00e9finissant les noms et les domaines des attributs de la nouvelle table :</p> <ul> <li>id est un entier ;</li> <li>titre est une cha\u00eene de caract\u00e8res ;</li> <li>auteur est une cha\u00eene de caract\u00e8res ;</li> <li>ann_pulbi est un entier ;</li> <li>note est un entier ;</li> </ul> <p>L'attribut \"id\" va jouer le r\u00f4le de cl\u00e9 primaire, nous avons donc ajout\u00e9 dans la requ\u00eate la mention (PRIMARY KEY (id)). Le syst\u00e8me de gestion de base de donn\u00e9es nous avertira si l'on tente d'attribuer 2 fois la m\u00eame valeur \u00e0 l'attribut \"id\".</p> </li> <li> <p>Nous allons maintenant ajouter des donn\u00e9es \u00e0 la table LIVRES.</p> <p>Toujours dans l'onglet \"Ex\u00e9cuter le SQL\", apr\u00e8s avoir effac\u00e9 la fen\u00eatre SQL 1, copiez-collez dans cette m\u00eame fen\u00eatre la requ\u00eate ci-dessous :</p> SQL<pre><code>INSERT INTO LIVRES\n(id,titre,auteur,ann_publi,note)\nVALUES\n(1,\"1984\",\"Orwell\",1949,10),\n(2,\"Dune\",\"Herbert\",1965,8),\n(3,\"Fondation\",\"Asimov\",1951,9),\n(4,\"Le meilleur des mondes\",\"Huxley\",1931,7),\n(5,\"Fahrenheit 451\",\"Bradbury\",1953,7),\n(6,\"Ubik\",\"K.Dick\",1969,9),\n(7,\"Chroniques martiennes\",\"Bradbury\",1950,8),\n(8,\"La nuit des temps\",\"Barjavel\",1968,7),\n(9,\"Blade Runner\",\"K.Dick\",1968,8),\n(10,\"Les Robots\",\"Asimov\",1950,9),\n(11,\"La Plan\u00e8te des singes\",\"Boulle\",1963,8),\n(12,\"Ravage\",\"Barjavel\",1943,8),\n(13,\"Le Ma\u00eetre du Haut Ch\u00e2teau\",\"K.Dick\",1962,8),\n(14,\"Le monde des \u0100\",\"Van Vogt\",1945,7),\n(15,\"La Fin de l'\u00e9ternit\u00e9\",\"Asimov\",1955,8),\n(16,\"De la Terre \u00e0 la Lune\",\"Verne\",1865,10);\n</code></pre> <p>Un message devrait vous pr\u00e9ciser que votre requ\u00eate a \u00e9t\u00e9 ex\u00e9cut\u00e9e avec succ\u00e8s :</p> <p></p> <p>La table LIVRES contient maintenant les donn\u00e9es souhait\u00e9es (onglet \"Parcourir les donn\u00e9es\") :</p> <p></p> </li> <li> <p>Saisissez et ex\u00e9cutez la requ\u00eate SQL suivante :</p> SQL<pre><code>SELECT id, titre, auteur, ann_publi, note\nFROM LIVRES\n</code></pre> <p>Apr\u00e8s un temps plus ou moins long, vous devriez voir s'afficher ceci :</p> <p></p> </li> <li> <p>Effectuez une requ\u00eate qui permettra d'obtenir le titre et l'auteur de tous les livres pr\u00e9sents dans la table LIVRES.</p> </li> <li> <p>Saisissez et testez la requ\u00eate SQL suivante :</p> SQL<pre><code>SELECT titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov'\n</code></pre> <p>\u00c0 quelle question r\u00e9pond-elle ?</p> </li> <li> <p>\u00c9crivez et testez une requ\u00eate permettant d'obtenir uniquement les titres des livres \u00e9crits par Philip K.Dick.</p> </li> <li> <p>Saisissez et testez la requ\u00eate SQL suivante :</p> SQL<pre><code>SELECT titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov' AND ann_publi&gt;1953\n</code></pre> <p>\u00c0 quelle question r\u00e9pond-elle ?</p> </li> <li> <p>\u00c9crivez une requ\u00eate permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 qui ont une note sup\u00e9rieure ou \u00e9gale \u00e0 9.</p> </li> <li> <p>\u00c9crivez une requ\u00eate SQL permettant d'obtenir les titres et les ann\u00e9es de publication des livres de K.Dick class\u00e9s du plus ancien ou plus r\u00e9cent.</p> </li> </ol>"},{"location":"terminale/03_BDD/TP1/#2-avec-deux-tables","title":"2. Avec deux tables","text":"<p>Dans la premi\u00e8re partie, nous avons une redondance d'information dans l'attribut auteur, un m\u00eame auteur \u00e9tant r\u00e9p\u00e9t\u00e9 plusieurs fois. Pour rem\u00e9dier \u00e0 cela, nous allons maintenant cr\u00e9er une nouvelle base avec deux tables AUTEURS et LIVRES reli\u00e9es par une clef \u00e9trang\u00e8re.</p> <p></p> <ol> <li> <p>Cr\u00e9ez une nouvelle base de donn\u00e9es que vous nommerez par exemple db_livres_auteurs.db, puis cr\u00e9ez une table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante :</p> SQL<pre><code>CREATE TABLE AUTEURS\n(id INT, nom TEXT, prenom TEXT, ann_naissance INT, langue_ecriture TEXT, PRIMARY KEY (id));\n</code></pre> <p>Cr\u00e9ez ensuite une deuxi\u00e8me table (LIVRES) :</p> SQL<pre><code>CREATE TABLE LIVRES\n(id INT, titre TEXT, id_auteur INT, ann_publi INT, note INT, PRIMARY KEY (id), FOREIGN KEY (id_auteur) REFERENCES AUTEURS(id));\n</code></pre> <p>Dans la cr\u00e9ation de la table LIVRES, nous avons pr\u00e9cis\u00e9 que l'attribut \"id_auteur\" jouera le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re : liaison entre \"id_auteur\" de la table  LIVRES et \"id\" de la table AUTEURS (FOREIGN KEY (id_auteur) REFERENCES AUTEURS(id)).</p> </li> <li> <p>Ajoutez des donn\u00e9es \u00e0 la table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante :</p> SQL<pre><code>INSERT INTO AUTEURS\n(id,nom,prenom,ann_naissance,langue_ecriture)\nVALUES\n(1,\"Orwell\",\"George\",1903,\"anglais\"),\n(2,\"Herbert\",\"Frank\",1920,\"anglais\"),\n(3,\"Asimov\",\"Isaac\",1920,\"anglais\"),\n(4,\"Huxley\",\"Aldous\",1894,\"anglais\"),\n(5,\"Bradbury\",\"Ray\",1920,\"anglais\"),\n(6,\"K.Dick\",\"Philip\",1928,\"anglais\"),\n(7,\"Barjavel\",\"Ren\u00e9\",1911,\"fran\u00e7ais\"),\n(8,\"Boulle\",\"Pierre\",1912,\"fran\u00e7ais\"),\n(9,\"Van Vogt\",\"Alfred Elton\",1912,\"anglais\"),\n(10,\"Verne\",\"Jules\",1828,\"fran\u00e7ais\");\n</code></pre> <p>Ajoutez des donn\u00e9es \u00e0 la table LIVRES \u00e0 l\"aide de la requ\u00eate SQL suivante :</p> SQL<pre><code>INSERT INTO LIVRES\n(id,titre,id_auteur,ann_publi,note)\nVALUES\n(1,\"1984\",1,1949,10),\n(2,\"Dune\",2,1965,8),\n(3,\"Fondation\",3,1951,9),\n(4,\"Le meilleur des mondes\",4,1931,7),\n(5,\"Fahrenheit 451\",5,1953,7),\n(6,\"Ubik\",6,1969,9),\n(7,\"Chroniques martiennes\",5,1950,8),\n(8,\"La nuit des temps\",7,1968,7),\n(9,\"Blade Runner\",6,1968,8),\n(10,\"Les Robots\",3,1950,9),\n(11,\"La Plan\u00e8te des singes\",8,1963,8),\n(12,\"Ravage\",7,1943,8),\n(13,\"Le Ma\u00eetre du Haut Ch\u00e2teau\",6,1962,8),\n(14,\"Le monde des \u0100\",9,1945,7),\n(15,\"La Fin de l'\u00e9ternit\u00e9\",3,1955,8),\n(16,\"De la Terre \u00e0 la Lune\",10,1865,10);\n</code></pre> </li> <li> <p>Saisissez et testez la requ\u00eate SQL suivante :</p> SQL<pre><code>SELECT titre,nom, prenom\nFROM LIVRES JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\n</code></pre> <p>Remarque : attention, si un m\u00eame nom d'attribut est pr\u00e9sent dans les 2 tables (par exemple ici l'attribut id), il est n\u00e9cessaire d'ajouter le nom de la table devant afin de pouvoir les distinguer (AUTEURS.id et LIVRES.id).</p> </li> <li> <p>\u00c9crivez une requ\u00eate SQL permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 ainsi que le nom de leurs auteurs.</p> </li> <li> <p>On souhaite ajouter \u00e0 la base le livre de Arthur C.Clarke intitul\u00e9 2001 : L'Odyss\u00e9e de l'espace publi\u00e9 en 1968 et not\u00e9 7. Arthur C.Clarke est un \u00e9crivain britannique n\u00e9 en 1917 et mort en 2008.</p> <p>\u00c9crivez les requ\u00eates n\u00e9cessaires \u00e0 cet ajout. Vous n'oublierez pas de d\u00e9finir les clefs primaires pour chacune des nouvelles entr\u00e9es.</p> </li> <li> <p>\u00c9crivez et testez une requ\u00eate permettant d'attribuer la note de 10 \u00e0 tous les livres \u00e9crits par Asimov publi\u00e9s apr\u00e8s 1950.</p> </li> <li> <p>\u00c9crivez une requ\u00eate permettant de supprimer les livres publi\u00e9s avant 1945. Testez cette requ\u00eate.</p> </li> </ol>"},{"location":"terminale/03_BDD/TP2/","title":"T.P.2 - Le supermarch\u00e9","text":"<p>Objectifs</p> <ul> <li> \u00e9crire un sch\u00e9ma relationnel ;</li> <li> manipuler des requ\u00eates SQL ;</li> <li> utiliser un SGBD.</li> </ul>"},{"location":"terminale/03_BDD/TP2/#premiere-partie-travail-debranche","title":"Premi\u00e8re partie : travail d\u00e9branch\u00e9","text":"<p>Sans utiliser l'ordinateur, r\u00e9pondre aux questions de la fiche ci-dessous.</p>"},{"location":"terminale/03_BDD/TP2/#verifications-avec-db-browser-sqlite-et-complements","title":"V\u00e9rifications avec DB Browser SqLite et compl\u00e9ments","text":"<ol> <li>Ouvrir dans le logiciel la table ExerciceSupermarche.db.</li> <li>V\u00e9rifier les requ\u00eates \u00e9crites dans la premi\u00e8re partie.</li> <li>Ins\u00e9rer dans la base de donn\u00e9es un nouveau client en utilisant vos propres informations personnelles.</li> <li>Modifier vos donn\u00e9es en vous donnant le pr\u00e9nom \"Toto\".</li> <li>Supprimer votre enregistrement de la table \"Clients\".</li> </ol>"},{"location":"terminale/03_BDD/TP3/","title":"T.P.3 - BDD et Python","text":"<p>Dans ce TP, Nous allons cr\u00e9er et interroger une base de donn\u00e9es <code>sqlite</code> avec le module <code>sqlite3</code>  de Python.</p>"},{"location":"terminale/03_BDD/TP3/#creation-dune-table","title":"Cr\u00e9ation d'une table","text":"\ud83d\udc0d Script Python<pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mynewbase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n\n#Cr\u00e9ation de la table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS bulletin(\n    Nom TEXT,\n    Pr\u00e9nom TEXT,\n    Note INT);\n    \"\"\")\n\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <ul> <li>Le fichier <code>mynewbase.db</code> sera cr\u00e9\u00e9 dans le m\u00eame r\u00e9pertoire que le fichier source Python. Si le fichier existe d\u00e9j\u00e0, il est ouvert et peut \u00eatre modifi\u00e9.</li> <li><code>IF NOT EXISTS</code> assure de ne pas \u00e9craser une table existante qui porterait le m\u00eame nom. Si une telle table existe, elle n'est alors pas modifi\u00e9e.</li> <li>La nouvelle table peut \u00eatre ouverte avec <code>DB Browser</code> pour v\u00e9rifier sa structure et ses donn\u00e9es.</li> </ul>"},{"location":"terminale/03_BDD/TP3/#insertion-denregistrements-dans-la-table","title":"Insertion d'enregistrements dans la table","text":"<p>Les morceaux de code ci-dessous sont \u00e0 positionner entre les balises <code># ---- d\u00e9but des instructions SQL</code>  et <code># ---- fin des instructions SQL</code>.</p>"},{"location":"terminale/03_BDD/TP3/#insertion-dun-enregistrement-unique","title":"Insertion d'un enregistrement unique","text":"\ud83d\udc0d Script Python<pre><code>c.execute('''INSERT INTO bulletin VALUES ('Simpson', 'Bart', 17)''')\n</code></pre> <p>Pensez \u00e0 v\u00e9rifier avec  <code>DB Browser</code> si les modifications sont effectives.</p>"},{"location":"terminale/03_BDD/TP3/#insertion-dun-enregistrement-unique-avec-variable","title":"Insertion d'un enregistrement unique avec variable","text":"\ud83d\udc0d Script Python<pre><code>data = ('Simpson', 'Maggie', 2)\nc.execute('''INSERT INTO bulletin VALUES (?,?,?)''', data)\n</code></pre>"},{"location":"terminale/03_BDD/TP3/#insertion-de-multiples-enregistrements","title":"Insertion de multiples enregistrements","text":"<p>\ud83d\udc0d Script Python<pre><code>lst_notes = [ ('Simpson', 'Lisa', 19), ('Muntz', 'Nelson', 4), ('Van Houten', 'Milhouse', 12) ]\n\nc.executemany('''INSERT INTO bulletin VALUES (?, ?, ?)''', lst_notes)\n</code></pre> Les diff\u00e9rentes valeurs sont stock\u00e9es au pr\u00e9alable dans une liste de tuples.</p>"},{"location":"terminale/03_BDD/TP3/#mini-projet-1","title":"Mini-projet 1","text":"<p>Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nom et une note, en boucle. Les r\u00e9sultats sont stock\u00e9s au fur et \u00e0 mesure dans une base de donn\u00e9es. Si le nom est \u00e9gal \u00e0 \u00abQ\u00bb ou \u00abq\u00bb, le programme s'arr\u00eate.</p>"},{"location":"terminale/03_BDD/TP3/#exemple-dinjection-sql","title":"Exemple d'injection SQL","text":"<p>L'injection SQL est une technique consistant \u00e0 \u00e9crire du code SQL \u00e0 un endroit qui n'est pas cens\u00e9 en recevoir.</p> <ul> <li> <p>Cr\u00e9ez un fichier contenant le code suivant : \ud83d\udc0d Script Python<pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabasecobaye.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS notes(\n    Nom TEXT,\n    Note INT);\n    \"\"\")\n\nwhile True :\n    nom = input('Nom ? ')\n    if nom in ['Q','q'] :\n        break\n    note = input('Note ? ')\n    data = (nom, note)\n    p = \"INSERT INTO notes VALUES ('\" + nom + \"','\" + note + \"')\"\n\n    c.executescript(p)\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre></p> </li> <li> <p>Ex\u00e9cutez ce fichier, rentrez quelques valeurs, quittez, et ouvrez dans <code>DB Browser</code> la table <code>notes</code> pour bien v\u00e9rifier que vos valeurs ont bien \u00e9t\u00e9 stock\u00e9es.</p> </li> <li>Lancez \u00e0 nouveau le fichier, en donnant ensuite comme nom la cha\u00eene de caract\u00e8res suivante :  <code>g','3'); DROP TABLE notes;--</code> </li> <li>Donnez une note quelconque (par exemple 12), quittez le programme... et allez observer l'\u00e9tat de la base de donn\u00e9es. La table  <code>notes</code> n'existe plus !</li> </ul> <p>Explication : La requ\u00eate qui a \u00e9t\u00e9 formul\u00e9e est <code>INSERT INTO notes VALUES ('g','3'); DROP TABLE notes;--','12')</code> </p> <p>Dans un premier temps, le couple <code>('g','3')</code> a \u00e9t\u00e9 ins\u00e9r\u00e9. Puis l'ordre a \u00e9t\u00e9 donn\u00e9 de d\u00e9truire la table <code>notes</code>. Le reste du code (qui n'est pas correct) est ignor\u00e9 car <code>--</code> est le symbole du commentaire en SQL (l'\u00e9quivalent du # de Python).  </p> <p>Remarques : \u00c9videmment, ce code a \u00e9t\u00e9 fait sp\u00e9cifiquement pour \u00eatre vuln\u00e9rable \u00e0 l'injection SQL. Il suffit d'ailleurs de remplacer le <code>c.executescript(p)</code> par <code>c.execute(p)</code> pour que le code reste fonctionnel mais refuse l'injection SQL.  Ceci dit, de nombreux serveurs sont encore attaqu\u00e9s par cette technique, au prix de manipulations bien s\u00fbr plus complexes que celles que nous venons de voir.</p> <p>Rappelons enfin que ce genre de pratiques est interdit sur un serveur qui ne vous appartient pas.</p>"},{"location":"terminale/03_BDD/TP3/#lecture-des-enregistrements","title":"Lecture des enregistrements","text":"\ud83d\udc0d Script Python<pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mynewbase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\ndata = ('Simpson', )\n\nc.execute(\"SELECT Pr\u00e9nom FROM Bulletin WHERE Nom = ?\", data)\nprint(c.fetchall())  \n\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <p>Ce code renvoie <code>[('Homer',), ('Lisa',), ('Maggie',)]</code>, ou une liste vide s'il n'y a pas de r\u00e9sultat \u00e0 la requ\u00eate.</p>"},{"location":"terminale/03_BDD/TP3/#mini-projet-2","title":"Mini-projet 2","text":"<p>Reprendre le mini-projet pr\u00e9c\u00e9dent, en rendant possible \u00e0 l'utilisateur de rentrer des notes ou bien de les consulter.</p> <p>Exemple :</p> <p></p>"},{"location":"terminale/03_BDD/TP3/#references","title":"R\u00e9f\u00e9rences","text":"<ol> <li> <p>Cette page est directement issue de cette page du site de Gilles Lassus.\u00a0\u21a9</p> </li> </ol>"},{"location":"terminale/03_BDD/exos/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/03_BDD/exos/#exercice-1","title":"Exercice 1","text":"<p>Voici un extrait d'une relation r\u00e9f\u00e9ren\u00e7ant des films :</p> id titre realisateur ann_sortie note_sur_10 1 Alien, le huiti\u00e8me passager Scott 1979 10 2 Dune Lynch 1985 5 3 2001 : l'odyss\u00e9e de l'espace Kubrick 1968 9 4 Blade Runner Scott 1982 10 <p>Listez les diff\u00e9rents attributs de cette relation. Donnez le domaine de chaque attribut.</p> <p>Pour chaque attribut dire si cet attribut peut jouer le r\u00f4le de cl\u00e9 primaire, vous n'oublierez pas de justifier vos r\u00e9ponses.</p>"},{"location":"terminale/03_BDD/exos/#exercice-2","title":"Exercice 2","text":"<p>Un ski-club utilise une base de donn\u00e9es constitu\u00e9e de 2 tables :</p> <ul> <li>une table ADHERENTS</li> <li>une table STATIONS </li> </ul> <p>Dans la table ADHERENTS  on trouve un attribut \"ref_station\" qui permet de conna\u00eetre les stations de ski pr\u00e9f\u00e9r\u00e9es des adh\u00e9rents.</p> <p>Table ADHERENTS</p> num_licence nom prenom annee_naissance ref_station 12558 Doe John 1988 5 13668 Vect Alice 1974 6 1777 Dect Bob 1967 3 13447 Beau Tristan 1999 4 1141 Pabeau John 1975 3 <p>table STATIONS</p> ref nom altitude_max 3 Le grand Bornand 2050 4 La clusaz 2616 5 Flaine 2510 6 Avoriaz 2466 <ol> <li>Comment appelle-t-on l'attribut ref_station de la table ADHERENTS ?</li> <li>\u00c9crire la requ\u00eate SQL permettant d'obtenir le nom des stations ayant une altitude maxi strictement sup\u00e9rieure \u00e0 2500 m.</li> <li>\u00c9crire une requ\u00eate SQL permettant d'obtenir le num\u00e9ro de licence des adh\u00e9rents n\u00e9s apr\u00e8s 1980 et ayant pour pr\u00e9nom John.</li> <li>Donnez le r\u00e9sultat de la requ\u00eate SQL suivante :</li> </ol> <p>SQL<pre><code>SELECT nom FROM ADHERENTS WHERE num_licence &gt; 2000 OR  ref_station = 3\n</code></pre> 5. Donnez le r\u00e9sultat de la requ\u00eate SQL suivante :</p> SQL<pre><code>SELECT STATIONS.nom\nFROM STATIONS\nINNER JOIN ADHERENTS ON ADHERENTS.ref_station = STATIONS.ref\nWHERE annee_naissance &gt; 1975\n</code></pre>"},{"location":"terminale/03_BDD/exos/#exercice-3-exercices-tires-des-annales","title":"Exercice 3 : Exercices tir\u00e9s des annales","text":"<ol> <li>M\u00e9tropole 2022 Jour 1 : Exercice 2.</li> <li>M\u00e9tropole 2022 Jour 2 : Exercice 4.</li> <li>Am\u00e9rique du Nord 2022 Jour 1 : Exercice 1.</li> <li>Am\u00e9rique du Nord 2022 Jour 2 : Exercice 3.</li> <li>Centres \u00e9trangers 2022 Jour 1 : Exercice 4.</li> <li>Centres \u00e9trangers 2022 Jour 2 : Exercice 3.</li> </ol> <p>Et pour s'entra\u00eener, beaucoup d'autres exercices dans les annales.</p>"},{"location":"terminale/03_BDD/exos/#exercice-4","title":"Exercice 4","text":"<p>Le CNAM (Conservatoire National des Arts et M\u00e9tiers) propose en ligne des travaux pratiques sur une base de donn\u00e9es concernant les films de cin\u00e9ma. \u00c0 titre d'entra\u00eenement, ouvrir cet exerciseur (cliquer sur l'image ci-dessous) et essayer de formuler les requ\u00eates correspondant aux suggestions de la colonne de droite. Les r\u00e9ponses sont disponibles sur le site, mais prenez le temps de chercher, d'essayer, et de vous corriger.</p> <p></p>"},{"location":"terminale/03_BDD/exos/#probleme","title":"Probl\u00e8me","text":"<p>Serious game : meurtre \u00e0 SQL City ...</p> <p></p>"},{"location":"terminale/03_BDD/exos/#pour-les-plus-rapides","title":"Pour les plus rapides","text":"<p>Serious game : SQL Island ...</p> <p></p>"},{"location":"terminale/03_BDD/SQL/essentiel/","title":"S3 - Bases de donn\u00e9es - SQL - L'essentiel","text":"<p>Base de donn\u00e9e utilis\u00e9e dans les exemples : Cantal.db contenant les deux tables \"etablissements\" et \"communes\".</p> <p></p>"},{"location":"terminale/03_BDD/SQL/essentiel/#21-requetes-dinterrogation","title":"2.1. Requ\u00eates d'interrogation","text":""},{"location":"terminale/03_BDD/SQL/essentiel/#requetes-simples","title":"Requ\u00eates simples","text":"SQL<pre><code>SELECT *\nFROM communes\n</code></pre> SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#requetes-conditionnelles","title":"Requ\u00eates conditionnelles","text":"SQL<pre><code>SELECT Nomdelacommune\nFROM communes\nWHERE Populationtotale &gt; 2500\n</code></pre> SQL<pre><code>SELECT Nomdelacommune\nFROM communes\nWHERE Populationtotale &gt; 5000 OR Nomdelacommune LIKE \"%Z%\"\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#ordonner-les-resultats","title":"Ordonner les r\u00e9sultats","text":"SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\nWHERE Populationtotale &gt; 5000 ORDER BY Populationtotale\n</code></pre> <p>Pour ordonner les r\u00e9sultats dans l'ordre d\u00e9croissant, on ajoute DESC.</p>"},{"location":"terminale/03_BDD/SQL/essentiel/#eviter-les-doublons","title":"\u00c9viter les doublons","text":"SQL<pre><code>SELECT DISTINCT codepostal\nFROM communes\nORDER BY codepostal\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#les-jointures","title":"Les jointures","text":"<p>Une requ\u00eate dans une base de donn\u00e9e peut n\u00e9cessiter de regrouper des donn\u00e9es provenant de diff\u00e9rentes tables.</p> <p>D\u00e9finition</p> <p>Une requ\u00eate combinant les donn\u00e9es de plusieurs relations (tables) est appel\u00e9e une jointure.</p> SQL<pre><code>SELECT etablissements.nom, communes.Nomdelacommune FROM etablissements JOIN communes ON etablissements.id_commune = communes.Codecommune\n</code></pre> SQL<pre><code>SELECT etablissements.nom, communes.Nomdelacommune FROM etablissements JOIN communes ON etablissements.id_commune = communes.Codecommune\nWHERE etablissements.nom LIKE \"Coll\u00e8ge%\"\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#22-requetes-de-mise-a-jour","title":"2.2. Requ\u00eates de mise \u00e0 jour","text":""},{"location":"terminale/03_BDD/SQL/essentiel/#ajouter-une-entree","title":"Ajouter une entr\u00e9e","text":"SQL<pre><code>INSERT INTO etablissements\n(code, nom, statut, id_commune, latitude, longitude)\nVALUES\n(\"0159999Z\", \"Lyc\u00e9e h\u00f4telier du Cantal\", \"Public\", 85, 44.8572222, 2.5427778)\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#modifier-une-entree-existante","title":"Modifier une entr\u00e9e existante","text":"SQL<pre><code>UPDATE etablissements\nSET code=\"0158888Z\", statut=\"Priv\u00e9\"\nWHERE code=\"0159999Z\"\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#supprimer-une-entree","title":"Supprimer une entr\u00e9e","text":"SQL<pre><code>DELETE FROM etablissements\nWHERE code=\"0158888Z\"\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#23-quelques-complements","title":"2.3. Quelques compl\u00e9ments","text":""},{"location":"terminale/03_BDD/SQL/essentiel/#calculer-une-somme","title":"Calculer une somme","text":"SQL<pre><code>SELECT SUM(Populationtotale)\nFROM communes\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#calculer-une-moyenne","title":"Calculer une moyenne","text":"SQL<pre><code>SELECT AVG(Populationtotale)\nFROM communes\nwhere Codepostal=15250\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#calculer-un-minimum-ou-un-maximum","title":"Calculer un minimum ou un maximum","text":"SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\nWHERE Populationtotale = (SELECT MIN(Populationtotale) FROM communes)\n</code></pre>"},{"location":"terminale/03_BDD/SQL/essentiel/#compter-des-donnees","title":"Compter des donn\u00e9es","text":"SQL<pre><code>SELECT COUNT(*)\nFROM etablissements\n</code></pre> SQL<pre><code>SELECT COUNT(*)\nFROM communes\nWHERE Codepostal=15250\n</code></pre> SQL<pre><code>SELECT COUNT(DISTINCT nom)\nFROM etablissements\n</code></pre> SQL<pre><code>SELECT COUNT(*)\nFROM etablissements JOIN communes ON etablissements.id_commune=communes.Codecommune\nWHERE (etablissements.nom LIKE \"Coll\u00e8ge%\") AND communes.Nomdelacommune=\"AURILLAC\"\n</code></pre>"},{"location":"terminale/03_BDD/SQL/sql/","title":"2. Le langage SQL","text":"<p>Version Notebook de ce cours</p> <p>Nous avons \u00e9tudi\u00e9 la structure d'une base de donn\u00e9es relationnelle, nous allons maintenant apprendre \u00e0 r\u00e9aliser des requ\u00eates, c'est-\u00e0-dire que nous allons apprendre \u00e0 cr\u00e9er une base des donn\u00e9es, cr\u00e9er des attributs, ajouter des donn\u00e9es, modifier des donn\u00e9es et enfin, nous allons surtout apprendre \u00e0 interroger une base de donn\u00e9es afin d'obtenir des informations.</p> <p>Pour r\u00e9aliser toutes ces requ\u00eates, nous allons devoir apprendre un langage de requ\u00eates : SQL (Structured Query Language). SQL est propre aux bases de donn\u00e9es relationnelles.</p> <p>Dans ce cours nous allons travailler avec SQLite. SQLite est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle tr\u00e8s r\u00e9pandu. Noter qu'il existe d'autres syst\u00e8mes de gestion de base de donn\u00e9es relationnelle comme MySQL ou PostgreSQL. Dans tous les cas, le langage de requ\u00eate utilis\u00e9 est le SQL (m\u00eame si parfois on peut noter quelques petites diff\u00e9rences). Ce qui sera vu ici avec SQLite pourra, \u00e0 quelques petites modifications pr\u00e8s, \u00eatre utilis\u00e9 avec, par exemple, MySQL.</p> <p>Nous allons illustrer chacune des instructions SQL du programme avec la base de donn\u00e9e Cantal.db contenant les deux tables \"etablissements\" et \"communes\" d\u00e9j\u00e0 rencontr\u00e9es dans la partie pr\u00e9c\u00e9dente, dont voici un extrait (les noms des attributs ont \u00e9t\u00e9 un peu modifi\u00e9s (pas d'espaces) ; la copie d'\u00e9cran est faite \u00e0 partir de DB Browser for SqLite). De plus, nous avons d\u00e9plac\u00e9 l'attribut \"Codepostal\" de la table \"etablissement\" vers la table \"communes\", ce qui est plus coh\u00e9rent.</p> <p></p> <p></p> <p>Sch\u00e9ma relationnel : </p> <ul> <li>communes(Codecommune: INT, Nomdelacommune: TEXT, Populationtotale: INT, Codepostal: INT)</li> <li>etablissements(code: TEXT, nom: TEXT, statut: TEXT, #id_commune: INT, latitude: FLOAT, longitude: FLOAT)</li> </ul> <p></p> <p>Pour se connecter \u00e0 cette base de donn\u00e9e, vous pouvez utiliser le logiciel DB Browser (SqLite) ou bien Edupython (qui propose une version portable du m\u00eame logiciel)</p>"},{"location":"terminale/03_BDD/SQL/sql/#21-requetes-dinterrogation","title":"2.1. Requ\u00eates d'interrogation","text":""},{"location":"terminale/03_BDD/SQL/sql/#requetes-simples","title":"Requ\u00eates simples","text":"<p>Quand on d\u00e9sire extraire des informations d'une table, on effectue une requ\u00eate d'interrogation \u00e0 l'aide du mot cl\u00e9 SELECT. Voici un exemple de requ\u00eate d'interrogation :</p> SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\n</code></pre> <p>Cette requ\u00eate va nous permettre d'obtenir le nom de la commune et sa population pour toutes les communes pr\u00e9sentes dans la table \"communes\".</p> <p>Voici le r\u00e9sultat de cette requ\u00eate dans le logiciel DB Browser for SqLite :</p> <p></p> <p>D'une fa\u00e7on g\u00e9n\u00e9rale, le mot cl\u00e9 SELECT est suivi par les attributs que l'on d\u00e9sire obtenir. Le mot cl\u00e9 FROM est suivi par la table concern\u00e9e.</p> <p>Noter qu'il est possible d'obtenir tous les attributs sans \u00eatre oblig\u00e9 de tous les noter gr\u00e2ce au caract\u00e8re \u00e9toile * :</p> SQL<pre><code>SELECT *\nFROM communes\n</code></pre> <p>est \u00e9quivalent \u00e0 :</p> SQL<pre><code>SELECT  Codecommune, Nomdelacommune, Populationtotale, Codepostal\nFROM communes\n</code></pre>"},{"location":"terminale/03_BDD/SQL/sql/#requetes-conditionnelles","title":"Requ\u00eates conditionnelles","text":"<p>La clause WHERE permet d'imposer une (ou des) condition(s) permettant de s\u00e9lectionner uniquement certaines lignes.</p> <p>La condition doit suivre le mot-cl\u00e9 WHERE.</p> SQL<pre><code>SELECT Nomdelacommune\nFROM communes\nWHERE Populationtotale &gt; 2500\n</code></pre> <p>La requ\u00eate ci-dessus permettra d'afficher le nom des communes dont la population est strictement sup\u00e9rieure \u00e0 2500 habitants.</p> <p></p> <p>Il est possible de combiner les conditions \u00e0 l'aide d'un OR ou d'un AND :</p> SQL<pre><code>SELECT Nomdelacommune\nFROM communes\nWHERE Populationtotale &gt; 2500 AND Populationtotale &lt; 10000\n</code></pre> <p>Cette requ\u00eate permet d'obtenir le nom des communes dont la population est comprise entre 2500 et 10000 habitants.</p> <p></p> <p>La requ\u00eate ci-dessous permet d'afficher le nom des communes dont la population est sup\u00e9rieure \u00e0 5000 habitants OU dont le nom contient la lettre \"Z\" (noter le symbole \"%\" qui remplace n'importe quelle s\u00e9quence de carcat\u00e8res en SQL).</p> SQL<pre><code>SELECT Nomdelacommune\nFROM communes\nWHERE Populationtotale &gt; 5000 OR Nomdelacommune LIKE \"%Z%\"\n</code></pre> <p></p>"},{"location":"terminale/03_BDD/SQL/sql/#ordonner-les-resultats","title":"Ordonner les r\u00e9sultats","text":"<p>La clause ORDER BY permet d'ordonner les r\u00e9sultats dans l'ordre croissant.</p> SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\nWHERE Populationtotale &gt; 5000 ORDER BY Populationtotale\n</code></pre> <p>Cette requ\u00eate affiche le nom et la population des communes de plus de 5000 habitants dans l'ordre croissant de leur population.</p> <p></p> <p>Pour ordonner les r\u00e9sultats dans l'ordre d\u00e9croissant, on ajoute DESC.</p> <p>Si la clause ORDER BY porte sur un attribut de type TEXT, on aura un rangement dans l'ordre alphab\u00e9tique.</p> SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\nWHERE Populationtotale &gt; 5000 ORDER BY Nomdelacommune DESC\n</code></pre> <p>Cette requ\u00eate affiche le nom et la population des communes de plus de 5000 habitants dans l'ordre inverse de l'ordre alphab\u00e9tique de leur nom.</p> <p></p>"},{"location":"terminale/03_BDD/SQL/sql/#eviter-les-doublons","title":"\u00c9viter les doublons","text":"<p>Pour \u00e9viter les doublons dans les r\u00e9sultats d'une requ\u00eate, on peut ajouter la clause DISTINCT juste apr\u00e8s SELECT.</p> <p>Consid\u00e9rons par exemple la relation \"communes\", la requ\u00eate suivante a pour objectif d'afficher, dans l'ordre croissant, la liste des codes postaux des communes du Cantal :</p> SQL<pre><code>SELECT codepostal\nFROM communes\nORDER BY codepostal\n</code></pre> <p></p> <p>Nous voyons que les codes postaux sont r\u00e9p\u00e9t\u00e9s autant de fois qu'il y a de communes desservies par ce code postal.</p> <p>La requ\u00eate suivante, avec la clause DISTINCT, permet de n'afficher qu'une fois chacun des codes postaux consid\u00e9r\u00e9s :</p> SQL<pre><code>SELECT DISTINCT codepostal\nFROM communes\nORDER BY codepostal\n</code></pre> <p></p>"},{"location":"terminale/03_BDD/SQL/sql/#les-jointures","title":"Les jointures","text":"<p>Une requ\u00eate dans une base de donn\u00e9e peut n\u00e9cessiter de regrouper des donn\u00e9es provenant de diff\u00e9rentes tables.</p> <p>D\u00e9finition</p> <p>Une requ\u00eate combinant les donn\u00e9es de plusieurs relations (tables) est appel\u00e9e une jointure.</p> <p>Poursuivons avec l'exemple de la base de donn\u00e9es des \u00e9tablissements scolaires du Cantal qui comporte deux tables, dont on rappelle ci-dessous le sch\u00e9ma relationnel :</p> <ul> <li>communes(Codecommune: INT, Nomdelacommune: TEXT, Populationtotale: INT, Codepostal: INT)</li> <li>etablissements(code: TEXT, nom: TEXT, statut: TEXT, #id_commune: INT, latitude: FLOAT, longitude: FLOAT)</li> </ul> <p></p> <p>La requ\u00eate suivante permet d'obtenir la table des noms d'\u00e9tablissements suivis du nom de leur commune. Il faut pour cela joindre les informations de la table \"etablissements\" (pour le nom de l'\u00e9tablissement) avec celles de la table \"communes\" (pour le nom de la commune). L'\u00e9l\u00e9ment qui permet cette jointure est la clef \u00e9trang\u00e8re \"id_commune\" de la table \"etablissements\" qui fait r\u00e9f\u00e9rence \u00e0 la clef primaire \"Codecommune\" de la table \"communes\".</p> SQL<pre><code>SELECT etablissements.nom, communes.Nomdelacommune FROM etablissements JOIN communes ON etablissements.id_commune = communes.Codecommune\n</code></pre> <p>R\u00e9sultat : </p> <p></p> <p>Remarque</p> <p>Lorsqu'on effectue une jointure, plusieurs tables sont en jeu. Pour davantage de clart\u00e9, il est recommand\u00e9 de pr\u00e9fixer chaque attribut par le nom de la table dont il provient. On utilise pour cela un point : \"etablissements.nom\" est l'attribut nomm\u00e9 \"nom\" de la relation \"etablissements\".</p> <p>Il est possible d'ajouter \u00e0 la suite de la jointure une clause WHERE afin de ne s\u00e9lectionner que quelques lignes de la table obtenue :</p> SQL<pre><code>SELECT etablissements.nom, communes.Nomdelacommune FROM etablissements JOIN communes ON etablissements.id_commune = communes.Codecommune\nWHERE etablissements.nom LIKE \"Coll\u00e8ge%\"\n</code></pre> <p>R\u00e9sultat la table de tous les coll\u00e8ges avec leur commune :</p> <p></p>"},{"location":"terminale/03_BDD/SQL/sql/#22-requetes-de-mise-a-jour","title":"2.2. Requ\u00eates de mise \u00e0 jour","text":""},{"location":"terminale/03_BDD/SQL/sql/#ajouter-une-entree","title":"Ajouter une entr\u00e9e","text":"<p>Pour ajouter une entr\u00e9e, nous utilisons la clause INSERT.</p> <p>Supposons par exemple qu'un nouvel \u00e9tablissement soit ouvert \u00e0 Labrousse (code 85): il s'agit d'un lyc\u00e9e h\u00f4telier public. La requ\u00eate suivante permet de cr\u00e9er cette nouvelle entr\u00e9e. Attention, l'ordre des valeurs donn\u00e9es doit \u00eatre strictement le m\u00eame que l'ordre des attributs cit\u00e9s.</p> SQL<pre><code>INSERT INTO etablissements\n(code, nom, statut, id_commune, latitude, longitude)\nVALUES\n(\"0159999Z\", \"Lyc\u00e9e h\u00f4telier du Cantal\", \"Public\", 85, 44.8572222, 2.5427778)\n</code></pre>"},{"location":"terminale/03_BDD/SQL/sql/#modifier-une-entree-existante","title":"Modifier une entr\u00e9e existante","text":"<p>Pour modifier un ou plusieurs attributs d'un p-uplet existant, on utilise la clause UPDATE.</p> <p>Supposons par exemple que le nouveau lyc\u00e9e soit en fait un lyc\u00e9e Priv\u00e9 et que son code soit \"0158888Z\" :</p> SQL<pre><code>UPDATE etablissements\nSET code=\"0158888Z\", statut=\"Priv\u00e9\"\nWHERE code=\"0159999Z\"\n</code></pre> <p>La clause WHERE permet de sp\u00e9cifier le ou les p-uplets \u00e0 modifier.</p>"},{"location":"terminale/03_BDD/SQL/sql/#supprimer-une-entree","title":"Supprimer une entr\u00e9e","text":"<p>Pour supprimer un p-uplet, on utilise la clause DELETE.</p> <p>Finalement, le projet de lyc\u00e9e h\u00f4telier est abandonn\u00e9 : </p> SQL<pre><code>DELETE FROM etablissements\nWHERE code=\"0158888Z\"\n</code></pre> <p>Attention !</p> <p>La requ\u00eate DELETE, sans clause WHERE, supprimera tous les p-uplets de la relation !</p>"},{"location":"terminale/03_BDD/SQL/sql/#23-quelques-complements","title":"2.3. Quelques compl\u00e9ments","text":"<p>Le langage SQL propose aussi des fonctions d'agr\u00e9gation permettant de faire quelques calculs \u00e0 partir des donn\u00e9es d'une table. En voici quelques exemples.</p>"},{"location":"terminale/03_BDD/SQL/sql/#calculer-une-somme","title":"Calculer une somme","text":"<p>Par exemple, la somme des populations de toutes les communes du Cantal :</p> SQL<pre><code>SELECT SUM(Populationtotale)\nFROM communes\n</code></pre> <p>R\u00e9sultat : 149 664.</p>"},{"location":"terminale/03_BDD/SQL/sql/#calculer-une-moyenne","title":"Calculer une moyenne","text":"<p>Par exemple, la population moyenne des communes du Cantal dont le code postal est 15250 (AVG = average):</p> SQL<pre><code>SELECT AVG(Populationtotale)\nFROM communes\nwhere Codepostal=15250\n</code></pre> <p>R\u00e9sultat : 1 099, 67</p>"},{"location":"terminale/03_BDD/SQL/sql/#calculer-un-minimum-ou-un-maximum","title":"Calculer un minimum ou un maximum","text":"<p>Les fonctions MIN et MAX fonctionnent de la m\u00eame fa\u00e7on.</p> <p>Quel est le nom et la population de la commune du Cantal la moins peupl\u00e9e ?</p> SQL<pre><code>SELECT Nomdelacommune, Populationtotale\nFROM communes\nWHERE Populationtotale = (SELECT MIN(Populationtotale) FROM communes)\n</code></pre> <p>R\u00e9sultat : VALJOUZE, 23 habitants.</p> <p>Remarque</p> <p>Ce dernier exemple est un peu plus compliqu\u00e9 que les pr\u00e9c\u00e9dents : on a en effet imbriqu\u00e9 deux requ\u00eates l'une dans l'autre : on parle de requ\u00eats compos\u00e9es. La requ\u00eate \"SELECT MIN(Populationtotale) FROM communes\" situ\u00e9e entre parenth\u00e8ses retourne la valeur minimale des populations de toutes les communes. On demande ensuite le nom de la ou des communes dont la population est cette valeur minimale. Prenez le temps de bien comprendre cet exemple.</p>"},{"location":"terminale/03_BDD/SQL/sql/#compter-des-donnees","title":"Compter des donn\u00e9es","text":"<p>La fonction COUNT permet de compter des donn\u00e9es.</p> <p>Combien y a-t-il d'\u00e9tablissements scolaires dans le Cantal ?</p> SQL<pre><code>SELECT COUNT(*)\nFROM etablissements\n</code></pre> <p>R\u00e9sultat : 203</p> <p>Combien de communes poss\u00e8dent le code postal 15250 ?</p> SQL<pre><code>SELECT COUNT(*)\nFROM communes\nWHERE Codepostal=15250\n</code></pre> <p>R\u00e9sultat : 9</p> <p>Combien de noms d'\u00e9tablissements diff\u00e9rents parmi les \u00e9tablissements scolaires ?</p> SQL<pre><code>SELECT COUNT(DISTINCT nom)\nFROM etablissements\n</code></pre> <p>R\u00e9sultat : 88</p> <p>\u00c0 quelle question r\u00e9pond la requ\u00eate suivante ?</p> SQL<pre><code>SELECT COUNT(*)\nFROM etablissements JOIN communes ON etablissements.id_commune=communes.Codecommune\nWHERE (etablissements.nom LIKE \"Coll\u00e8ge%\") AND communes.Nomdelacommune=\"AURILLAC\"\n</code></pre> R\u00e9ponse <p>Combien y a-t-il de coll\u00e8ges \u00e0 Aurillac ? R\u00e9ponse : 5.</p> <p>Pour compl\u00e9ter ...</p> <ul> <li> <p>Excellentes vid\u00e9os sur Lumni :</p> <ul> <li>Qu'est-ce qu'une base de donn\u00e9es relationnelle ?</li> <li>Interrogation d'une base de donn\u00e9es relationnelle</li> </ul> </li> </ul>"},{"location":"terminale/03_BDD/modele_relationnel/essentiel/","title":"S3 - Bases de donn\u00e9es - L'essentiel","text":""},{"location":"terminale/03_BDD/modele_relationnel/essentiel/#1-modele-relationnel","title":"1. Mod\u00e8le relationnel","text":""},{"location":"terminale/03_BDD/modele_relationnel/essentiel/#11-introduction","title":"1.1. Introduction","text":"<p>D\u00e9finition</p> <p>Une base de donn\u00e9es est ensemble d'informations structur\u00e9es m\u00e9moris\u00e9es sur un support persistant.</p> <p>Pour organiser et structurer ces donn\u00e9es, un syst\u00e8me de fichiers CSV est insuffisant. On utilise plut\u00f4t un Syst\u00e8me de Gestion de Bases de Donn\u00e9es (SGBD) qui assure les fonctionnalit\u00e9s suivantes : </p> <p>D\u00e9finition</p> <p>Un Syst\u00e8me de Gestion de Bases de Donn\u00e9es (SGBD) est un syst\u00e8me informatique qui assure la gestion de l'ensemble des informations stock\u00e9es dans une base de donn\u00e9es. Il prend en charge, notamment, les deux grandes fonctionnalit\u00e9s suivantes:</p> <ul> <li>Acc\u00e8s aux fichiers de la base, garantissant leur int\u00e9grit\u00e9, contr\u00f4lant les op\u00e9rations concurrentes, optimisant les recherches et mises \u00e0 jour.</li> <li>Interactions avec les applications et utilisateurs, gr\u00e2ce \u00e0 des langages d'interrogation et de manipulation \u00e0 haut niveau d'abstraction.</li> </ul> <p>Un SGBD est bas\u00e9 sur une architecture client/serveur.</p> <p>D\u00e9finitions</p> <p>Programme serveur. Un SGBD est instanci\u00e9 sur une machine sous la forme d'un programme serveur qui g\u00e8re une ou plusieurs bases de donn\u00e9es, chacune constitu\u00e9e de fichiers stock\u00e9s sur disque. Le programme serveur est seul responsable de tous les acc\u00e8s \u00e0 une base, et de l'utilisation des ressources (m\u00e9moire, disques) qui servent de support \u00e0 ces acc\u00e8s.</p> <p>Clients (programmes). Les programmes (ou applications) clients se connectent au programme serveur via le r\u00e9seau, lui transmettent des requ\u00eates et re\u00e7oivent des donn\u00e9es en retour. Ils ne disposent d'aucune information directe sur la base.</p> <p>Les programmes clients interrogent la base de donn\u00e9es en utilisant le langage de requ\u00eates SQL.</p> <p></p>"},{"location":"terminale/03_BDD/modele_relationnel/essentiel/#12-le-modele-relationnel","title":"1.2. Le mod\u00e8le relationnel","text":"<p>D\u00e9finition</p> <p>Le mod\u00e8le relationnel est une mani\u00e8re de mod\u00e9liser les relations existantes entre plusieurs informations, et de les ordonner entre elles</p> Relation <p>ou Table tableau compos\u00e9 d'une en-t\u00eate (premi\u00e8re ligne) et d'un corps. Le corps contient les donn\u00e9es sous la forme de p-uplets.</p> Attribut <p>colonne d'une relation, chaque \u00e9l\u00e9ment d'un p-uplet est une valeur d'un attribut, un attribut est nomm\u00e9 : son intitul\u00e9 se trouve dans la ligne d'en-t\u00eate. Les valeurs d'un attribut appartiennent \u00e0 un domaine de valeurs sp\u00e9cifi\u00e9.</p> <p>R\u00e8gles \u00e0 respecter</p> <p>Dans une relation, il est n\u00e9cessaire de respecter les deux r\u00e8gles ci-dessous :</p> <ul> <li>les valeurs des attributs doivent \u00eatre atomiques, c'est-\u00e0-dire d'un type simple et non d'un type construit (pas de listes, de tableaux, de p-uplets, ...) ;</li> <li>il n'y a pas de doublons : les p-uplets sont tous diff\u00e9rents.</li> </ul> Clef primaire <p>Dans une relation, une clef primaire est un attribut (ou un groupes d'attributs) qui d\u00e9finit de mani\u00e8re unique chacun de p-uplets.</p> Clef \u00e9trang\u00e8re <p>Soient deux relations \\(R\\) et \\(S\\) de clefs primaires respectives \\(c_R\\) et \\(c_S\\).</p> <p>Une clef \u00e9trang\u00e8re de \\(S\\) dans \\(R\\) est un attribut \\(ce\\) de \\(R\\) dont la valeur est toujours \u00e9gale exactement \u00e0 une des valeurs de \\(c_S\\).</p> <p>Autrement dit, \\(ce\\) correspond \u00e0 un et un seul p-uplet de \\(S\\).</p> <p>Contraintes li\u00e9es au clefs</p> <ul> <li>Contrainte d'unicit\u00e9: une valeur de clef ne peut appara\u00eetre qu'une fois dans une relation.</li> <li>Contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle : la valeur d'une clef \u00e9trang\u00e8re doit toujours \u00eatre \u00e9galement une des valeurs de la clef r\u00e9f\u00e9renc\u00e9e.</li> </ul> <p>Sch\u00e9ma relationnel</p> <p>Le sch\u00e9ma relationnel d'une base de donn\u00e9es contient les informations suivantes : </p> <ul> <li>Les noms des diff\u00e9rentes relations ;</li> <li>pour chaque relation, la liste des attributs avec leur domaine respectif ;</li> <li>pour chaque relation, la clef primaire et \u00e9ventuellement les clefs \u00e9trang\u00e8res</li> </ul> <p>Exemple :</p> <ul> <li>ETABLISSEMENTS(code: TEXT, nom: TEXT, statut: TEXT, codepostal: INT, #id_commune: INT, latitude: FLOAT, longitude: FLOAT)</li> <li>COMMUNES(Code commune: INT, Nom de la commune: TEXT, Population totale: INT)</li> </ul> <p>On peut le repr\u00e9senter graphiquement</p> <p></p>"},{"location":"terminale/03_BDD/modele_relationnel/intro/","title":"Introduction","text":"<p>Une donn\u00e9e est valeur num\u00e9ris\u00e9e d\u00e9crivant de mani\u00e8re \u00e9l\u00e9mentaire un fait, une mesure, une r\u00e9alit\u00e9</p> <p>Exemple : le nom de l'auteur, l'\u00e2ge du capitaine, le titre du livre ...</p> <p>Les donn\u00e9es d\u00e9crivent des entit\u00e9s du monde r\u00e9el, elles-m\u00eames associ\u00e9es les unes aux autres.</p> <p>Exemple : Nicolas Bouvier est un \u00e9crivain suisse auteur de r\u00e9cit de voyage culte \"l'usage du monde\" paru en 1963 : deux entit\u00e9s, li\u00e9es par la notion d'auteur.</p> <p>Une base de donn\u00e9es est un ensemble (potentiellement volumineux, mais pas forc\u00e9ment) de telles informations conformes \u00e0 une structure pr\u00e9-d\u00e9finie au moment de la conception, avec, de plus, une caract\u00e9ristique essentielle : on souhaite les m\u00e9moriser de mani\u00e8re persistante. La persistance d\u00e9signe la capacit\u00e9 d'une base \u00e0 exister ind\u00e9pendamment des applications qui la manipulent, ou du syst\u00e8me qui l'h\u00e9berge. On peut arr\u00eater toutes les machines un soir, et retrouver la base de donn\u00e9es le lendemain. Cela implique qu'une base est toujours stock\u00e9e sur un support comme les disques magn\u00e9tiques qui pr\u00e9servent leur contenu m\u00eame en l'absence d'alimentation \u00e9lectrique.</p> <p>On arrive donc \u00e0 la d\u00e9finition suivante : </p> <p>D\u00e9finition</p> <p>Une base de donn\u00e9es est ensemble d'informations structur\u00e9es m\u00e9moris\u00e9es sur un support persistant.</p> <p>Un fichier de base de donn\u00e9es a n\u00e9cessairement une structure qui permet d'une part de distinguer les donn\u00e9es les unes des autres, et d'autre part de repr\u00e9senter leurs liens.</p> <p>Prenons l'exemple des fichiers CSV, l'une des structures les plus simples et les plus r\u00e9pandues, sur lesquels nous avons travaill\u00e9 en premi\u00e8re. Dans un fichier CSV, les donn\u00e9es \u00e9l\u00e9mentaires sont repr\u00e9sent\u00e9es par des \u00ab champs \u00bb d\u00e9limit\u00e9s par des virgules ou des points-virgule. Les champs sont associ\u00e9s les uns aux autres par le simple fait d'\u00eatre plac\u00e9s dans une m\u00eame ligne. Les lignes en revanche sont ind\u00e9pendantes les unes des autres. On peut placer autant de lignes que l'on veut dans un fichier, et m\u00eame changer leur ordre sans que cela modifie en quoi que ce soit l'information repr\u00e9sent\u00e9e.</p> <p>Voici l'exemple de nos donn\u00e9es, repr\u00e9sent\u00e9es en CSV.</p> CSV<pre><code>\"Bouvier\" ; \"Nicolas\"; \"L'usage du monde\" ; 1963\n</code></pre> <p>On comprend bien que le premier champ est le nom, le second le pr\u00e9nom, etc. Il para\u00eet donc coh\u00e9rent d'ajouter de nouvelles lignes comme:</p> CSV<pre><code>\"Bouvier\"   ; \"Nicolas\"; \"L'usage du monde\" ; 1963\n\"Stevenson\" ; \"Robert-Louis\"  ; \"Voyage dans les C\u00e9vennes avec un \u00e2ne\" ; 1879\n</code></pre> <p>On a donn\u00e9 une structure r\u00e9guli\u00e8re \u00e0 nos informations, ce qui va permettre de les interroger et de les manipuler avec pr\u00e9cision. On les stocke dans un fichier sur disque, et nous sommes donc en cours de constitution d'une v\u00e9ritable base de donn\u00e9es. On peut en fait g\u00e9n\u00e9raliser ce constat: une base de donn\u00e9es est toujours un ensemble de fichiers, stock\u00e9s sur une m\u00e9moire externe comme un disque, dont le contenu ob\u00e9it \u00e0 certaines r\u00e8gles de structuration.</p> <p>Peut-on se satisfaire de cette solution et imaginer que nous pouvons construire des applications en nous appuyant directement sur des fichiers structur\u00e9s, par exemple des fichiers CSV ? C'est la m\u00e9thode illustr\u00e9e par la figure ci-dessous. Dans une telle situation, chaque utilisateur applique des programmes au fichier, pour en extraire des donn\u00e9es, pour les modifier, pour les cr\u00e9er.</p> <p></p> <p>Cette approche soul\u00e8ve de nombreuses difficult\u00e9s, parmi lesquelles : </p> <ul> <li>Lourdeur d'acc\u00e8s aux donn\u00e9es. En pratique, pour chaque acc\u00e8s, m\u00eame le plus simple, il faudrait \u00e9crire un programme adapt\u00e9 \u00e0 la structure du fichier. La production et la maintenance de tels programmes seraient extr\u00eamement co\u00fbteuses.</li> <li>Risques \u00e9lev\u00e9s pour l'int\u00e9grit\u00e9 et la s\u00e9curit\u00e9. Si tout programmeur peut acc\u00e9der directement aux fichiers, il est impossible de garantir la s\u00e9curit\u00e9 et l'int\u00e9grit\u00e9 des donn\u00e9es. Quelqu'un peut tr\u00e8s bien par exemple, en toute bonne foi, faire une fausse man\u0153uvre qui rend le fichier illisible.</li> <li>Pas de contr\u00f4le de concurrence. Dans un environnement o\u00f9 plusieurs utilisateurs acc\u00e8dent aux m\u00eame fichiers, comme illustr\u00e9 par exemple sur la Fig. 1, des probl\u00e8mes de concurrence d'acc\u00e8s se posent, notammment pour les mises \u00e0 jour. Comment g\u00e9rer par exemple la situation o\u00f9 deux utilisateurs souhaitent en m\u00eame temps ajouter une ligne au fichier?</li> <li>Performances. Tant qu'un fichier ne contient que quelques centaines de lignes, on peut supposer que les performances ne posent pas de probl\u00e8me, mais que faire quand on atteint les Gigaoctets (1,000 M\u00e9gaoctets), ou m\u00eame le T\u00e9raoctet (1,000 Gigaoctets)? Maintenir des performances acceptables suppose la mise en \u0153uvre d'algorithmes ou de structures de donn\u00e9es demandant des comp\u00e9tences tr\u00e8s avanc\u00e9es, probablement hors de port\u00e9e du d\u00e9veloppeur d'application qui a, de toute fa\u00e7on, mieux \u00e0 faire.</li> </ul> <p>Pour surmonter ces probl\u00e8mes des syst\u00e8mes complexes capable d'offrir \u00e0 la fois un acc\u00e8s simple, s\u00e9curis\u00e9, performant au contenu d'une base, et d'accomplir le tour de force de satisfaire de tels acc\u00e8s pour des dizaines, centaines ou m\u00eame milliers d'utilisateurs simultan\u00e9s, le tout en garantissant l'int\u00e9grit\u00e9 de la base m\u00eame en cas de panne sont mis en place. De tels syst\u00e8mes sont appel\u00e9s Syst\u00e8mes de Gestion de Bases de Donn\u00e9es, SGBD en bref.</p> <p>D\u00e9finition</p> <p>Un Syst\u00e8me de Gestion de Bases de Donn\u00e9es (SGBD) est un syst\u00e8me informatique qui assure la gestion de l'ensemble des informations stock\u00e9es dans une base de donn\u00e9es. Il prend en charge, notamment, les deux grandes fonctionnalit\u00e9s suivantes:</p> <ul> <li>Acc\u00e8s aux fichiers de la base, garantissant leur int\u00e9grit\u00e9, contr\u00f4lant les op\u00e9rations concurrentes, optimisant les recherches et mises \u00e0 jour.</li> <li>Interactions avec les applications et utilisateurs, gr\u00e2ce \u00e0 des langages d'interrogation et de manipulation \u00e0 haut niveau d'abstraction.</li> </ul> <p>Avec un SGBD, les applications n'ont plus jamais acc\u00e8s directement aux fichiers, et ne savent d'ailleurs m\u00eame pas qu'ils existent, quelle est leur structure et o\u00f9 ils sont situ\u00e9s. L'architecture classique est celle illustr\u00e9e par la figure ci-dessous. Le SGBD appara\u00eet sous la forme d'un serveur, c'est-\u00e0-dire d'un processus informatique pr\u00eat \u00e0 communiquer avec d'autres (les \u00ab clients \u00bb) via le r\u00e9seau. Ce serveur est h\u00e9berg\u00e9 sur une machine (la \u00ab machine serveur \u00bb) et est le seul \u00e0 pouvoir acc\u00e9der aux fichiers contenant les donn\u00e9es, ces fichiers \u00e9tant le plus souvent stock\u00e9s sur le disque de la machine serveur.</p> <p></p> <p>Les applications utilisateurs, maintenant, acc\u00e8dent \u00e0 la base via le programme serveur auquel elles sont connect\u00e9s. Elles transmettent des commandes (d'o\u00f9 le nom \u00ab d'applications clientes \u00bb) que le serveur se charge d'appliquer. Ces applications b\u00e9n\u00e9ficient donc des puissants algorithmes implant\u00e9s par le SGBD dans son serveur, comme par exemple la capacit\u00e9 \u00e0 g\u00e9rer les acc\u00e8s concurrents, o\u00f9 \u00e0 satisfaire avec efficacit\u00e9 des recherches portant sur de tr\u00e8s grosses bases.</p> <p>Cette architecture est \u00e0 peu pr\u00e8s universellement adopt\u00e9e par tous les SGBD. Les notions suivantes, et le vocabulaire associ\u00e9, sont donc tr\u00e8s importantes \u00e0 retenir.</p> <p>D\u00e9finitions</p> <p>Programme serveur. Un SGBD est instanci\u00e9 sur une machine sous la forme d'un programme serveur qui g\u00e8re une ou plusieurs bases de donn\u00e9es, chacune constitu\u00e9e de fichiers stock\u00e9s sur disque. Le programme serveur est seul responsable de tous les acc\u00e8s \u00e0 une base, et de l'utilisation des ressources (m\u00e9moire, disques) qui servent de support \u00e0 ces acc\u00e8s.</p> <p>Clients (programmes). Les programmes (ou applications) clients se connectent au programme serveur via le r\u00e9seau, lui transmettent des requ\u00eates et re\u00e7oivent des donn\u00e9es en retour. Ils ne disposent d'aucune information directe sur la base.</p> <p>Le fait que le serveur de donn\u00e9es s'interpose entre les fichiers et les programmes clients a une cons\u00e9quence extr\u00eamement importante: ces clients, n'ayant pas acc\u00e8s aux fichiers, ne voient les donn\u00e9es que sous la forme que veut bien leur pr\u00e9senter le serveur. Ce dernier peut donc choisir le mode de repr\u00e9sentation qui lui semble le plus appropri\u00e9 : pour nous, ce sera sous forme de tables et nous parlerons alors de mod\u00e8le relationnel.</p> <p>Une des propri\u00e9t\u00e9s les plus importantes des SGBD est donc la distinction entre plusieurs niveaux d'abstraction pour la repr\u00e9sentation des donn\u00e9es : le niveau logique et le niveau physique.</p> <p>D\u00e9finition</p> <ul> <li>Le niveau physique est celui du codage des donn\u00e9es dans des fichiers stock\u00e9s sur disque.</li> <li>Le niveau logique est celui de la repr\u00e9sentation les donn\u00e9es dans des structures abstraites, propos\u00e9es aux applications clientes, obtenues par conversion du niveau physique (pour nous ce sont des structures en tables)</li> </ul> <p>La figure ci-dessous illustre les niveaux d'abstraction dans l'architecture d'un syst\u00e8me de gestion de donn\u00e9es. Les programmes clients ne voient que le niveau logique, c'est-\u00e0-dire des tables. Le serveur est en charge du niveau physique, de la conversion des donn\u00e9es vers le niveau logique, et de toute la machinerie qui permet de faire fonctionner le syst\u00e8me: m\u00e9moire, disques, algorithmes et structures de donn\u00e9es. Tout cela est, encore une fois, invisible (et c'est tant mieux) pour les programmes clients qui peuvent se concentrer sur l'acc\u00e8s \u00e0 des donn\u00e9es pr\u00e9sent\u00e9es le plus simplement possible.</p> <p></p> <p>Pr\u00e9cisions que les niveaux sont en grande partie ind\u00e9pendants, dans le sens o\u00f9 l'on peut modifier compl\u00e8tement l'organisation du niveau physique sans avoir besoin de changer qui que ce soit aux applications qui acc\u00e8dent \u00e0 la base. Cette ind\u00e9pendance logique-physique est tr\u00e8s pr\u00e9cieuse pour l'administration des bases de donn\u00e9es.</p> <p>Un langage est n\u00e9cessaire pour interagir avec les donn\u00e9es (ins\u00e9rer, modifier, d\u00e9truire, d\u00e9placer, prot\u00e9ger, etc.). Le langage permet de construire les commandes transmises au serveur.</p> <p>Le mod\u00e8le relationnel s'est construit sur des bases formelles (math\u00e9matiques) rigoureuses, ce qui explique en grande partie sa robustesse et sa stabilit\u00e9 depuis l'essentiel des travaux qui l'ont \u00e9labor\u00e9, dans les ann\u00e9es 70-80.</p> <p>Le langage SQL est utilis\u00e9 depuis les ann\u00e9es 1970 dans tous les syst\u00e8mes relationnels.</p> <p>Le terme SQL d\u00e9signe plus qu'un langage d'interrogation, m\u00eame s'il s'agit de son principal aspect. La norme couvre \u00e9galement les mises \u00e0 jour, la d\u00e9finition des tables, les contraintes portant sur les donn\u00e9es, les droits d'acc\u00e8s. SQL est donc le langage \u00e0 conna\u00eetre pour interagir avec un syst\u00e8me relationnel.</p> <p></p>"},{"location":"terminale/03_BDD/modele_relationnel/modele_relationnel/","title":"1.2. Le mod\u00e8le relationnel","text":"<p>D\u00e9finition</p> <p>Le mod\u00e8le relationnel est une mani\u00e8re de mod\u00e9liser les relations existantes entre plusieurs informations, et de les ordonner entre elles</p>"},{"location":"terminale/03_BDD/modele_relationnel/modele_relationnel/#1-relation-attributs-et-domaines","title":"1. Relation, attributs et domaines","text":"<p>Une relation peut \u00eatre vue comme un tableau compos\u00e9 d'une en-t\u00eate (premi\u00e8re ligne) et d'un corps.</p> <p>Chaque ligne de la relation est un p-uplet et chaque colonne est un attribut (l'en-t\u00eate contient les intitul\u00e9s des attributs).</p> <p></p> <p>Pour la relation ci-dessus, on retrouve les donn\u00e9es concernant les \u00e9tablissement scolaires du second degr\u00e9 dans le Cantal.</p> <p>Pour chaque attribut d'une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d'un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles. </p> <p>Par exemple, le domaine de l'attribut \"statut\" correspond \u00e0 l'ensemble des deux cha\u00eenes {\"Public\", \"Priv\u00e9\"}. L'attribut \"nom\" a pour domaine l'ensemble des cha\u00eenes de caract\u00e8res (not\u00e9 TEXT). L'attribut \"codepostal\" a pour domaine l'ensemble des entiers (not\u00e9 INT).</p> <p>Au moment de la cr\u00e9ation d'une relation, il est n\u00e9cessaire de renseigner le domaine de chaque attribut. Le SGBD s'assure qu'un \u00e9l\u00e9ment ajout\u00e9 \u00e0 une relation respecte bien le domaine de l'attribut correspondant : si par exemple vous essayez d'ajouter un code postal non entier (par exemple 8.5), le SGBD signalera cette erreur et n'autorisera pas l'\u00e9criture de cette nouvelle donn\u00e9e.</p> <p>R\u00e8gles \u00e0 respecter</p> <p>Dans une relation, il est n\u00e9cessaire de respecter les deux r\u00e8gles ci-dessous :</p> <ul> <li>les valeurs des attributs doivent \u00eatre atomiques, c'est-\u00e0-dire d'un type simple et non d'un type construit (pas de listes, de tableaux, de p-uplets, ...) ;</li> <li>il n'y a pas de doublons : les p-uplets sont tous diff\u00e9rents.</li> </ul> <p>Pour s'assurer qu'il n'y a pas de doublons dans une relation on ajoute en pratique un crit\u00e8re d'unicit\u00e9 sur l'un des attributs, la clef.</p>"},{"location":"terminale/03_BDD/modele_relationnel/modele_relationnel/#2-clef-primaire-clef-etrangere","title":"2. Clef primaire, clef \u00e9trang\u00e8re","text":"<p>D\u00e9finition</p> <p>Dans une relation, une clef primaire est un attribut (ou un groupes d'attributs) qui d\u00e9finit de mani\u00e8re unique chacun de p-uplets.</p> <p>En d'autre termes il s'agit d'un attribut tel que deux p-uplets sont \u00e9gaux si, et seulement si, ils ont la m\u00eame clef primaire.</p> <p>Par exemple, dans la table des \u00e9tablissements scolaires du Cantal, l'attribut \"code\" peut \u00eatre choisi comme clef primaire car il identifie de fa\u00e7on unique chaque \u00e9tablissement. L'attribut \"commune\" ne peut pas \u00eatre choisi comme clef primaire car plusieurs \u00e9tablissements existent dans une m\u00eame commune.</p> <p>On pourrait na\u00efvement penser qu'il suffit de cr\u00e9er une unique relation et de tout mettre dedans pour avoir une base de donn\u00e9es. En fait, une telle approche est inapplicable et il est indispensable de cr\u00e9er plusieurs relations, associ\u00e9es les unes aux autres.</p> <p>Prenons l'exemple des \u00e9tablissements scolaires, un parcours de la table nous montre que certaines informations sont r\u00e9p\u00e9t\u00e9es plusieurs fois, comme notamment le nom de la commune : </p> <p></p> <p>Cette duplication de l'information n'est pas souhaitable dans une base de donn\u00e9e. La solution pour \u00e9viter cela est de travailler avec deux relations (deux tables) au lieu d'une, chacune des relations \u00e9tant munie d'une clef primaire.</p> <p>Nous allons pour cela consid\u00e9rer la table des communes du Cantal qui contient un attribut nomm\u00e9 \"Code commune\" qui peut \u00eatre choisi comme clef primaire. Dans la relation des \u00e9tablissements, nous rempla\u00e7ons le nom de la commune par la valeur du Code commune correspondante (attribut id_commune). Voici un extrait des deux relations obtenues :</p> <p></p> <p></p> <p>L'attribut id_commune permet de lier les deux relations : les communes sont repr\u00e9sent\u00e9es dans la relation des \u00e9tablissements par leur code dans la relation des communes. On dit que l'attribut id_commune est une clef \u00e9trang\u00e8re.</p> <p>D\u00e9finition</p> <p>Soient deux relations \\(R\\) et \\(S\\) de clefs primaires respectives \\(c_R\\) et \\(c_S\\).</p> <p>Une clef \u00e9trang\u00e8re de \\(S\\) dans \\(R\\) est un attribut \\(ce\\) de \\(R\\) dont la valeur est toujours \u00e9gale exactement \u00e0 une des valeurs de \\(c_S\\).</p> <p>Autrement dit, \\(ce\\) correspond \u00e0 un et un seul p-uplet de \\(S\\).</p> <p>Dans notre exemple, l'attribut id_commune est une clef \u00e9trang\u00e8re de la relation des communes dans la relation des \u00e9tablissements car c'est un attribut de la relation des \u00e9tablissements dont la valeur est toujours \u00e9gale \u00e0 une des valeurs de la clef primaire Code commune de la relation des communes.</p> <p>Deux contraintes doivent toujours \u00eatre v\u00e9rifi\u00e9es avec les clefs : </p> <p>Contraintes li\u00e9es au clefs</p> <ul> <li>Contrainte d'unicit\u00e9: une valeur de clef ne peut appara\u00eetre qu'une fois dans une relation.</li> <li>Contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle : la valeur d'une clef \u00e9trang\u00e8re doit toujours \u00eatre \u00e9galement une des valeurs de la clef r\u00e9f\u00e9renc\u00e9e.</li> </ul> <p>Ces deux contraintes garantissent l'absence totale de redondances et d'incoh\u00e9rences.</p>"},{"location":"terminale/03_BDD/modele_relationnel/modele_relationnel/#3-schema-relationnel","title":"3. Sch\u00e9ma relationnel","text":"<p>Le sch\u00e9ma d'une base de donn\u00e9es est constitu\u00e9 d'un ensemble de relations : on parle de sch\u00e9ma relationnel. </p> <p>Le sch\u00e9ma relationnel d'une base de donn\u00e9es contient les informations suivantes : </p> <ul> <li>Les noms des diff\u00e9rentes relations ;</li> <li>pour chaque relation, la liste des attributs avec leur domaine respectif ;</li> <li>pour chaque relation, la clef primaire et \u00e9ventuellement les clefs \u00e9trang\u00e8res</li> </ul> <p>Nommons ETABLISSEMENTS et COMMUNES les deux relations utilis\u00e9es ci-dessus. Le sch\u00e9ma relationnel peut s'\u00e9crire : </p> <ul> <li>ETABLISSEMENTS(code: TEXT, nom: TEXT, statut: TEXT, codepostal: INT, #id_commune: INT, latitude: FLOAT, longitude: FLOAT)</li> <li>COMMUNES(Code commune: INT, Nom de la commune: TEXT, Population totale: INT)</li> </ul> <p>Les attributs soulign\u00e9s sont des clefs primaires, le # signifie que l'on a une clef \u00e9trang\u00e8re.</p> <p>Le sch\u00e9ma relationnel peut \u00eatre repr\u00e9sent\u00e9 sous forme graphique (image obtenue ici avec le logiciel DbSchema \u00e0 partir de la base pr\u00e9c\u00e9dente l\u00e9g\u00e8rement modifi\u00e9e : l'attribut Codepostal a \u00e9t\u00e9 d\u00e9plac\u00e9 dans la relation COMMUNES) :</p> <p></p>"},{"location":"terminale/03_BDD/modele_relationnel/quiz/","title":"Quiz : Le mod\u00e8le relationnel, SGBD","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-1","title":"Question 1","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-2","title":"Question 2","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-3","title":"Question 3","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-4","title":"Question 4","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-5","title":"Question 5","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-6","title":"Question 6","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-7","title":"Question 7","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-8","title":"Question 8","text":""},{"location":"terminale/03_BDD/modele_relationnel/quiz/#question-9","title":"Question 9","text":""},{"location":"terminale/04_arbres/","title":"S4-Arbres","text":""},{"location":"terminale/04_arbres/#programme","title":"Programme","text":"Contenus Capacit\u00e9s attendues Commentaires Arbres : structures hi\u00e9rarchiques. Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits. Identifier des situations n\u00e9cessitant une structure de donn\u00e9es arborescente. \u00c9valuer quelques mesures des arbres binaires (taille, encadrement de la hauteur, etc.). On fait le lien avec la rubrique \u00ab algorithmique \u00bb."},{"location":"terminale/04_arbres/TP_arbres/","title":"T.P. Manipulations d'arbres","text":""},{"location":"terminale/04_arbres/TP_arbres/#tp-arbres-binaires-quelques-complements-utiles","title":"T.P. : Arbres binaires, quelques compl\u00e9ments utiles","text":"<p>Ce T.P. est \u00e0 r\u00e9aliser et \u00e0 rendre dans Capytale.</p> <ul> <li>Ouvrez le lien ci-dessus ;</li> <li>Connectez-vous avec vos identifiants ENT ;</li> <li>Entrez le code du TP : 15c9-991659</li> <li>Cliquez sur \"Go !\".</li> </ul>"},{"location":"terminale/04_arbres/arbres/","title":"Arbres (cours)","text":""},{"location":"terminale/04_arbres/arbres/#1-introduction","title":"1. Introduction","text":""},{"location":"terminale/04_arbres/arbres/#11-vocabulaire","title":"1.1. Vocabulaire","text":"<p>D\u00e9finition</p> <p>En informatique, un arbre est une structure de donn\u00e9es qui peut se repr\u00e9senter sous forme d'une hi\u00e9rarchie dont chaque \u00e9l\u00e9ment est appel\u00e9 n\u0153ud, le n\u0153ud initial \u00e9tant appel\u00e9 racine.</p> <p></p> <p>Vocabulaire</p> <ul> <li>Chaque n\u0153ud a exactement un n\u0153ud p\u00e8re, sauf le n\u0153ud racine (situ\u00e9 en haut) qui n'a pas de p\u00e8re.</li> <li>Un n\u0153ud peut avoir une nombre quelconque de fils.</li> <li>Les n\u0153uds qui n'ont pas de fils sont appel\u00e9s des feuilles (situ\u00e9es aux extr\u00e9mit\u00e9s des branches !).</li> <li>Les n\u0153uds poss\u00e8dent une valeur, ou clef, ou encore \u00e9tiquette.</li> </ul> <p>Par exemple, dans l'arbre repr\u00e9sent\u00e9 ci-dessus :</p> <p>Exemple</p> <ul> <li>La racine poss\u00e8de l'\u00e9tiquette D.</li> <li>Le n\u0153ud p\u00e8re D a trois fils U, L et A.</li> <li>Le n\u0153ud V a pour p\u00e8re le n\u0153ud A.</li> <li>Les n\u0153uds C, L et X sont des feuilles.</li> </ul>"},{"location":"terminale/04_arbres/arbres/#12-exemples","title":"1.2. Exemples","text":"<p>Voici quelques exemples de situations dans lesquelles une structure de donn\u00e9es arborescente est utile.</p>"},{"location":"terminale/04_arbres/arbres/#larborescence-dun-disque-dur","title":"L'arborescence d'un disque dur","text":"<p>D\u00e9j\u00e0 rencontr\u00e9e dans le chapitre sur les syst\u00e8mes d'exploitation en premi\u00e8re, une arborescence de dossiers dans un disque dur peut \u00eatre mod\u00e9lis\u00e9e par un arbre.</p> <p></p>"},{"location":"terminale/04_arbres/arbres/#le-dom-dune-page-web","title":"Le DOM d'une page web","text":"<p>LE DOM (Document Object Model) est une interface de programmation pour les pages web dans laquelle une page HTML est mod\u00e9lis\u00e9e sous la forme d'un arbre.</p> <p>Par exemple, le code HTML ci-dessous sera mod\u00e9lis\u00e9 par l'arbre en-dessous (source : w3.org).</p> HTML<pre><code>&lt;TABLE&gt;\n    &lt;ROWS&gt; \n      &lt;TR&gt; \n        &lt;TD&gt;Shady Grove&lt;/TD&gt;\n        &lt;TD&gt;Aeolian&lt;/TD&gt; \n      &lt;/TR&gt; \n      &lt;TR&gt;\n        &lt;TD&gt;Over the River, Charlie&lt;/TD&gt;\n        &lt;TD&gt;Dorian&lt;/TD&gt; \n      &lt;/TR&gt; \n    &lt;/ROWS&gt;\n&lt;/TABLE&gt;\n</code></pre> <p></p>"},{"location":"terminale/04_arbres/arbres/#un-arbre-genealogique","title":"Un arbre g\u00e9n\u00e9alogique","text":""},{"location":"terminale/04_arbres/arbres/#13-caracteristiques-dun-arbre","title":"1.3. Caract\u00e9ristiques d'un arbre","text":"<p>Diff\u00e9rents param\u00e8tres num\u00e9riques peuvent \u00eatre d\u00e9finis concernant un arbre.</p> <p>D\u00e9finitions</p> <ul> <li>La taille d'un arbre est son nombre total de n\u0153uds.</li> <li>La profondeur d'un n\u0153ud est le nombre de n\u0153uds de la branche allant de la racine \u00e0 ce n\u0153ud, en comptant les extr\u00e9mit\u00e9s.</li> <li>La hauteur d'un arbre est la profondeur de son n\u0153ud le plus profond. Par convention, si l'arbre est vide, sa hauteur vaut 0, si l'arbre n'est compos\u00e9 que d'un n\u0153ud racine, sa hauteur vaut 1.</li> </ul> <p>Exemple</p> <p>Consid\u00e9rons l'arbre ci-dessous :</p> <p></p> <ul> <li>La taille de cet arbre est \u00e9gale \u00e0 7.</li> <li>La profondeur du n\u0153ud C est \u00e9gale \u00e0 3, celle de X est \u00e9gale \u00e0 4.</li> <li>La hauteur de cet arbre est \u00e9gale \u00e0 4 : X est le n\u0153ud le plus profond.</li> </ul>"},{"location":"terminale/04_arbres/arbres/#2-arbres-binaires","title":"2. Arbres binaires","text":""},{"location":"terminale/04_arbres/arbres/#21-definition","title":"2.1. D\u00e9finition","text":"<p>D\u00e9finition</p> <p>Un arbre binaire est un arbre dans lequel chaque n\u0153ud poss\u00e8de au plus deux fils au niveau inf\u00e9rieur, appel\u00e9s gauche et droite.</p> <p>L'arbre donn\u00e9 en exemple ci-dessus n'est pas un arbre binaire car le n\u0153ud D poss\u00e8de 3 fils.</p> <p>L'arbre ci-dessous est un arbre binaire :</p> <p></p>"},{"location":"terminale/04_arbres/arbres/#22-sous-arbres","title":"2.2. Sous-arbres","text":"<p>Chaque n\u0153ud n'ayant que deux fils (au maximum), nous pouvons d\u00e9finir un sous-arbre gauche et un sous-arbre droit  qui sont tous les deux \u00e9galement des arbres binaires (\u00e9ventuellement vides).</p> <p></p> <p>Exemple</p> <p>Pour l'arbre repr\u00e9sent\u00e9 ci-dessous, nous avons mis en \u00e9vidence le sous-arbre gauche et le sous-arbre droit du n\u0153ud racine C.</p> <p>Le n\u0153ud Q admet comme sous-arbre gauche le n\u0153ud H et comme sous-arbre droit, l'arbre vide.</p> <p>Cette notion de sous arbre permet de mettre en \u00e9vidence la structure r\u00e9cursive d'un arbre binaire : un arbre binaire est un arbre dans lequel chaque n\u0153ud poss\u00e8de un arbre fils gauche et un arbre fils droit qui sont tous deux des arbres binaires.</p>"},{"location":"terminale/04_arbres/arbres/#23-hauteur-dun-arbre-binaire","title":"2.3. Hauteur d'un arbre binaire","text":"<p>Nous avons d\u00e9fini plus haut les notions de taille et de hauteur d'un arbre.</p> <p>Notons ici \\(n\\) la taille d'un arbre binaire et \\(h\\) sa hauteur. Ces deux entiers ne sont pas ind\u00e9pendants l'un de l'autre.</p> <p>Un cas extr\u00eame est le cas de l'arbre filiforme dans lequel chaque n\u0153ud n'a qu'un fils. La figure ci-dessous est r\u00e9alis\u00e9e avec \\(n=7\\).</p> <p></p> <p>Dans ce cas, nous avons \\(n=h\\) : la hauteur de l'arbre est \u00e9gale au nombre de n\u0153uds de l'arbre.</p> <p>Un autre cas \"extr\u00eame\" est le cas d'un arbre complet : il s'agit d'un arbre binaire dans lequel tous les n\u0153uds (sauf les feuilles) ont exactement deux fils et toutes les feuilles ont la m\u00eame profondeur. La figure ci-dessous repr\u00e9sente un arbre complet \u00e0 7 n\u0153uds.</p> <p></p> <p>Dans un tel arbre, le nombre de n\u0153uds est doubl\u00e9 \u00e0 chaque niveau. Si la hauteur est \\(h\\), le nombre total de n\u0153uds est donc \u00e9gal \u00e0 : </p> \\[n=1+2^1+2^2+2^3+\\ldots+2^{h-1}\\] <p>(on num\u00e9rote les niveaux de \\(0\\) \u00e0 \\(h-1\\))</p> <p>On obtient donc le r\u00e9sultat suivant :</p> <p>Lien entre hauteur et taille d'un arbre binaire complet</p> <p>Soit un arbre binaire complet de taille \\(n\\) et de hauteur \\(h\\).</p> <p>On a alors : </p> \\[n=2^h-1\\] Preuve <p>Nous avons vu que \\(n=1+2^1+2^2+2^3+\\ldots+2^{h-1}\\). Cette somme est la somme des premiers termes d'une suite g\u00e9om\u00e9trique de raison 2.</p> <p>On peut donc utiliser la formule de calcul vue en premi\u00e8re en Math\u00e9matiques :</p> \\[1+2^1+2^2+2^3+\\ldots+2^{h-1} = \\frac{2^h-1}{2-1}=2^h-1\\] <p>Pour ceux  qui n'auraient jamais vu cette formule, sa preuve n'est pas difficile : il suffit de calculer le produit \\((2-1)(1+2^1+2^2+2^3+\\ldots+2^{h-1})\\) en d\u00e9veloppant : </p> \\[(2-1)(1+2^1+2^2+2^3+\\ldots+2^{h-1})= 2^1+2^2+2^3+\\ldots+2^{h} -1-2^1-2^2-2^3-\\ldots-2^{h-1}\\] <p>Tous les termes s'annulent sauf \\(2^{h}\\) et \\(-1\\), d'o\u00f9 le r\u00e9sultat.</p> <p>Tout arbre \u00e9tant situ\u00e9 entre ces deux cas extr\u00eames, nous pouvons \u00e9crire un encadrement du nombre de n\u0153uds \\(n\\) en fonction de la hauteur \\(h\\), valable pour tout arbre binaire :</p> \\[h\\leqslant n\\leqslant 2^h-1\\] <p>\u00c0 partir de cet encadrement de \\(n\\), on peut d\u00e9duire un encadrement de \\(h\\). Nous avons d\u00e9j\u00e0 de fa\u00e7on \u00e9vidente \\(h\\leqslant n\\). La seconde in\u00e9galit\u00e9 \\(n\\leqslant 2^h-1\\) est \u00e9quivalente \u00e0 \\(n+1\\leqslant 2^h\\).</p> <p>Pour isoler \\(h\\) dans cette in\u00e9galit\u00e9, nous avons besoin de la fonction logarithme binaire. Le logarithme binaire d'un entier positif est son exposant quand on l'\u00e9crit sous la forme d'une puissance de 2. Par exemple \\(\\log_2(8)=3\\) car \\(2^3=8\\) et \\(\\log_2(2^h)=h\\). Cette fonction \\(\\log_2\\) \u00e9tant intuitivement croissante, nous obtenons, en l'appliquant \u00e0 l'in\u00e9galit\u00e9 \\(n+1\\leqslant 2^h\\) : \\(\\log_2(n+1)\\leqslant h\\).</p> <p>Nous avons finalement l'encadrement suivant : </p> <p>Encadrement de la hauteur d'un arbre binaire</p> <p>Soit un arbre binaire de taille \\(n\\) et de hauteur \\(h\\).</p> <p>On a alors : </p> \\[\\log_2(n+1)\\leqslant h\\leqslant n\\] <p>Cet encadrement nous sera utile lors du calcul du co\u00fbt d'ex\u00e9cution des algorithmes sur les arbres.</p>"},{"location":"terminale/04_arbres/arbres/#3-arbres-binaires-de-recherche","title":"3. Arbres binaires de recherche","text":"<p>D\u00e9finition</p> <p>Un arbre binaire de recherche (ABR) est un arbre binaire dont les clefs des n\u0153uds (leur valeur) v\u00e9rifient les propri\u00e9t\u00e9s suivantes :</p> <ul> <li>la clef d'un n\u0153ud est sup\u00e9rieure \u00e0 celle de chaque n\u0153ud de son sous-arbre gauche.</li> <li>la clef d'un n\u0153ud est inf\u00e9rieure \u00e0 celle du chaque n\u0153ud de son sous-arbre droit.</li> </ul> <p>Cette d\u00e9finition n'a de sens que dans le cas o\u00f9 les clefs des n\u0153uds sont toujours comparables entre elles. Dans la pratique, nous travaillerons toujours avec des clefs num\u00e9riques ou alphanum\u00e9riques (ordre alphab\u00e9tique).</p> <p>Nous supposerons toujours que toutes les clefs sont diff\u00e9rentes.</p> <p></p> <p>Remarque</p> <p>Dans un ABR, pour un n\u0153ud donn\u00e9, tous les n\u0153uds de son sous-arbre gauche ont des clefs inf\u00e9rieures et tous les n\u0153uds de son sous-arbre droit ont des clefs sup\u00e9rieures.</p>"},{"location":"terminale/04_arbres/exos_arbres/","title":"Exercices","text":"<p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  sont \u00e0 faire sur machine, en sauvegardant le fichier si n\u00e9cessaire.</p> <p>Les exercices pr\u00e9c\u00e9d\u00e9s du symbole  doivent \u00eatre r\u00e9solus par \u00e9crit.</p>"},{"location":"terminale/04_arbres/exos_arbres/#exercice-1","title":"Exercice 1","text":"<p>On consid\u00e8re l'arbre binaire ci-dessous :</p> <p></p> <ol> <li>D\u00e9terminer la profondeur du n\u0153ud 6.</li> <li>D\u00e9terminer la hauteur de cet arbre.</li> <li>Expliquer pourquoi cet arbre n'est pas un arbre binaire de recherche.</li> <li>Modifier l'arbre (en conservant les m\u00eames clefs) pour en faire un ABR.</li> </ol>"},{"location":"terminale/04_arbres/exos_arbres/#exercice-2","title":"Exercice 2","text":"<p>On consid\u00e8re l'arbre binaire ci-dessous :</p> <p></p> <ol> <li>Justifier qu'il s'agit bien d'un arbre binaire.</li> <li>Donner la clef de la racine.</li> <li>Donner le sous-arbre droit du n\u0153ud A.</li> <li>Le n\u0153ud C est-il une feuille ? Justifier.</li> <li>Donner la taille de cet arbre.</li> <li>Donner la profondeur du n\u0153ud B.</li> <li>Donner la hauteur de cet arbre.</li> </ol>"},{"location":"terminale/04_arbres/exos_arbres/#exercice-3","title":"Exercice 3","text":"<p>Soit les valeurs suivantes : 14, 22, 8, 47, 42, 13, 1, 24, 33, 74.</p> <p>Construire un arbre binaire de recherche \u00e0 partir de ces valeurs. </p>"},{"location":"terminale/04_arbres/implementation/","title":"Impl\u00e9mentation","text":"<p>L'objectif de cette partie est d'impl\u00e9menter la structure d'arbre binaire en Python. Nous allons pour cela utiliser la Programmation Orient\u00e9e Objet et construire un module r\u00e9utilisable proposant \u00e0 l'utilisateur une interface (API) permettant de travailler avec les arbres binaires.</p>"},{"location":"terminale/04_arbres/implementation/#1-arbres-binaires","title":"1. Arbres binaires","text":"<p>Une interface souhaitable devrait permettre de : </p> <ul> <li>Cr\u00e9er un arbre vide ;</li> <li>Acc\u00e9der au sous-arbre gauche et au sous-arbre droit d'un n\u0153ud ;</li> <li>Acc\u00e9der \u00e0 une clef ;</li> <li>Tester si un n\u0153ud est une feuille ;</li> <li>Tester si un arbre est vide ;</li> <li>Retourner la taille ;</li> <li>Retourner la hauteur.</li> </ul> <p>De plus, il serait souhaitable de parvenir \u00e0 afficher un arbre de fa\u00e7on visuelle.</p> <p>Nous avons vu que la structure d'arbre binaire est une structure r\u00e9cursive : cette propri\u00e9t\u00e9 est exploit\u00e9e dans l'impl\u00e9mentation que nous allons pr\u00e9senter. Pour d\u00e9finir un arbre, il suffit de d\u00e9finir un n\u0153ud racine ainsi que les deux sous-arbres gauche et droite qui sont eux-m\u00eame des arbres binaires. Cela revient \u00e0 assimiler un arbre \u00e0 sa racine associ\u00e9e \u00e0 un lien vers ses deux fils.</p> <p>Nous d\u00e9finissons ci-dessous un objet <code>ArbreBinaire</code> poss\u00e9dant trois attributs <code>clef</code>, <code>gauche</code>, <code>droit</code>. Pour respecter les principes de la POO, et notamment la notion d'encapsulation, nous avons d\u00e9fini des m\u00e9thodes d'acc\u00e8s aux attributs (elles commencent par <code>get</code>) et des m\u00e9thodes de modification des attributs (elles commencent par <code>set</code>) et on s'interdira tout acc\u00e8s ou affectation direct(e) du type <code>arbre.racine = ...</code>.</p> <p>La m\u00e9thode <code>setRacine</code>, qui permet de d\u00e9finir la clef d'un n\u0153ud assure que chaque n\u0153ud a toujours un sous-arbre gauche et un sous-arbre droit, \u00e9ventuellement vides, ce qui facilite le traitement des arbres dans les algorithmes suivants. On mat\u00e9rialise ici l'aspect r\u00e9cursif de la structure.</p> \ud83d\udc0d Script Python<pre><code>class ArbreBinaire:\n\"\"\" Impl\u00e9mentation de la structure d'arbre binaire \"\"\"\n\n    def __init__(self):\n        self.racine = None\n        # les sous-arbres gauche et droit doivent \u00eatre des instances de l'objet ArbreBinaire\n        self.gauche = None\n        self.droit = None\n\n    def setRacine(self, racine):\n\"\"\"d\u00e9finit la clef de la racine de l'instance\n         et cr\u00e9e les sous arbres vides gauches et droits\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ArbreBinaire()\n        if self.droit is None:\n            self.droit = ArbreBinaire()\n\n    def getRacine(self):\n\"\"\"retourne la clef de la racine de l'arbre\"\"\"\n        return self.racine\n\n    def getSousArbreGauche(self):\n        return self.gauche\n\n    def setSousArbreGauche(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.gauche = arbre\n\n    def getSousArbreDroit(self):\n        return self.droit\n\n    def setSousArbreDroit(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.droit = arbre\n\n    def estVide(self) -&gt; bool:\n        return self.racine is None\n\n    def estFeuille(self) -&gt; bool:\n        if self.estVide():\n            return False\n        else:\n            return self.gauche.estVide() and self.droit.estVide()\n\n    def __str__(self):\n        if self.estVide():\n            return \"()\"\n        elif self.estFeuille():\n            return f\"('{self.racine}', (), ())\"\n        else:\n            return f\"('{self.racine}', {self.gauche.__str__()}, {self.droit.__str__()})\"\n</code></pre> <p>La classe est compl\u00e9t\u00e9e par une m\u00e9thode <code>estVide</code> permettant de tester si un arbre est vide ou non et une m\u00e9thode <code>estFeuille</code> permettant de tester si un n\u0153ud est une feuille ou non (on confond un n\u0153ud avec un arbre de hauteur 1).</p> <p>La derni\u00e8re m\u00e9thode est la m\u00e9thode sp\u00e9ciale <code>__str__</code> qui d\u00e9finit la fa\u00e7on dont un arbre va \u00eatre affich\u00e9 par la fonction <code>print</code>. Ici, on a choisi un affichage sous forme de tuple du type <code>(clef, sous-arbre gauche, sous-arbre droit)</code>.</p> <p>Pour cr\u00e9er un module, on enregistre le code ci-dessus dans un fichier nomm\u00e9 par exemple <code>structures.py</code>.</p> <p>On peut ensuite utiliser notre nouvelle structure dans un autre fichier Python (dans le m\u00eame dossier), ou dans la console interactive, en important le module :</p> \ud83d\udc0d Script Python<pre><code>from structures import *\n\na = ArbreBinaire()\na.setRacine(8)\na.getSousArbreGauche().setRacine(3)\na.getSousArbreDroit().setRacine(9)\nb = a.getSousArbreGauche()\nc = a.getSousArbreDroit()\nb.getSousArbreGauche().setRacine(7)\nb.getSousArbreDroit().setRacine(5)\nc.getSousArbreDroit().setRacine(1)\nprint(a)\n</code></pre> <p>On obtient en sortie :</p> \ud83d\udc0d Console Python<pre><code>(8, (3, (7, (), ()), (5, (), ())), (9, (), (1, (), ())))\n</code></pre> <p>Cela correspond \u00e0 l'arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p> <p>On peut tester les autres m\u00e9thodes dans la console :</p> \ud83d\udc0d Console Python<pre><code>print(c)\n&gt;&gt;&gt; (9, (), (1, (), ()))\nc.getSousArbreGauche().estVide()\n&gt;&gt;&gt; True\nc.estFeuille()\n&gt;&gt;&gt; False\nc.getSousArbreDroit().estFeuille()\n&gt;&gt;&gt; True\n</code></pre> <p>Nous pouvons maintenant ajouter au fichier <code>structures.py</code> les deux fonctions suivantes (en dehors de la classe <code>ArbreBinaire</code> car ce ne sont pas des m\u00e9thodes) qui retournent respectivement la taille et la hauteur d'un arbre binaire.</p> \ud83d\udc0d Script Python<pre><code>def taille(arbre) -&gt; int:\n\"\"\"Retourne la taille de l'arbre, c\u00e0d son nombre de noeuds\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + taille(arbre.gauche) + taille(arbre.droit)\n\ndef hauteur(arbre) -&gt; int:\n\"\"\"Retourne la hauteur de l'arbre\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + max(hauteur(arbre.gauche), hauteur(arbre.droit))\n</code></pre> <p>Prendre le temps de bien comprendre comment fonctionnent ces deux fonctions ...</p> \ud83d\udc0d Console Python<pre><code>taille(a)\n&gt;&gt;&gt; 6\nhauteur(a)\n&gt;&gt;&gt; 3\n</code></pre> <p>Ce module <code>structures</code> sera utilis\u00e9 en exercices et plus tard dans l'ann\u00e9e lorsque nous \u00e9tudierons les algorithmes sur les arbres.</p>"},{"location":"terminale/04_arbres/implementation/#2-arbres-binaires-de-recherche-abr","title":"2. Arbres binaires de recherche (ABR)","text":"<p>Les ABR sont des arbres binaires. Nous pouvons donc cr\u00e9er une classe <code>ABR</code> fille de la classe <code>ArbreBinaire</code> en utilisant la notion d'h\u00e9ritage et de polymorphisme de la POO (voir les compl\u00e9ments de cours \u00e0 ce sujet). Nous d\u00e9finissons une m\u00e9thode sp\u00e9cifique : l'insertion d'une clef. Cette m\u00e9thode ajoute une clef \u00e0 un ABR existant en s'assurant que l'arbre obtenu est toujours un ABR (le nouveau n\u0153ud est toujours une feuille).</p> \ud83d\udc0d Script Python<pre><code>class ABR(ArbreBinaire):\n\"\"\" Impl\u00e9mentation de la structure d'arbre binaire de recherche \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n    def setRacine(self, racine):\n\"\"\"d\u00e9finit la clef de la racine de l'instance\n         et cr\u00e9e les sous arbres vides gauches et droits\n         Provoque une erreur si la racine casse la structure d'ABR\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ABR()\n        if self.droit is None:\n            self.droit = ABR()\n        if not estABR(self):\n            raise Exception(\"Cette affectation de clef casse la structure ABR !!!\")\n\n    def insere(self, racine):\n\"\"\"ins\u00e8re une clef dans l'arbre en pr\u00e9servant la structure ABR\"\"\"\n        if self.racine is None:\n            self.racine = racine\n            self.gauche = ABR()\n            self.droit = ABR()\n        else:\n            if racine &lt; self.racine:\n                self.gauche.insere(racine)\n            else:\n                self.droit.insere(racine)\n</code></pre> <p>Pour d\u00e9finir un arbre binaire de recherche valide, on utilisera toujours la m\u00e9thode <code>insere</code> car elle permet de s'assurer de toujours conserver un ABR.</p> <p>Pour faciliter la v\u00e9rification, nous d\u00e9finissons une fonction <code>estABR</code> qui peut s'appliquer aussi bien \u00e0 un arbre binaire quelconque qu'\u00e0 un ABR et qui retourne <code>True</code> si l'arbre est un ABR et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>def estABR(arbre, mini=-float(\"inf\"), maxi=+float(\"inf\")) -&gt; bool:\n    if arbre.getRacine() is None:\n        return True\n    else:\n        return estABR(arbre.getSousArbreGauche(), mini, arbre.getRacine()) and estABR(arbre.getSousArbreDroit(), arbre.getRacine(), maxi) and mini &lt; arbre.racine &lt; maxi\n</code></pre> <p>Prendre le temps de bien comprendre cette fonction ...</p> <p>Utilisation :</p> \ud83d\udc0d Script Python<pre><code>from structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\nprint(a)\nprint(estABR(a))\n# Affectation directe \u00e0 proscrire :\n# a.getSousArbreDroit().setRacine(1) ## provoque une erreur\n</code></pre> <p>Sortie :</p> \ud83d\udc0d Console Python<pre><code>(8, (5, (3, (), ()), ()), (12, (10, (), ()), (15, (), ())))\nTrue\n</code></pre> <p>L'arbre correspond \u00e0 : </p> <p></p> <p>Le module <code>structure.py</code> est \u00e0 conserver : il sera utilis\u00e9 en exercices et dans les chapitres suivants.</p> <p>Compl\u00e9ment</p> <p>On peut ajouter une fonctionnalit\u00e9 de repr\u00e9sentation graphique d'un arbre en utilisant les biblioth\u00e8ques <code>networkx</code> et <code>matplotlib</code>. Ajouter la fonction ci-dessous au fichier <code>structures.py</code> :</p> \ud83d\udc0d Script Python<pre><code>import networkx as nx\nimport matplotlib.pyplot as plt\n\ndef afficheArbre(arbre, size=(4,4), null_node=False):\n\"\"\"\nsize : tuple de 2 entiers. Si size est int -&gt; (size, size)\nnull_node : si True, trace les liaisons vers les sous-arbres vides\n\"\"\"\narbreAsTuple = eval(arbre.__str__())\ndef parkour(arbre, noeuds, branches, labels, positions, profondeur, pos_courante, pos_parent, null_node):\n    if arbre != ():\n        noeuds[0].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        profondeur -= 1\n        labels[pos_courante] = str(arbre[0])\n        branches[0].append((pos_courante, pos_parent))\n        pos_gauche = pos_courante - 2 ** profondeur\n        parkour(arbre[1], noeuds, branches, labels, positions, profondeur, pos_gauche, pos_courante, null_node)\n        pos_droit = pos_courante + 2 ** profondeur\n        parkour(arbre[2], noeuds, branches, labels, positions, profondeur, pos_droit, pos_courante, null_node)\n    elif null_node:\n        noeuds[1].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        branches[1].append((pos_courante, pos_parent))\n\nif arbreAsTuple == ():\n    return\n\nbranches = [[]]\nprofondeur = hauteur(arbre)\npos_courante = 2 ** profondeur\nnoeuds = [[pos_courante]]\npositions = {pos_courante: (pos_courante, profondeur)}\nlabels = {pos_courante: str(arbreAsTuple[0])}\n\nif null_node:\n    branches.append([])\n    noeuds.append([])\n\nprofondeur -= 1\nparkour(arbreAsTuple[1], noeuds, branches, labels, positions, profondeur, pos_courante - 2 ** profondeur, pos_courante,\n        null_node)\nparkour(arbreAsTuple[2], noeuds, branches, labels, positions, profondeur, pos_courante + 2 ** profondeur, pos_courante,\n        null_node)\n\nmon_arbre = nx.Graph()\n\nif type(size) == int:\n    size = (size, size)\nplt.figure(figsize=size)\n\nnx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[0], node_color=\"white\", node_size=550,\n                       edgecolors=\"blue\")\nnx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[0], edge_color=\"black\", width=2)\nnx.draw_networkx_labels(mon_arbre, positions, labels)\n\nif null_node:\n    nx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[1], node_color=\"white\", node_size=50,\n                           edgecolors=\"grey\")\n    nx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[1], edge_color=\"grey\", width=1)\n\nax = plt.gca()\nax.margins(0.1)\nplt.axis(\"off\")\nplt.show()\nplt.close()\n</code></pre> <p>Utilisation : </p> \ud83d\udc0d Script Python<pre><code>from structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\n\nafficheArbre(a)\n</code></pre> <p>Sortie : </p> <p></p>"},{"location":"terminale/05_archi_SE/","title":"S5-Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation","text":""},{"location":"terminale/05_archi_SE/#programme","title":"Programme","text":"Contenus Capacit\u00e9s attendues Commentaires Composants int\u00e9gr\u00e9s d'un syst\u00e8me sur puce. Identifier les principaux composants sur un sch\u00e9ma de circuit et les avantages de leur int\u00e9gration en termes de vitesse et de consommation. Le circuit d'un t\u00e9l\u00e9phone peut \u00eatre pris comme un exemple : microprocesseurs, m\u00e9moires locales, interfaces radio et filaires, gestion d'\u00e9nergie, contr\u00f4leurs vid\u00e9o, acc\u00e9l\u00e9rateur graphique, r\u00e9seaux sur puce, etc. Gestion des processus et des ressources par un syst\u00e8me d'exploitation. D\u00e9crire la cr\u00e9ation d'un processus, l'ordonnancement de plusieurs processus par le syst\u00e8me. Mettre en \u00e9vidence le risque de l'interblocage (deadlock). \u00c0 l'aide d'outils standard, il s'agit d'observer les processus actifs ou en attente sur une machine. Une pr\u00e9sentation d\u00e9branch\u00e9e de l'interblocage peut \u00eatre propos\u00e9e. <p>Remarque</p> <p>Pour la session 2023 du bac, la partie \"Composants int\u00e9gr\u00e9s d'un syst\u00e8me sur puce.\" n'est pas au programme de l'\u00e9preuve \u00e9crite.</p>"},{"location":"terminale/05_archi_SE/processus/TP_Linux/","title":"T.P. : Processus sous Linux","text":"<p>Ne disposant de salle informatique sous Linux, nous travaillerons pour ce T.P. \u00e0 l'aide d'une machine virtuelle en ligne disponible \u00e0 cette adresse : Machine virtuelle en ligne.</p> <p></p> <ol> <li> <p>Faire un clic droit dans l'\u00e9mulateur pour ouvrir le menu contextuel, cliquer sur \"Keyboard mapping\", puis sur \"French\" pour utiliser la disposition du clavier fran\u00e7ais. D\u00e9marrer ensuite une fen\u00eatre de l'application \"Terminal\".</p> <p></p> </li> <li> <p>De la m\u00eame fa\u00e7on, d\u00e9marrer l'application \"Top\" et l'application \"Browser-Dillo\". Organiser les fen\u00eatres pour les voir toutes.</p> </li> <li> <p>Dans le terminal, taper la commande <code>vi essai.txt &amp;</code> pour ouvrir l'\u00e9diteur de texte <code>vi</code> en arri\u00e8re-plan.</p> </li> <li> <p>Taper dans le terminal la commande <code>pstree -p</code> qui affiche l'arbre des processus en cours d'ex\u00e9cution ainsi que leur PID..</p> <p>Quel processus est \u00e0 la racine de l'arbre affich\u00e9 ?</p> <p>Reconna\u00eetre et noter les noms de quelques processus ouverts.</p> </li> <li> <p>Cr\u00e9er un fichier <code>TPlinuxTNSI.odt</code> avec le traitement de texte LibreOffice Writer. Ce fichier sera votre compte-rendu.</p> <p>Faire une copie d'\u00e9cran de l'arbre obtenu dans le terminal et coller dans la page.</p> </li> <li> <p>Observation des processus</p> <ul> <li> <p>La commande ps -aef permet de lister tous les processus.</p> <p>Dans le terminal, taper la commande suivante : <code>ps -aef</code> (attention \u00e0 l'espace apr\u00e8s ps).</p> <p>S'affichent plusieurs informations sur les processus en cours sur votre ordinateur.</p> <ul> <li>PID : num\u00e9ro du processus</li> <li>USER : utilisateur propri\u00e9taire du processus</li> <li>TIME : dur\u00e9e de traitement du processus</li> <li>COMMAND : nom du processus.</li> </ul> <p>6.1. Faire une copie d'\u00e9cran (ou plusieurs si besoin) \u00e0 coller \u00e0 la suite de votre page.</p> <p>6.2. Reconna\u00eetre les processus li\u00e9s \u00e0 l'application <code>top</code>. Pourquoi y en a-t-il deux ?</p> <p>6.3. En vous aidant des informations affich\u00e9es dans la fen\u00eatre de <code>top</code>, donner le PID et le PPID de chacun, faire un lien p\u00e8re/fils et remonter dans le tableau pour suivre la branche de l'arbre. (le plus loin possible !). Faire un sch\u00e9ma.</p> <p>6.4. Retrouver de m\u00eame l'ensemble des processus pr\u00e9d\u00e9cesseurs du processus de l'\u00e9diteur <code>vi</code>.</p> <p>6.5. Recopier la ligne du tableau dont le PID est 1 et reconna\u00eetre le processus init.</p> </li> <li> <p>La commande top donne beaucoup de d\u00e9tails, en temps r\u00e9el, sur les processus qui tournent sur une machine :</p> <p></p> <ul> <li>PID : num\u00e9ro du processus</li> <li>PPID : num\u00e9ro du processus p\u00e8re</li> <li>USER nom de l'utilisateur qui a lanc\u00e9 le processus</li> <li>STAT : Statut du processus. Valeurs possibles : <ul> <li>R en cours d'ex\u00e9cution ; </li> <li>T processus stopp\u00e9 ; </li> <li>I processus endormi (&gt;20s) ; </li> <li>S processus endormi (&lt;20s) ; </li> <li>Z processus zombie ; </li> <li>D processus non interruptible ; </li> <li>W processus swapp\u00e9 sur disque.</li> </ul> </li> <li>%CPU : consommation du CPU</li> <li>%VSZ : consommation de la RAM</li> <li>COMMAND : nom du processus.</li> </ul> <p>6.6. Analyser en quelques lignes ce qu'on observe \u00e0 l'\u00e9cran (agrandir au maximum la hauteur de la fen\u00eatre de <code>top</code>).</p> <p>Pour en savoir plus sur la commande top, consultez la page : http://debian-facile.org/doc:systeme:top</p> </li> </ul> </li> <li> <p>Dans le navigateur Dillo, cliquer sur diff\u00e9rents liens pr\u00e9sents sur la page d'accueil et observer dans la fen\u00eatre <code>top</code> comment \u00e9volue le processus. Commenter.</p> </li> <li> <p>Rechercher la signification du mot daemon pour     Linux. On privil\u00e9giera Wikip\u00e9dia.</p> <p>De m\u00eame chercher sur Wikip\u00e9dia la signification de processus zombie et de processus swapp\u00e9 sur disque. Donner des \u00e9l\u00e9ments de d\u00e9finition pour ces trois mots ou expressions.</p> </li> <li> <p>Dans le terminal, utiliser la commande kill qui permet     d'arr\u00eater le processus (kill suivi du num\u00e9ro de PID) pour tuer le processus de Dillo. Quelle commande faut-il entrer ?</p> <p>Que se passe-t-il ?</p> <p></p> </li> <li> <p>La commande cat /proc/cpuinfo permet d'avoir des informations d\u00e9taill\u00e9es sur le processeur.</p> <p></p> <p>Sous Linux, les d\u00e9tails sur chacun des processus sont stock\u00e9s dans les sous r\u00e9pertoires de \u00ab /proc \u00bb. On peut ainsi explorer le contenu de ces fichiers pour avoir plus d'informations sur un processus en particulier.   Observer les r\u00e9sultats sur cette machine virtuelle.</p> </li> </ol>"},{"location":"terminale/05_archi_SE/processus/TP_Linux_ancienne_version/","title":"T.P. : Processus sous Linux","text":"<p>Pour ce T.P., nous travaillons avec les vieilles machines sous Linux : elles doivent \u00eatre respect\u00e9es (vu leur grand \u00e2ge) et accepter leur lenteur !</p> <p></p> <ol> <li>Ouvrir l'\u00e9mulateur de terminal pour travailler en ligne de commandes.</li> <li> <p>Au lancement du syst\u00e8me, il n'existe qu'un seul processus (init),      qui est l'anc\u00eatre de tous les autres. On peut voir l'arborescence     avec la commande \u00ab pstree \u00bb.</p> <p>Quel processus est \u00e0 la racine de l'arbre affich\u00e9 ?</p> <p>Reconna\u00eetre et noter les noms de quelques processus li\u00e9s aux entr\u00e9es/sorties,</p> </li> <li> <p>Cr\u00e9er un fichier <code>TPlinuxTNSI.odt</code> avec le traitement de texte LibreOffice Writer sur le bureau.</p> <p>En utilisant la touche \u00ab imprime \u00e9cran \u00bb, faire une copie d'\u00e9cran de l'arbre obtenu dans le terminal et coller dans la page.</p> </li> <li> <p>Observation des processus</p> <ul> <li> <p>La commande ps -aef permet de lister tous les processus.</p> <p>Dans le terminal, taper la commande suivante : <code>ps -aef</code> (attention \u00e0 l'espace apr\u00e8s ps).</p> <p>S'affichent plusieurs informations sur les processus en cours sur votre ordinateur du type :</p> <p></p> <ul> <li>UID nom de l'utilisateur qui a lanc\u00e9 le processus</li> <li>PID : num\u00e9ro du processus</li> <li>PPID : num\u00e9ro du processus parent</li> <li>C : facteur de priorit\u00e9 : plus la valeur est grande, plus le processus est prioritaire</li> <li>STIME : heure de lancement du processus</li> <li>TTY : correspond au nom du terminal depuis lequel le processus a \u00e9t\u00e9 lanc\u00e9</li> <li>TIME : dur\u00e9e de traitement du processus</li> <li>CMD : nom du processus.</li> </ul> <p>4.1. Faire une copie d'\u00e9cran (ou plusieurs si besoin) \u00e0 coller \u00e0 la suite de votre page.</p> <p>4.2. Reconna\u00eetre les processus li\u00e9s \u00e0 l'ouverture du logiciel LibreOffice.</p> <p>4.3. Donner le PID et le PPID de chacun, faire un lien p\u00e8re/fils et remonter dans le tableau pour suivre la branche de l'arbre. (le plus loin possible !). Faire un sch\u00e9ma.</p> <p>4.4. Quelle remarque peut-on faire sur le nom de l'utilisateur qui a lanc\u00e9 le processus ?</p> <p>4.5. Quel est le PID de la commande ps -aef ? Remonter le chemin dans l'arbre. Pourquoi passe-t-on par un processus dont le nom est \u00ab bash \u00bb ?</p> <p>4.6. Recopier la ligne du tableau dont le PID est 1 et reconna\u00eetre le processus init.</p> <p>La commande ps ne permet pas de suivre en temps r\u00e9el les processus (affichage fig\u00e9). Pour avoir un suivi en temps r\u00e9el, on peut utiliser la commande <code>top</code>.</p> </li> <li> <p>La commande top donne beaucoup de d\u00e9tails, en temps r\u00e9el, sur les processus qui tournent sur une machine :</p> <p></p> <ul> <li>PID : num\u00e9ro du processus</li> <li>UTIL ou USER nom de l'utilisateur qui a lanc\u00e9 le processus</li> <li>PR : facteur de priorit\u00e9 : plus la valeur est grande, plus le processus est prioritaire</li> <li>VIRT : Taille virtuelle du processus, m\u00e9moire qu'il utilise r\u00e9ellement</li> <li>RES : Quantit\u00e9 de m\u00e9moire physique occup\u00e9e par le processus</li> <li>S : Statut du processus. Valeurs possibles : <ul> <li>R en cours d'ex\u00e9cution ; </li> <li>T processus stopp\u00e9 ; </li> <li>I processus endormi (&gt;20s) ; </li> <li>S processus endormi (&lt;20s) ; </li> <li>Z processus zombie ; </li> <li>D processus non interruptible ; </li> <li>W processus swapp\u00e9 sur disque.</li> </ul> </li> <li>%CPU : consommation du CPU</li> <li>%MEM : consommation de la RAM</li> <li>TEMPS+ ou TIME+ : temps d'utilisation CPU depuis que le processus est lanc\u00e9</li> <li>COMMAND : nom du processus.</li> </ul> <p>4.7. Analyser en quelques lignes ce qu'on observe \u00e0 l'\u00e9cran.</p> <p>4.8. Taper Ctrl Z pour arr\u00eater.</p> <p>Pour en savoir plus sur la commande top, consultez la page : http://debian-facile.org/doc:systeme:top</p> </li> </ul> </li> <li> <p>Ouvrir le navigateur Firefox et chercher avec le moteur de recherche     propos\u00e9 par le navigateur la signification du mot daemon pour     Linux. On privil\u00e9giera Wikip\u00e9dia.</p> <p>De m\u00eame chercher sur Wikip\u00e9dia la signification de processus zombie et de processus swapp\u00e9 sur disque. Donner des \u00e9l\u00e9ments de d\u00e9finition pour ces trois mots ou expressions.</p> <p>Dans le terminal, taper la commande <code>ps -aef</code> pour visualiser les processus li\u00e9s \u00e0 Firefox.</p> <p>Comment est le sous arbre (suivre la trace des <code>PID</code> et <code>PPID</code> jusqu'\u00e0 <code>init</code>) ? Le construire ci-dessous en notant les <code>PID</code>.</p> <p>Fermer Firefox, et retaper la commande dans le terminal, que remarque-t-on ?</p> <p>R\u00e9ouvrir le navigateur, puis noter \u00e0 quel processus il correspond dans la table du terminal.</p> <p>Dans le terminal, utiliser la commande kill qui permet d'arr\u00eater le processus (kill suivi du num\u00e9ro de PID) pour tuer ce processus.</p> <p>Que remarque-t-on ?</p> <p></p> </li> <li> <p>Pour lancer un processus en t\u00e2che de fond (en arri\u00e8re-plan), on peut     faire suivre la commande du symbole &amp;. Cela ordonne au     processus parent de \"reprendre la main\", sans attendre la fin du     processus \"fils\"</p> <p>Exemple</p> <ul> <li>Lancer la commande <code>xeyes</code> dans le terminal, les yeux apparaissent... bouger la souris, mais le terminal est \u00ab bloqu\u00e9 \u00bb : il attend que le processus <code>xeyes</code> soit termin\u00e9. (taper Ctrl Z pour arr\u00eater)</li> <li>Lancer <code>xeyes &amp;</code>, les yeux apparaissent, et on a toujours la main dans le terminal.</li> <li>\u00ab Tuer \u00bb ce processus avec la commande <code>kill</code> en relevant le num\u00e9ro du processus avec la commande \u00ab top \u00bb et observer les processus dans le terminal.</li> </ul> <p>Remarque : En utilisant <code>pkill</code>, il suffit de mettre le nom du processus au lieu de son PID.</p> </li> <li> <p>La commande cat /proc/cpuinfo permet d'avoir des informations d\u00e9taill\u00e9es sur le processeur.</p> <p></p> <p>Sous Linux, les d\u00e9tails sur chacun des processus sont stock\u00e9s dans les sous r\u00e9pertoires de \u00ab /proc \u00bb. On peut ainsi explorer le contenu de ces fichiers pour avoir plus d'informations sur un processus en particulier.   Observer les r\u00e9sultats sur les vieux ordinateurs du lyc\u00e9e et proposer une raison pour laquelle les ordinateurs utilis\u00e9s sont consid\u00e9r\u00e9s comme obsol\u00e8tes et les logiciels ne sont plus mis \u00e0 jour pour ce type d'appareil ?</p> </li> </ol>"},{"location":"terminale/05_archi_SE/processus/demo_processus_python/","title":"Processus sous Linux et Python","text":"<p>La m\u00e9thode Python <code>fork()</code>, du module <code>os</code> permet de cr\u00e9er des processus enfants en utilisant les processus par lesquels elle a \u00e9t\u00e9 appel\u00e9e. Cette commande n'est disponible que lorsque Python fonctionne sous Linux.</p> <p>Voici les principales propri\u00e9t\u00e9s de la m\u00e9thode <code>fork()</code> :</p> <ul> <li>Elle ne prend aucun argument lorsqu'elle est appel\u00e9e.</li> <li>Si le processus enfant est cr\u00e9\u00e9 avec succ\u00e8s, le processus parent et le processus enfant ex\u00e9cuteront tous les deux l'instruction qui suit l'instruction <code>fork()</code>.</li> </ul> <p>Lors de l'ex\u00e9cution de l'instruction Python <code>fork()</code>, trois types de valeurs enti\u00e8res sont retourn\u00e9es :</p> <ul> <li>Z\u00e9ro ( 0 ) est renvoy\u00e9 au processus enfant si le processus enfant est cr\u00e9\u00e9 avec succ\u00e8s.</li> <li>Une valeur positive est renvoy\u00e9e au processus parent si le processus enfant est cr\u00e9\u00e9 avec succ\u00e8s. Cette valeur positive est le PID du processus enfant nouvellement cr\u00e9\u00e9.</li> <li>Une valeur n\u00e9gative est renvoy\u00e9e au processus parent si une erreur se produit lors de la cr\u00e9ation du processus enfant pour une raison quelconque.</li> </ul>"},{"location":"terminale/05_archi_SE/processus/demo_processus_python/#premier-exemple","title":"Premier exemple","text":"<p>On consid\u00e8re le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>import os\n\n# Cr\u00e9ation de processus fils\nos.fork()\nos.fork()\n\n# La ligne suivante sera ex\u00e9cut\u00e9e par le processus p\u00e8re et ses deux enfants\nprint(\"Coucou !\")\n</code></pre> <p>Sortie obtenue :</p> <p></p> <p>Question</p> <p>Pourquoi l'affichage s'est-il produit 4 fois ?</p>"},{"location":"terminale/05_archi_SE/processus/demo_processus_python/#deuxieme-exemple","title":"Deuxi\u00e8me exemple","text":"<p>On consid\u00e8re le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>import os\n\nval = os.fork()\n\nif val == 0:\n    pid = os.getpid()\n    print(f\"Coucou ! Je suis le processus fils et mon PID est {pid}.\")\nelif val &gt; 0:\n    pid = os.getpid()\n    print(f\"Coucou ! Je suis le processus p\u00e8re, mon PID est {pid} et celui de mon fils est {val}.\")\nelse:\n    print(\"Oups ! La cr\u00e9ation de processus fils a \u00e9chou\u00e9 ...\")\n</code></pre> <p>Sortie obtenue :</p> <p></p>"},{"location":"terminale/05_archi_SE/processus/demo_processus_python/#un-exemple-plus-complexe","title":"Un exemple plus complexe","text":"<p>Consid\u00e9rons le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>import os\nimport time\n\nprint(\"Processus p\u00e8re : mon PID est\", os.getpid())\nfor i in range(3):\n    newpid = os.fork()\n    print(\"Processus\", os.getpid(), \"actif\")\n    print(\"Processus\", os.getpid(), i)\n    if newpid == 0:\n        print(\"Processus\", os.getpid(), \": mon p\u00e8re est\", os.getppid())\ntime.sleep(20)\n</code></pre> <p>Sortie partielle : </p> \ud83d\udc0d Console Python<pre><code>Processus p\u00e8re : mon PID est 91152\nProcessus 91152 actif\nProcessus 91152 0\nProcessus 91152 actif\nProcessus 91152 1\nProcessus 91153 actif\nProcessus 91154 actif\nProcessus 91152 2\nProcessus 91154 1\nProcessus 91153 0\nProcessus 91154 : mon p\u00e8re est 91152\nProcessus 91153 : mon p\u00e8re est 91152\n...\n</code></pre> <p></p> <p>Question</p> <p>Expliquer la sortie et la copie d'\u00e9cran.</p> <p>En ex\u00e9cutant plusieurs fois ce programme, nous constatons que les sorties ne se font pas toujours dans le m\u00eame ordre. En g\u00e9n\u00e9ral, l'ordre d'ex\u00e9cution ne peut pas \u00eatre pr\u00e9vu \u00e0 l'avance et plus il y a de processus, avec une dur\u00e9e longue, plus l'entrelacement est important. On dit que l'ordonnancement est non d\u00e9terministe.</p>"},{"location":"terminale/05_archi_SE/processus/exos_processus/","title":"Exercices type bac : Processus","text":"<p>Tous ces exercices sont \u00e0 traiter \u00e0 l'\u00e9crit : .</p>"},{"location":"terminale/05_archi_SE/processus/exos_processus/#exercice-1","title":"Exercice 1","text":"<p>2021, sujet Am\u00e9rique du Nord (extrait)</p> <p>Un constructeur automobile utilise des ordinateurs pour la conception de ses v\u00e9hicules. Ceux-ci sont munis d'un syst\u00e8me d'exploitation ainsi que de nombreuses applications parmi lesquelles on peut citer :</p> <ul> <li>un logiciel de traitement de texte ;</li> <li>un tableur ;</li> <li>un logiciel de Conception Assist\u00e9e par Ordinateur (CAO) ;</li> <li>un syst\u00e8me de gestion de base de donn\u00e9es (SGBD)</li> </ul> <p>Chaque ordinateur est \u00e9quip\u00e9 des p\u00e9riph\u00e9riques classiques : clavier, souris, \u00e9cran et est reli\u00e9 \u00e0 une imprimante r\u00e9seau.</p> <ol> <li> <p>Un ing\u00e9nieur travaille sur son ordinateur et utilise les quatre applications cit\u00e9es au d\u00e9but de l'\u00e9nonc\u00e9. Pendant l'ex\u00e9cution de ces applications, des processus mobilisent des donn\u00e9es et sont en attente d'autres donn\u00e9es mobilis\u00e9es par d'autres processus. On donne ci-dessous un tableau indiquant \u00e0 un instant pr\u00e9cis l'\u00e9tat des processus en cours d'ex\u00e9cution et dans lequel D1, D2, D3, D4 et D5 sont des donn\u00e9es.</p> <p>La lettre M signifie que la donn\u00e9e est mobilis\u00e9e par l'application ; la lettre A signifie que l'application est en attente de cette donn\u00e9e.</p> <p>Lecture du tableau : le logiciel de traitement de texte mobilise (M) la donn\u00e9e D1 et est en attente (A) de la donn\u00e9e D2.</p> D1 D2 D3 D4 D5 Traitement de texte M A - - - Tableur A - - - M SGBD - M A A - CAO - - A M A <p>Montrer que les applications s'attendent mutuellement. Comment s'appelle cette situation ?</p> </li> </ol>"},{"location":"terminale/05_archi_SE/processus/exos_processus/#exercice-2","title":"Exercice 2","text":"<p>2021, M\u00e9tropole sujet 1</p> <p>Partie A Cette partie est un questionnaire \u00e0 choix multiples (QCM). Pour chacune des questions, une seule des quatre r\u00e9ponses est exacte.</p> <ol> <li>Parmi les commandes ci-dessous, laquelle permet d'afficher les processus en cours d'ex\u00e9cution ?<ul> <li>a. <code>dir</code></li> <li>b. <code>ps</code> </li> <li>c. <code>man</code> </li> <li>d.   <code>ls</code></li> </ul> </li> <li>Quelle abr\u00e9viation d\u00e9signe l'identifiant d'un processus dans un syst\u00e8me d'exploitation de type UNIX ?<ul> <li>a. PIX</li> <li>b. SIG </li> <li>c. PID </li> <li>d. SID</li> </ul> </li> <li>Comment s'appelle la gestion du partage de processeur entre les diff\u00e9rents processus ?<ul> <li>a. L'interblocage</li> <li>b. L'ordonnancement</li> <li>c. La planification</li> <li>d. La priorisation</li> </ul> </li> <li>Quelle commande permet d'interrompre un processus dans un syst\u00e8me d'exploitation de type UNIX ?<ul> <li>a. <code>stop</code></li> <li>b. <code>interrupt</code> </li> <li>c. <code>end</code> </li> <li>d.   <code>kill</code></li> </ul> </li> </ol> <p>Partie B</p> <p>Q1. Un processeur choisit \u00e0 chaque cycle d'ex\u00e9cution le processus qui doit \u00eatre ex\u00e9cut\u00e9. Le tableau ci-dessous donne pour trois processus P1, P2, P3 :</p> <ul> <li>la dur\u00e9e d'ex\u00e9cution (en nombre de cycles),</li> <li>l'instant d'arriv\u00e9e sur le processeur (exprim\u00e9 en nombre de cycles \u00e0 partir de 0),</li> <li>le num\u00e9ro de priorit\u00e9.</li> </ul> <p>Le num\u00e9ro de priorit\u00e9 est d'autant plus petit que la priorit\u00e9 est grande. On suppose qu'\u00e0 chaque instant, c'est le processus qui a le plus petit num\u00e9ro de priorit\u00e9 qui est ex\u00e9cut\u00e9, ce qui peut provoquer la suspension d'un autre processus, lequel reprendra lorsqu'il sera le plus prioritaire.</p> <p></p> <p>Reproduire le tableau ci-dessous sur la copie et indiquer dans chacune des cases le processus ex\u00e9cut\u00e9 \u00e0 chaque cycle.</p> <p></p> <p>Q2. On suppose maintenant que les trois processus pr\u00e9c\u00e9dents s'ex\u00e9cutent et utilisent une ou plusieurs ressources parmi R1, R2 et R3. Parmi les sc\u00e9narios suivants, lequel provoque un interblocage ? Justifier.</p> <p></p>"},{"location":"terminale/05_archi_SE/processus/exos_processus/#exercice-3","title":"Exercice 3","text":"<p>2021, M\u00e9tropole sujet 2</p> <p>Partie A</p> <p>Dans un bureau d'architectes, on dispose de certaines ressources qui ne peuvent \u00eatre utilis\u00e9es simultan\u00e9ment par plus d'un processus, comme l'imprimante, la table tra\u00e7ante, le modem. Chaque programme, lorsqu'il s'ex\u00e9cute, demande l'allocation des ressources qui lui sont n\u00e9cessaires. Lorsqu'il a fini de s'ex\u00e9cuter, il lib\u00e8re ses ressources.</p> <p></p> <p>On appelle p1, p2 et p3 les processus associ\u00e9s respectivement aux programmes 1, 2 et 3</p> <ol> <li>Les processus s'ex\u00e9cutent de mani\u00e8re concurrente. Justifier qu'une situation d'interblocage peut se produire.</li> <li>Modifier l'ordre des instructions du programme 3 pour qu'une telle situation ne puisse pas se produire. Aucune justification n'est attendue.</li> <li>Supposons que le processus p1 demande la table tra\u00e7ante alors qu'elle est en cours d'utilisation par le processus p3. Parmi les \u00e9tats suivants, quel sera l'\u00e9tat du processus p1 tant que la table tra\u00e7ante n'est pas disponible :<ul> <li>a. \u00e9lu</li> <li>b. bloqu\u00e9</li> <li>c. pr\u00eat</li> <li>d. termin\u00e9</li> </ul> </li> </ol> <p>Partie B</p> <p>Avec une ligne de commande dans un terminal sous Linux, on obtient l'affichage suivant :</p> <p></p> <p>La documentation Linux donne la signification des diff\u00e9rents champs :</p> <ul> <li><code>UID</code> : identifiant utilisateur effectif ;</li> <li><code>PID</code> : identifiant de processus ;</li> <li><code>PPID</code> : <code>PID</code> du processus parent ;</li> <li><code>C</code> : partie enti\u00e8re du pourcentage d'utilisation du processeur par rapport au temps de vie des processus ;</li> <li><code>STIME</code> : l'heure de lancement du processus ;</li> <li><code>TTY</code> : terminal de contr\u00f4le</li> <li><code>TIME</code> : temps d'ex\u00e9cution</li> <li><code>CMD</code> : nom de la commande du processus</li> </ul> <p>Q1. Parmi les quatre commandes suivantes, laquelle a permis cet affichage ?</p> <ul> <li>a. <code>ls -l</code> </li> <li>b. <code>ps -ef</code> </li> <li>c. <code>cd ..</code> </li> <li>d. <code>chmod 741 processus.txt</code> </li> </ul> <p>Q2. Quel est l'identifiant du processus parent \u00e0 l'origine de tous les processus concernant le navigateur Web (chromium-browser) ?</p> <p>Q3. Quel est l'identifiant du processus dont le temps d'ex\u00e9cution est le plus long ?</p>"},{"location":"terminale/05_archi_SE/processus/exos_processus/#exercice-4","title":"Exercice 4","text":"<p>2021, M\u00e9tropole Candidats Libres sujet 2</p> <p>Q1. Les \u00e9tats possibles d'un processus sont : pr\u00eat, \u00e9lu, termin\u00e9 et bloqu\u00e9.</p> <p>Q1.a. Expliquer \u00e0 quoi correspond l'\u00e9tat \u00e9lu. Q1.b. Proposer un sch\u00e9ma illustrant les passages entre les diff\u00e9rents \u00e9tats.</p> <p>Q2. On suppose que quatre processus C\u2081, C\u2082, C\u2083 et C\u2084 sont cr\u00e9\u00e9s sur un ordinateur, et qu'aucun autre processus n'est lanc\u00e9 sur celui-ci, ni pr\u00e9alablement ni pendant l'ex\u00e9cution des quatre processus. L'ordonnanceur, pour ex\u00e9cuter les diff\u00e9rents processus pr\u00eats, les place dans une structure de donn\u00e9es de type file. Un processus pr\u00eat est enfil\u00e9 et un processus \u00e9lu est d\u00e9fil\u00e9.</p> <p>Q2.a. Parmi les propositions suivantes, recopier celle qui d\u00e9crit le fonctionnement des entr\u00e9es/sorties dans une file :  </p> <ul> <li>i.Premier entr\u00e9, dernier sorti</li> <li>ii. Premier entr\u00e9, premier sorti</li> <li>iii. Dernier entr\u00e9, premier sorti</li> </ul> <p>Q2.b. On suppose que les quatre processus arrivent dans la file et y sont plac\u00e9s dans l'ordre C\u2081, C\u2082, C\u2083 et C\u2084.</p> <ul> <li>Les temps d'ex\u00e9cution totaux de C\u2081, C\u2082, C\u2083 et C\u2084 sont respectivement 100 ms, 150 ms, 80 ms et 60 ms.</li> <li>Apr\u00e8s 40 ms d'ex\u00e9cution, le processus C\u2081 demande une op\u00e9ration d'\u00e9criture disque, op\u00e9ration qui dure 200 ms. Pendant cette op\u00e9ration d'\u00e9criture, le processus C\u2081 passe \u00e0 l'\u00e9tat bloqu\u00e9.</li> <li> <p>Apr\u00e8s 20 ms d'ex\u00e9cution, le processus C\u2083 demande une op\u00e9ration d'\u00e9criture disque, op\u00e9ration qui dure 10 ms. Pendant cette op\u00e9ration d'\u00e9criture, le processus C\u2083 passe \u00e0 l'\u00e9tat bloqu\u00e9.</p> <p>Sur la frise chronologique ci-dessous, les \u00e9tats du processus C\u2082 sont donn\u00e9s. Compl\u00e9ter la frise avec les \u00e9tats des processus C\u2081, C\u2083 et C\u2084.</p> <p></p> </li> </ul>"},{"location":"terminale/05_archi_SE/processus/processus_cours/","title":"Processus : cours","text":""},{"location":"terminale/05_archi_SE/processus/processus_cours/#1-vocabulaire","title":"1. Vocabulaire","text":"<p>Toute machine est dot\u00e9e d'un syst\u00e8me d'exploitation qui a pour fonction de charger les programmes depuis la m\u00e9moire de masse et de lancer leur ex\u00e9cution en leur cr\u00e9ant des processus, de g\u00e9rer l'ensemble des ressources, de traiter les interruptions ainsi que les entr\u00e9es-sorties et enfin d'assurer la s\u00e9curit\u00e9 globale du syst\u00e8me.</p> <p>D\u00e9finition d'un processus</p> <p>Un programme \u00e9crit \u00e0 l'aide d'un langage de haut de niveau (on parle de \"code source\") est transform\u00e9 en langage machine afin de pouvoir \u00eatre ex\u00e9cut\u00e9 par un ordinateur.</p> <p>On appelle processus un programme en cours d'ex\u00e9cution, c'est donc une instance d'ex\u00e9cution du programme.</p> <p>Attention, il ne faut pas confondre le code source du programme et un processus qui correspond \u00e0 l'ex\u00e9cution de ce programme par un ordinateur. Pour prendre une image assez classique, si une recette de cuisine correspond au code source du programme, le cuisinier en train de pr\u00e9parer cette recette dans sa cuisine correspond \u00e0 un processus.</p> <p>Un processus est caract\u00e9ris\u00e9 par :</p> <ul> <li>l'ensemble des instructions qu'il va devoir accomplir (\u00e9crites dans le fichier ex\u00e9cutable obtenu par la compilation du code-source du programme)</li> <li>les ressources que le programme va mobiliser (fichier en ouverture, carte son...)</li> <li>l'\u00e9tat des registres du processeur.</li> </ul>"},{"location":"terminale/05_archi_SE/processus/processus_cours/#2-etats-dun-processus","title":"2. \u00c9tats d'un processus","text":"<p>Tous les syst\u00e8mes d'exploitation \"modernes\" (Linux, Windows, macOS, Android, iOS...) sont capables de g\u00e9rer l'ex\u00e9cution de plusieurs processus en m\u00eame temps. Mais pour \u00eatre pr\u00e9cis, cela n'est pas un v\u00e9ritable \"en m\u00eame temps\", mais plut\u00f4t un \"chacun son tour\" car un processeur ne peut g\u00e9rer qu'un processus \u00e0 la fois. Pour g\u00e9rer ce \"chacun son tour\", les syst\u00e8mes d'exploitation attribuent des \"\u00e9tats\" au processus.</p> <p>Remarque</p> <p>De nos jours, les ordinateurs ont toujours plusieurs coeurs, donc plusieurs processeurs qui travaillent simultan\u00e9ment (v\u00e9ritable en m\u00eame temps) et donc plusieurs processus qui sont vraiment trait\u00e9s simultan\u00e9ment. Cependant, le nombre de processus est toujours sup\u00e9rieur au nombre de processeurs et l'ordonnancement des processus par le syst\u00e8me d'exploitation est bien toujours n\u00e9cessaire.</p> <p></p> <p>Il y a trois \u00e9tats fondamentaux dans lesquels un processus peut se retrouver :</p> <ol> <li> <p>pr\u00eat (suspendu par le syst\u00e8me d'exploitation)</p> </li> <li> <p>\u00e9lu (en ex\u00e9cution)</p> </li> <li> <p>bloqu\u00e9 (en attente d'un \u00e9v\u00e9nement quelconque pour poursuivre)</p> </li> </ol> <p>Il y a quatre transitions possibles entre ces \u00e9tats.</p> <ul> <li> <p>Lorsqu'un processus est en train de s'ex\u00e9cuter (qu'il utilise le     microprocesseur), on dit que le processus est dans l'\u00e9tat \u00e9lu.</p> </li> <li> <p>Un processus qui se trouve dans l'\u00e9tat \u00e9lu peut demander \u00e0     acc\u00e9der \u00e0 une ressource pas forc\u00e9ment disponible instantan\u00e9ment (par     exemple lire une donn\u00e9e sur le disque dur). Le processus ne peut pas     poursuivre son ex\u00e9cution tant qu'il n'a pas obtenu cette     ressource. En attendant de recevoir cette ressource, il passe de     l'\u00e9tat \u00e9lu \u00e0 l'\u00e9tat bloqu\u00e9. (blocage)</p> </li> <li> <p>Lorsque le processus finit par obtenir la ressource attendue,     celui-ci peut potentiellement reprendre son ex\u00e9cution. Mais comme     les syst\u00e8mes d'exploitation permettent de g\u00e9rer plusieurs processus     \"en m\u00eame temps\", un seul processus peut se trouver dans un \u00e9tat     \u00e9lu (le microprocesseur ne peut \"s'occuper\" que d'un seul     processus \u00e0 la fois). Ainsi, quand un processus passe d'un \u00e9tat     \u00e9lu \u00e0 un \u00e9tat bloqu\u00e9, un autre processus peut alors \"prendre sa     place\" et passer dans l'\u00e9tat \u00e9lu. Un processus qui quitte     l'\u00e9tat bloqu\u00e9 ne repasse donc pas forc\u00e9ment \u00e0 l'\u00e9tat \u00e9lu, il peut     attendre que \"la place se lib\u00e8re\" et passer dans l'\u00e9tat pr\u00eat     (d\u00e9blocage).</p> </li> <li> <p>La transition de \u00e9lu \u00e0 pr\u00eat survient lorsque le processus en     cours a \u00e9puis\u00e9 la tranche de temps qui lui avait \u00e9t\u00e9 allou\u00e9e ; il     perd alors le processeur, redevient aussit\u00f4t pr\u00eat (suspension).</p> </li> </ul> <p>Le va-et-vient des transitions entre \u00e9lu et pr\u00eat est issu de l'ordonnanceur (scheduler) de processus du syst\u00e8me d'exploitation qui partage le temps entre tous les processus pr\u00e9sents dans la m\u00e9moire. C'est le \u00ab chef d'orchestre \u00bb qui d\u00e9cide quel processus tourne sur le processeur et qui \u00ab donne leur tour \u00bb \u00e0 chaque processus.</p> <p>La proc\u00e9dure de sauvegarde des variables utilis\u00e9es par le processus permet \u00e0 celui-ci d'\u00eatre plac\u00e9 dans la file d'attente des processus du syst\u00e8me.</p> <p>Un processus qui utilise une ressource R doit la \"lib\u00e9rer\" une fois qu'il a fini de l'utiliser afin de la rendre disponible pour les autres processus. Pour lib\u00e9rer une ressource, un processus doit obligatoirement \u00eatre dans un \u00e9tat \"\u00e9lu\".</p>"},{"location":"terminale/05_archi_SE/processus/processus_cours/#exemple-dordonnancement","title":"Exemple d'ordonnancement","text":"<p>L'ordonnanceur (qui fait partie du syst\u00e8me d'exploitation), divise le temps de processeur disponible en petits laps de temps (quantum de temps) et, \u00e0 chaque intervalle, il peut faire passer un processus de l'\u00e9tat elu \u00e0 pr\u00eat ou inversement.</p> <p></p> <p>Un bilan : la vid\u00e9o ci-dessous permet de r\u00e9sumer ce qui pr\u00e9c\u00e8de et d'approfondir ces notions.</p> <p>https://www.youtube.com/watch?v=bFqud0gcCHM</p>"},{"location":"terminale/05_archi_SE/processus/processus_cours/#3-les-processus-sous-linux","title":"3. Les processus sous Linux","text":"<p>La gestion des processus est d\u00e9pendante du syst\u00e8me d'exploitation et de son usage.</p> <p>Un processus peut appeler d'autres processus que l'on appelle sous-processus. On appelle le processus cr\u00e9ateur le p\u00e8re et les processus cr\u00e9\u00e9s, les fils. Les processus peuvent donc se structurer sous la forme d'une arborescence.</p> <p></p> <p>Au lancement du syst\u00e8me, il n'existe qu'un seul processus (init), qui est l'anc\u00eatre de tous les autres.</p> <p>Par exemple, init d\u00e9marre tous les processus n\u00e9cessaires pour permettre aux terminaux branch\u00e9s au syst\u00e8me d'\u00e9tablir une connexion et de lancer le shell de base servant \u00e0 la lecture des commandes de l'utilisateur. (Bash est l'interpr\u00e9teur par d\u00e9faut de la plupart des syst\u00e8mes d'exploitation GNU/Linux)</p> <p>Les commandes provenant alors des terminaux cr\u00e9ent d'autres processus qui se greffent \u00e0 l'arbre unique des processus du syst\u00e8me.</p> <p>Linux cr\u00e9e et maintient un certain nombre d'informations sur les processus en cours d'utilisation dans l'ordinateur.</p> <p>Dans cette table des processus, on retrouve presque toujours :</p> <ul> <li> <p>un identificateur unique : le PID (Process Identification). Ce PID est un nombre. Le premier processus cr\u00e9\u00e9 au d\u00e9marrage du syst\u00e8me \u00e0 pour PID 0, le second 1, le troisi\u00e8me 2... Le syst\u00e8me d'exploitation utilise un compteur qui est incr\u00e9ment\u00e9 de 1 \u00e0 chaque cr\u00e9ation de processus, le syst\u00e8me utilise ce compteur pour attribuer  les PID aux processus.</p> </li> <li> <p>le PPID (Parent Process Identification) qui permet de connaitre le processus parent du processus.</p> </li> <li> <p>le niveau de priorit\u00e9 du processus ;</p> </li> <li> <p>l'\u00e9tat du processus (en ex\u00e9cution, suspendu, etc.) ;</p> </li> <li> <p>la table de pointeurs sur les ressources utilis\u00e9es.</p> </li> </ul> <p>Dans un terminal Linux, la commande <code>ps</code> permet d'afficher la liste des processus actifs.</p> <p></p> <p>Parmi les colonnes affich\u00e9es, on rep\u00e8re : </p> <ul> <li><code>CMD</code> : nom de la commande qui a cr\u00e9\u00e9 le processus (par ordre chronologique) ;</li> <li><code>PID</code> : Process Identification ;</li> <li><code>PPID</code>: Parent Process Identification</li> </ul> <p>La commande <code>pstree</code> permet d'afficher les processus sous forme d'arbre :</p> <p></p> <p>La commande <code>top</code>, quant \u00e0 elle, affiche les processus en temps r\u00e9el, class\u00e9s par d\u00e9faut par ordre d\u00e9croissant de consommation de processeur.</p> <p></p> <p>Enfin, la commande <code>kill</code> permet de fermer un processus en le d\u00e9signant par son <code>PID</code>. Dans la situation de la derni\u00e8re capture d'\u00e9cran, la commande <code>kill 2669</code> fermera Firefox.</p>"},{"location":"terminale/05_archi_SE/processus/processus_cours/#4-notion-dinterblocage","title":"4. Notion d'interblocage","text":"<p>L'ex\u00e9cution d'un processus n\u00e9cessite un ensemble de ressources (espace m\u00e9moire centrale, espace disque, fichier, p\u00e9riph\u00e9riques, ...) qui lui sont attribu\u00e9es par le syst\u00e8me d'exploitation.</p> <p>D\u00e9finition</p> <p>Un ensemble de processus est en interblocage (deadlock)  si chaque processus attend un \u00e9v\u00e8nement que seul un autre processus de l'ensemble peut engendrer.</p> <p>Exemple d'interblocage</p> <p></p> <ul> <li>un processus Proc1 d\u00e9tient une ressource R1 et attend autre ressource R2 qui est utilis\u00e9e par un autre processus Proc2</li> <li> <p>le processus Proc2 d\u00e9tient la ressource R2 et attend la ressource R1.</p> <p>\u2192 On a une situation d'interblocage : (Proc1 attend Proc2 et Proc2 attend Proc1).</p> <p>Les deux processus vont attendre ind\u00e9finiment.</p> </li> </ul> <p>Pour \u00e9viter cela, il est n\u00e9cessaire :</p> <ul> <li> <p>D'\u00e9viter l'interblocage en allouant les ressources avec pr\u00e9caution. Si l'allocation d'une ressource peut conduire \u00e0 un interblocage, elle est retard\u00e9e jusqu'\u00e0 ce qu'il n'y ait plus de risque.</p> </li> <li> <p>Les d\u00e9tecter et y rem\u00e9dier.</p> </li> </ul> <p>Pour compl\u00e9ter et approfondir, lire les pages 218 \u00e0 225 du manuel (vous y apprendrez comment visualiser les processus sous Windows) et pages 230-231 pour l'interblocage.</p>"},{"location":"terminale/06_algo_1/","title":"S6-Algorithmique","text":""},{"location":"terminale/06_algo_1/#programme","title":"Programme","text":"Contenus Capacit\u00e9s attendues Commentaires Algorithmes sur les arbres binaires et sur les arbres binaires de recherche. Calculer la taille et la hauteur d'un arbre. Parcourir un arbre de diff\u00e9rentes fa\u00e7ons (ordres infixe, pr\u00e9fixe ou suffixe ; ordre en largeur d'abord). Rechercher une cl\u00e9 dans un arbre de recherche, ins\u00e9rer une cl\u00e9. Une structure de donn\u00e9es r\u00e9cursive adapt\u00e9e est utilis\u00e9e. L'exemple des arbres permet d'illustrer la programmation par classe. La recherche dans un arbre de recherche \u00e9quilibr\u00e9 est de co\u00fbt logarithmique. M\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb. \u00c9crire un algorithme utilisant la m\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb. La rotation d'une image bitmap d'un quart de tour avec un co\u00fbt en m\u00e9moire constant est un bon exemple. L'exemple du tri fusion permet \u00e9galement d'exploiter la r\u00e9cursivit\u00e9 et d'exhiber un algorithme de co\u00fbt en \\(n log_2 n\\) dans les pires des cas. <p>Les autres \u00e9l\u00e9ments du programme ci-dessous ne sont pas au programme de l'\u00e9preuve \u00e9crite et seront donc abord\u00e9s plus tard dans l'ann\u00e9e :</p> Contenus Capacit\u00e9s attendues Commentaires Algorithmes sur les graphes. Parcourir un graphe en profondeur d'abord, en largeur d'abord. Rep\u00e9rer la pr\u00e9sence d'un cycle dans un graphe. Chercher un chemin dans un graphe. Le parcours d'un labyrinthe et le routage dans Internet sont des exemples d'algorithme sur les graphes. L'exemple des graphes permet d'illustrer l'utilisation des classes en programmation. Programmation dynamique. Utiliser la programmation dynamique pour \u00e9crire un algorithme. Les exemples de l'alignement de s\u00e9quences ou du rendu de monnaie peuvent \u00eatre pr\u00e9sent\u00e9s. La discussion sur le co\u00fbt en m\u00e9moire peut \u00eatre d\u00e9velopp\u00e9e. Recherche textuelle. \u00c9tudier l'algorithme de Boyer-Moore pour la recherche d'un motif dans un texte. L'int\u00e9r\u00eat du pr\u00e9traitement du motif est mis en avant. L'\u00e9tude du co\u00fbt, difficile, ne peut \u00eatre exig\u00e9e"},{"location":"terminale/06_algo_1/rappels/","title":"S6 - Rappels d'algorithmique","text":"<p>Cette page regroupe quelques rappels importants. Revoir le cours de premi\u00e8re pour les d\u00e9tails.</p>"},{"location":"terminale/06_algo_1/rappels/#1-terminaison-et-correction","title":"1. Terminaison et Correction","text":"<ul> <li>Prouver la terminaison d'un algorithme, c'est prouver que l'algorithme se termine dans tous les cas. C'est notamment tr\u00e8s important lorsque l'algorithme comporte des boucles conditionnelles ou des appels r\u00e9cursifs.</li> <li>Prouver la correction d'un algorithme, c'est prouver que l'algorithme r\u00e9sout bien le probl\u00e8me demand\u00e9.</li> </ul> <p>Par exemple, dans le cas d'une boucle, on utilise un invariant de boucle : c'est une affirmation qui porte sur les valeurs des variables \u00e0 l'int\u00e9rieur de la boucle et qui reste vraie \u00e0 la fin de chaque tour de la boucle.</p> <p>Il faut d\u00e9montrer :</p> <ol> <li>Initialisation : l'affirmation est vraie avant le premier passage dans la boucle</li> <li>Conservation : si l'affirmation est vraie avant une it\u00e9ration, alors elle sera aussi vraie apr\u00e8s cette it\u00e9ration.</li> <li>Conclusion : une fois la boucle termin\u00e9e, l'affirmation est vraie.</li> </ol> <p>Exemple</p> <p>Consid\u00e9rons l'algorithme suivant qui calcule la puissance enti\u00e8re d'un nombre :</p> <p> fonction puissance(x : flottant, n : entier) : flottant p \\(\\leftarrow\\) 1 compteur \\(\\leftarrow\\) 0 tant que compteur &lt; n faire compteur \\(\\leftarrow\\) compteur + 1 p \\(\\leftarrow\\) p * x fin tant que retourner p </p> <p>Terminaison : Au d\u00e9part la variable \\(compteur\\) est initialis\u00e9e \u00e0 0. \u00c0 chaque passage dans la boucle, sa valeur augmente d'une unit\u00e9. La condition de sortie de boucle : \\(compteur\\geqslant n\\) sera donc r\u00e9alis\u00e9e en un nombre fini d'\u00e9tapes (ici \\(n\\) \u00e9tapes) et donc l'algorithme se termine.</p> <p>Correction : Consid\u00e9rons la propri\u00e9t\u00e9 \\(p=x^{compteur}\\) et montrons qu'il s'agit d'un invariant de boucle. </p> <ul> <li>Initialisation : Cette propri\u00e9t\u00e9 est vraie avec les valeurs initiales des variables car \\(x^0=1\\) et \\(p=1\\).</li> <li>Conservation : Si nous avons \\(p=x^{compteur}\\) avant une it\u00e9ration, alors nous avons \\(x^{compteur+1}=x^{compteur}\\times x = p\\times x\\). le passage dans la boucle augmente \\(compteur\\) de 1 et remplace \\(p\\) par \\(p\\times x\\). Apr\u00e8s l'it\u00e9ration, la propri\u00e9t\u00e9 \\(p=x^{compteur}\\) est donc encore vraie.</li> <li>Conclusion : En sortie de boucle, on a donc \\(p=x^{compteur}\\). Or on a aussi l'\u00e9galit\u00e9 \\(compteur = n\\) qui a provoqu\u00e9 la sortie de boucle. Finalement, nous avons donc \\(p=x^n\\), ce qui prouve que l'algorithme effectue bien l'op\u00e9ration attendue.</li> </ul>"},{"location":"terminale/06_algo_1/rappels/#2-complexite","title":"2. Complexit\u00e9","text":"<p>La dur\u00e9e d'ex\u00e9cution d'un programme traduisant un algorithme donn\u00e9 va d\u00e9pendre des performances de la machine sur laquelle le programme est ex\u00e9cut\u00e9, mais aussi du nombre d'instructions \u00e9l\u00e9mentaires mobilis\u00e9es lors de son ex\u00e9cution. Une partie de ce temps d'ex\u00e9cution provient donc de la fa\u00e7on dont l'algorithme est \u00e9crit et non de la fa\u00e7on dont il est programm\u00e9. </p> <p>On parle de complexit\u00e9 temporelle d'un algorithme (et non d'un programme) pour mesurer l'efficacit\u00e9 intrins\u00e8que de l'algorithme. Dans la pratique, il s'agit de compter le nombre d'op\u00e9rations \u00e9l\u00e9mentaires (affectations, comparaisons, calculs arithm\u00e9tiques, ...) effectu\u00e9es par l'algorithme.</p> <p>La complexit\u00e9 en temps d'un algorithme d\u00e9pend :</p> <ul> <li>de la taille des donn\u00e9es pass\u00e9es en param\u00e8tres : plus ces donn\u00e9es seront volumineuses, plus il faudra d'op\u00e9rations \u00e9l\u00e9mentaires pour les traiter. On notera \\(n\\) le nombre de donn\u00e9es \u00e0 traiter.</li> <li>de la donn\u00e9e en elle-m\u00eame, de la fa\u00e7on dont sont r\u00e9parties les diff\u00e9rentes valeurs qui la constituent. Par exemple, si on effectue une recherche s\u00e9quentielle d'un \u00e9l\u00e9ment dans une liste non tri\u00e9e, on parcourt un par un les \u00e9l\u00e9ments jusqu'\u00e0 trouver, ou pas, celui recherch\u00e9. Ce parcours peut s'arr\u00eater d\u00e8s le d\u00e9but si le premier \u00e9l\u00e9ment est \"le bon\". Mais on peut \u00e9galement \u00eatre amen\u00e9 \u00e0 parcourir la liste en entier si l'\u00e9l\u00e9ment cherch\u00e9 est en derni\u00e8re position, ou m\u00eame n'y figure pas.</li> </ul> <p>Cette remarque conduit \u00e0 pr\u00e9ciser la d\u00e9finition de la complexit\u00e9 en temps. On peut en effet distinguer deux formes de complexit\u00e9 en temps :</p> <ul> <li>la complexit\u00e9 dans le meilleur des cas : c'est la situation la plus favorable, par exemple : recherche d'un \u00e9l\u00e9ment situ\u00e9 \u00e0 la premi\u00e8re position d'une liste ;</li> <li>la complexit\u00e9 dans le pire des cas : c'est la situation la plus d\u00e9favorable, par exemple : recherche d'un \u00e9l\u00e9ment dans une liste alors qu'il n'y figure pas.</li> </ul> <p>On calculera le plus souvent la complexit\u00e9 dans le pire des cas, car elle est la plus pertinente. Il vaut mieux en effet toujours envisager le pire.</p>"},{"location":"terminale/06_algo_1/rappels/#ordres-de-grandeurs","title":"Ordres de grandeurs","text":"<p>Pour comparer des algorithmes, il n'est pas n\u00e9cessaire de calculer la valeur exacte de la complexit\u00e9, mais seulement un ordre de grandeur asymptotique, not\u00e9 en math\u00e9matiques \\(\\mathcal{O}\\) (notation \"grand O\"). La d\u00e9finition rigoureuse de cette notation n'est pas au programme de NSI. Il faut cependant en avoir une id\u00e9e intuitive : dire que la complexit\u00e9 d'un algorithme est en \\(\\mathcal{O}(n^2)\\), par exemple, signifie que cette complexit\u00e9 cro\u00eet, lorsque \\(n\\) devient grand, de la m\u00eame fa\u00e7on que la fonction carr\u00e9. Plus pr\u00e9cis\u00e9ment, elle est major\u00e9e par une fonction du type \\(c\\times n^2\\), o\u00f9 \\(c\\) est un r\u00e9el positif.</p> <p>Les classes de complexit\u00e9 les plus courantes sont les suivantes, de la meilleure \u00e0 la pire :</p> \\(\\mathcal{O}\\) Type de complexit\u00e9 Exemple \\(\\mathcal{O}(1)\\) constante Acc\u00e8s \u00e0 une cellule de tableau \\(\\mathcal{O}(\\log n)\\) logarithmique Recherche dichotomique \\(\\mathcal{O}(n)\\) lin\u00e9aire Recherche du maximum dans un tableau non tri\u00e9 \\(\\mathcal{O}(n\\log n)\\) quasi-lin\u00e9aire Tri fusion \\(\\mathcal{O}(n^2)\\) quadratique Parcours d'un tableau \u00e0 deux dimensions \\(\\mathcal{O}(n^3)\\) cubique Parcours d'un tableau \u00e0 trois dimensions \\(\\mathcal{O}(2^n)\\) exponentielle Calcul des termes de la suite de Fibonacci de fa\u00e7on na\u00efve r\u00e9cursive \\(\\mathcal{O}(n!)\\) factorielle Probl\u00e8me du voyageur de commerce <p>Exemple</p> <p>Reprenons l'algorithme du calcul de la puissance d'un nombre.</p> <p> fonction puissance(x : flottant, n : entier) : flottant p \\(\\leftarrow\\) 1 compteur \\(\\leftarrow\\) 0 tant que compteur &lt; n faire compteur \\(\\leftarrow\\) compteur + 1 p \\(\\leftarrow\\) p * x fin tant que retourner p </p> <p>Nous comptons la complexit\u00e9 en termes d'op\u00e9rations arithm\u00e9tiques : additions et multiplications. \u00c0 chaque passage dans la boucle, nous avons deux op\u00e9rations et la boucle est parcourue \\(n\\) fois . Nous avons donc au total une complexit\u00e9 de \\(2n\\) op\u00e9rations arithm\u00e9tiques, donc une complexit\u00e9 en \\(\\mathcal{O}(n)\\), lin\u00e9aire.</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/","title":"S6 - Ch. 1 Algorithmes sur les arbres","text":""},{"location":"terminale/06_algo_1/algos_arbres/cours/#1-calculer-la-taille-et-la-hauteur-dun-arbre-binaire","title":"1. Calculer la taille et la hauteur d'un arbre binaire","text":"<p>Nous avons d\u00e9j\u00e0 rencontr\u00e9 ces algorithmes, sous la forme de programmes Python, dans le chapitre sur les arbres binaires. On s'int\u00e9resse ici \u00e0 leur \u00e9tude algorithmique.</p> <p>D'une fa\u00e7on g\u00e9n\u00e9rale, la structure d'arbre binaire est particuli\u00e8rement adapt\u00e9e \u00e0 la mise en \u0153uvre d'algorithmes r\u00e9cursifs. Dans la suite tous les arbres sont binaires.</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#taille-dun-arbre","title":"Taille d'un arbre","text":"<p>La taille d'un arbre est son nombre total de n\u0153uds.</p> <p>Algorithme de calcul de la taille d'un arbre</p> <p> fonction taille(arbre : arbre binaire) : entier si arbre est vide alors retourner 0 sinon retourner 1 + taille(sous-arbre gauche de arbre) + taille(sous-arbre droit de arbre) fin si </p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#hauteur-dun-arbre","title":"Hauteur d'un arbre","text":"<p>La hauteur d'un arbre est la profondeur de son n\u0153ud le plus profond. Par convention, si l'arbre est vide, sa hauteur vaut 0, si l'arbre n'est compos\u00e9 que d'un n\u0153ud racine, sa hauteur vaut 1.</p> <p>Algorithme de calcul de la hauteur d'un arbre</p> <p> fonction hauteur(arbre : arbre binaire) : entier si arbre est vide alors retourner 0 sinon retourner 1 + max(hauteur(sous-arbre gauche de arbre), hauteur(sous-arbre droit de arbre)) fin si </p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#2-parcourir-un-arbre","title":"2. Parcourir un arbre","text":"<p>Remarque : en anglais les parcours en profondeur sont appel\u00e9s depth-first search (DFS) et les parcours en largeur sont appel\u00e9s breadth-first search (BFS).</p> <p>Tous ces algorithmes de parcours ont en commun de visiter tous les sommets d'un arbre, mais pas dans le m\u00eame ordre. La structure r\u00e9cursive de la structure de donn\u00e9es arbre binaire permet de d\u00e9finir tr\u00e8s naturellement ces algorithmes de fa\u00e7on r\u00e9cursive. Chacun des algorithmes de parcours sont d\u00e9finis sous forme de fonctions qui comportent deux appels r\u00e9cursifs et qui visitent \u00e0 chaque fois un seul sommet. Si on note \\(n\\) la taille de l'arbre (le nombre de sommets), on aura donc pour tous ces algorithmes une complexit\u00e9 en \\(\\mathcal{O}(n)\\).</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#21-parcours-en-profondeur-avec-ordre-prefixe","title":"2.1. Parcours en profondeur avec ordre pr\u00e9fixe","text":"<p>D\u00e9finition : ordre pr\u00e9fixe</p> <p>On appelle parcours pr\u00e9fixe un parcours dans lequel chaque noeud est visit\u00e9, puis chacun de ses fils : </p> <ul> <li>on visite la racine ;</li> <li>ensuite on visite r\u00e9cursivement le sous-arbre gauche ;</li> <li>enfin on visite r\u00e9cursivement le sous-arbre droit.</li> </ul> <p>Le parcours est dans l'ordre noeud - gauche - droit</p> <p>Exemple</p> <p></p> <p>Ordre de parcours des sommets : C-Z-U-R-G-Q-H.</p> <p>Algorithme de parcours pr\u00e9fixe en pseudo-code</p> <p> fonction parcoursPrefixe(arbre : arbre binaire) si arbre n'est pas vide alors afficher racine de arbre parcoursPrefixe(sous-arbre gauche de arbre) parcoursPrefixe(sous-arbre droit de arbre) fin si </p> <p>Impl\u00e9mentation en Python : Trois versions sont propos\u00e9es ci-dessous. La premi\u00e8re version est r\u00e9cursive et reprend \u00e0 l'identique la structure de l'algorithme en pseudo-code. La seconde est \u00e9galement r\u00e9cursive et a \u00e9t\u00e9 l\u00e9g\u00e8rement modifi\u00e9e pour retourner les sommets visit\u00e9s sous forme d'une liste, ce qui peut \u00eatre utile pour un traitement ult\u00e9rieur. La troisi\u00e8me version, plus difficile, est it\u00e9rative et retourne \u00e9galement les sommets visit\u00e9s sous forme d'une liste. Elle utilise une structure de pile (sous forme de liste).</p> Version r\u00e9cursive avec simple affichageVersion r\u00e9cursive avec retour listeVersion it\u00e9rative avec retour liste \ud83d\udc0d Script Python<pre><code>def parcoursPrefixe(arbre: ArbreBinaire):\n    if not arbre.estVide():\n        print(arbre.getRacine())\n        parcoursPrefixe(arbre.getSousArbreGauche())\n        parcoursPrefixe(arbre.getSousArbreDroit())\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursPrefixe(arbre: ArbreBinaire, liste = []):\n    if not arbre.estVide():\n        liste.append(arbre.getRacine())\n        parcoursPrefixe(arbre.getSousArbreGauche(), liste)\n        parcoursPrefixe(arbre.getSousArbreDroit(), liste)\n        return liste\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursPrefixe(arbre: ArbreBinaire) -&gt; list:\n    # Si l'arbre est vide, on arr\u00eate le parcours\n    if arbre.estVide():\n        return []\n    # Liste pour stocker les valeurs des noeuds\n    valeurs = []\n    # Parcours de l'arbre en utilisant une pile\n    pile = [arbre]\n    while pile != []:\n        noeud = pile.pop()\n        valeurs.append(noeud.getRacine())\n        # On ajoute les enfants dans la pile dans l'ordre inverse pour\n        # obtenir le parcours en profondeur pr\u00e9fixe\n        if not noeud.getSousArbreDroit().estVide():\n            pile.append(noeud.getSousArbreDroit())\n        if not noeud.getSousArbreGauche().estVide():\n            pile.append(noeud.getSousArbreGauche())\n    # Renvoie la liste des valeurs des noeuds parcourus\n    return valeurs\n</code></pre> <p>D\u00e9rouler \u00e0 la main, en mode papier-crayon, l'ex\u00e9cution de ces trois programmes est un tr\u00e8s bon exercice !</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#21-parcours-en-profondeur-avec-ordre-infixe","title":"2.1. Parcours en profondeur avec ordre infixe","text":"<p>D\u00e9finition : ordre infixe</p> <p>On appelle parcours infixe un parcours dans lequel chaque noeud est visit\u00e9 entre les noeuds de son sous arbre gauche et ceux de son sous arbre droit : </p> <ul> <li>on visite r\u00e9cursivement le sous-arbre gauche ;</li> <li>ensuite on visite la racine ;</li> <li>enfin on visite r\u00e9cursivement le sous-arbre droit.</li> </ul> <p>Le parcours est dans l'ordre gauche - noeud - droit</p> <p>Exemple</p> <p></p> <p>Ordre de parcours des sommets : U-Z-R-G-C-H-Q.</p> <p>Algorithme de parcours infixe en pseudo-code</p> <p> fonction parcoursInfixe(arbre : arbre binaire) si arbre n'est pas vide alors parcoursInfixe(sous-arbre gauche de arbre) afficher racine de arbre parcoursInfixe(sous-arbre droit de arbre) fin si </p> <p>Impl\u00e9mentation en Python : Trois versions sont propos\u00e9es ci-dessous. La premi\u00e8re version est r\u00e9cursive et reprend \u00e0 l'identique la structure de l'algorithme en pseudo-code. La seconde est \u00e9galement r\u00e9cursive et a \u00e9t\u00e9 l\u00e9g\u00e8rement modifi\u00e9e pour retourner les sommets visit\u00e9s sous forme d'une liste, ce qui peut \u00eatre utile pour un traitement ult\u00e9rieur. La troisi\u00e8me version, plus difficile, est it\u00e9rative et retourne \u00e9galement les sommets visit\u00e9s sous forme d'une liste. Elle utilise une structure de pile (sous forme de liste).</p> Version r\u00e9cursive avec simple affichageVersion r\u00e9cursive avec retour listeVersion it\u00e9rative avec retour liste \ud83d\udc0d Script Python<pre><code>def parcoursInfixe(arbre: ArbreBinaire):\n    if not arbre.estVide():\n        parcoursInfixe(arbre.getSousArbreGauche())\n        print(arbre.getRacine())\n        parcoursInfixe(arbre.getSousArbreDroit())\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursInfixe(arbre: ArbreBinaire, liste = []):\n    if not arbre.estVide():\n        parcoursInfixe(arbre.getSousArbreGauche(), liste)\n        liste.append(arbre.getRacine())\n        parcoursInfixe(arbre.getSousArbreDroit(), liste)\n        return liste\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursInfixe(arbre: ArbreBinaire) -&gt; list:\n    # Si l'arbre est vide, on arr\u00eate le parcours\n    if arbre.estVide():\n        return []\n    # Liste pour stocker les valeurs des noeuds\n    valeurs = []\n    # Parcours de l'arbre en utilisant une pile\n    pile = []\n    noeud = arbre\n    while not noeud.estVide() or pile != []:\n        # Si l'on a atteint une feuille, on r\u00e9cup\u00e8re la valeur et on revient en arri\u00e8re\n        if noeud.estVide():\n            noeud = pile.pop()\n            valeurs.append(noeud.getRacine())\n            noeud = noeud.getSousArbreDroit()\n        else:\n            # Sinon, on parcourt le sous-arbre gauche et on enregistre l'\u00e9tat actuel\n            # pour pouvoir revenir plus tard\n            pile.append(noeud)\n            noeud = noeud.getSousArbreGauche()\n    return valeurs\n</code></pre> <p>D\u00e9rouler \u00e0 la main, en mode papier-crayon, l'ex\u00e9cution de ces trois programmes est un tr\u00e8s bon exercice !</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#23-parcours-en-profondeur-avec-ordre-suffixe","title":"2.3. Parcours en profondeur avec ordre suffixe","text":"<p>D\u00e9finition : ordre suffixe</p> <p>On appelle parcours suffixe (ou postfixe) un parcours dans lequel chaque noeud est visit\u00e9 apr\u00e8s les noeuds de son sous arbre gauche et ceux de son sous arbre droit : </p> <ul> <li>on visite r\u00e9cursivement le sous-arbre gauche ;</li> <li>ensuite on visite r\u00e9cursivement le sous-arbre droit ;</li> <li>ensuite on visite la racine.</li> </ul> <p>Le parcours est dans l'ordre gauche - droit - noeud</p> <p>Exemple</p> <p></p> <p>Ordre de parcours des sommets : U-G-R-Z-H-Q-C.</p> <p>Algorithme de parcours suffixe en pseudo-code</p> <p> fonction parcoursSuffixe(arbre : arbre binaire) si arbre n'est pas vide alors parcoursSuffixe(sous-arbre gauche de arbre) parcoursSuffixe(sous-arbre droit de arbre) afficher racine de arbre fin si </p> <p>Exercice</p> <p>Voici deux arbres binaires. Pour chacun d'entre eux, indiquer l'ordre de parcours des sommets pour chacun de types de parcours en profondeur d\u00e9finis ci-dessus.</p> <p></p> <p>Impl\u00e9mentation en Python : Trois versions sont propos\u00e9es ci-dessous. La premi\u00e8re version est r\u00e9cursive et reprend \u00e0 l'identique la structure de l'algorithme en pseudo-code. La seconde est \u00e9galement r\u00e9cursive et a \u00e9t\u00e9 l\u00e9g\u00e8rement modifi\u00e9e pour retourner les sommets visit\u00e9s sous forme d'une liste, ce qui peut \u00eatre utile pour un traitement ult\u00e9rieur. La troisi\u00e8me version, plus difficile, est it\u00e9rative et retourne \u00e9galement les sommets visit\u00e9s sous forme d'une liste. Elle utilise une structure de pile (sous forme de liste).</p> Version r\u00e9cursive avec simple affichageVersion r\u00e9cursive avec retour listeVersion it\u00e9rative avec retour liste \ud83d\udc0d Script Python<pre><code>def parcoursSuffixe(arbre: ArbreBinaire):\n    if not arbre.estVide():\n        parcoursSuffixe(arbre.getSousArbreGauche())\n        parcoursSuffixe(arbre.getSousArbreDroit())\n        print(arbre.getRacine())\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursSuffixe(arbre: ArbreBinaire, liste = []):\n    if not arbre.estVide():\n        parcoursSuffixe(arbre.getSousArbreGauche(), liste)\n        parcoursSuffixe(arbre.getSousArbreDroit(), liste)\n        liste.append(arbre.getRacine())\n        return liste\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcoursSuffixe(arbre: ArbreBinaire) -&gt; list:\n    # Si l'arbre est vide, on arr\u00eate le parcours\n    if arbre.estVide():\n        return []\n    # Liste pour stocker les valeurs des noeuds\n    valeurs = []\n    # Parcours de l'arbre en utilisant une pile\n    pile = [arbre]\n    while pile != []:\n        # On d\u00e9pile et on note l'\u00e9l\u00e9ment en haut de la pile\n        noeud = pile.pop()\n        valeurs.append(noeud.getRacine())\n        # On empile les sous arbres gauche et droits s'ils existent\n        # Droit sera trait\u00e9 avant Gauche car on parcours \u00e0 l'envers\n        if not noeud.getSousArbreGauche().estVide():\n            pile.append(noeud.getSousArbreGauche())\n        if not noeud.getSousArbreDroit().estVide():\n            pile.append(noeud.getSousArbreDroit())\n    # On remet \u00e0 l'endroit\n    valeurs.reverse()\n    return valeurs\n</code></pre> <p>D\u00e9rouler \u00e0 la main, en mode papier-crayon, l'ex\u00e9cution de ces trois programmes est un tr\u00e8s bon exercice !</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#24-parcours-en-largeur-dabord","title":"2.4. Parcours en largeur d'abord","text":"<p>D\u00e9finition : parcours en largeur d'abord</p> <p>On appelle parcours en largeur d'abord un parcours dans lequel les noeuds sont visit\u00e9s par ordre de niveaux croissant, de gauche \u00e0 droite.</p> <p>Exemple</p> <p></p> <p>Ordre de parcours des sommets : C-Z-Q-U-R-H-G.</p> <p>Le parcours en largeur est simple \u00e0 comprendre visuellement, mais il est plus difficile \u00e0 traduire par un algorithme, car il n'exploite pas la d\u00e9finition r\u00e9cursive des arbres binaires.</p> <p>Nous utiliserons une file pour effectuer le parcours en largeur d'un arbre binaire.</p> <p>Algorithme de parcours en largeur en pseudo-code</p> <p> fonction parcoursLargeur(arbre : arbre binaire) cr\u00e9er une liste de r\u00e9sultats vide si arbre n'est pas vide alors cr\u00e9er une file vide ajouter arbre \u00e0 la file tant que la file n'est pas vide faire noeud \\(\\leftarrow\\) d\u00e9filer le premier \u00e9l\u00e9ment de la file ajouter l'\u00e9tiquette de noeud \u00e0 la liste de r\u00e9sultats si noeud a un fils gauche alors ajouter le fils gauche de noeud \u00e0 la file fin si si noeud a un fils droit alors ajouter le fils droit de noeud \u00e0 la file fin si fin tant que fin si retourner la liste de r\u00e9sultats </p> <p>Traduction en Python :</p> \ud83d\udc0d Script Python<pre><code>def parcoursLargeur(arbre: ArbreBinaire()) -&gt; list:\n    valeurs = []\n    if not arbre.estVide():\n        file = []\n        file.append(arbre)\n        while file != []:\n            noeud = file.pop(0)\n            valeurs.append(noeud.getRacine())\n            if not noeud.getSousArbreGauche().estVide():\n                file.append(noeud.getSousArbreGauche())\n            if not noeud.getSousArbreDroit().estVide():\n                file.append(noeud.getSousArbreDroit())\n    return valeurs\n</code></pre> <p>Une fois encore, d\u00e9rouler \u00e0 la main, en mode papier-crayon, l'ex\u00e9cution de ce programme est un tr\u00e8s bon exercice !</p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#3-insertion-dune-clef-dans-un-arbre-de-recherche","title":"3. Insertion d'une clef dans un arbre de recherche","text":"<p>On s'int\u00e9resse maintenant aux arbres binaires de recherche.</p> <p>Nous avons d\u00e9j\u00e0 utilis\u00e9 cette structure de donn\u00e9es dans la s\u00e9quence 4 sur les arbres. Notre module <code>structures.py</code> d\u00e9finit la structure d'arbre binaire de recherche par une classe <code>ABR</code> qui poss\u00e8de une m\u00e9thode <code>insere</code> qui ins\u00e8re une clef dans l'arbre en pr\u00e9servant la structure ABR.</p> <p>Voici en pseudo-code l'algorithme utilis\u00e9 par cette m\u00e9thode. L'insertion d'une clef va se faire au niveau d'une feuille, donc au bas de l'arbre. Il n'est pourtant pas n\u00e9cessaire de descendre manuellement dans l'arbre jusqu'au bon endroit car nous exploitons la structure \u00e0 la fois r\u00e9cursive et ordonn\u00e9e d'un ABR : il suffit de distinguer dans lequel des deux sous-arbres gauche et droit doit se trouver la future clef, et d'appeler r\u00e9cursivement la fonction d'insertion dans le sous-arbre en question.</p> <p>Algorithme de parcours en largeur en pseudo-code</p> <p> fonction insere(arbre : ABR, valeur) si arbre est vide alors d\u00e9finir la racine de arbre avec valeur comme clef retourner arbre sinon clef \\(\\leftarrow\\) clef de la racine de arbre si valeur est inf\u00e9rieure ou \u00e9gale \u00e0 clef sous-arbre gauche de arbre \\(\\leftarrow\\) insere(sous-arbre gauche de arbre, valeur) sinon sous-arbre droit de arbre \\(\\leftarrow\\) insere(sous-arbre droit de arbre, valeur) fin si fin si retourner arbre </p> <p>Exercice</p> <p>On consid\u00e8re l'ABR repr\u00e9sent\u00e9 ci-dessous. D\u00e9rouler \u00e0 la main l'ex\u00e9cution de l'algorithme ci-dessus pour ins\u00e9rer la valeur 3 dans cet arbre, puis la valeur 11.</p> <p></p>"},{"location":"terminale/06_algo_1/algos_arbres/cours/#4-recherche-dune-clef-dans-un-arbre-de-recherche","title":"4. Recherche d'une clef dans un arbre de recherche","text":"<p>Notre module <code>structure.py</code>, dans sa version d\u00e9finitive, comporte une fonction <code>appartient_ABR</code> qui teste l'appartenance d'un \u00e9l\u00e9ment donn\u00e9 en argument \u00e0 un ABR donn\u00e9 en argument et renvoie un bool\u00e9en.</p> <p>Voici le code Python de cette fonction.</p> \ud83d\udc0d Script Python<pre><code>def appartientABR(element, arbre) -&gt; bool:\n\"\"\"teste l'appartenance d'un \u00e9l\u00e9ment \u00e0 un ABR\"\"\"\n    if arbre is None:\n        return False\n    elif element == arbre.getRacine():\n        return True\n    else:\n        if arbre.getRacine() is not None:\n            if element &lt; arbre.getRacine():\n                return appartientABR(element, arbre.getSousArbreGauche())\n            else:\n                return appartientABR(element, arbre.getSousArbreDroit())\n</code></pre> <p>Cette fonction exploite \u00e0 la fois la structure r\u00e9cursive et la structure ordonn\u00e9e d'un ABR afin de n'effectuer qu'un appel r\u00e9cursif \u00e0 chaque passage.</p> <p>D\u00e9terminons une \u00e9valuation de sa complexit\u00e9 temporelle, dans le pire des cas, dans le cas particulier d'un arbre \u00e9quilibr\u00e9.</p> <p>On note \\(n\\) la taille de l'arbre, c'est-\u00e0-dire son nombre de noeuds. Au d\u00e9part, nous avons donc \\(n\\) noeuds \u00e0 explorer. Apr\u00e8s chaque examen d'un noeud, le nombre de noeuds restant \u00e0 explorer est divis\u00e9 par 2.</p> <p></p> <p>Dans le pire des cas, il faudra parcourir tous les \u00e9tages de l'arbre pour trouver la clef (qui est alors une feuille) ou pour constater qu'elle n'est pas dans l'arbre. On va donc parcourir au total \\(h\\) noeuds, o\u00f9 \\(h\\) est la hauteur de l'arbre. </p> <p>Or, nous avons vu que pour un arbre complet, nous avons la relation : \\(n=2^h-1\\) \u00e9quivalente \u00e0 \\(2^h=n+1\\) et donc \\(h=\\log_2(n+1)\\).</p> <p>La complexit\u00e9 de la recherche d'une valeur dans un ABR est donc en \\(\\mathcal{O}(log_2(n))\\). Il s'agit d'une complexit\u00e9 tr\u00e8s performante : par exemple, pour un arbre de taille 10000, 14 \u00e9tapes suffiront.</p> <p>\u00c0 retenir</p> <p>La complexit\u00e9 temporelle de la recherche d'une valeur dans un ABR \u00e9quilibr\u00e9 est de l'ordre de \\(\\log_2(n)\\).</p> <p>Remarque : </p> <ul> <li>Cet algorithme est \u00e0 rapprocher de l'algorithme de recherche dichotomique d'une valeur dans un tableau tri\u00e9, \u00e9tudi\u00e9 en premi\u00e8re.</li> </ul>"},{"location":"terminale/06_algo_1/algos_arbres/exos/","title":"S6 - Ch. 1 Algorithmes sur les arbres - Exercices","text":""},{"location":"terminale/06_algo_1/algos_arbres/exos/#exercices-tires-des-annales","title":"Exercices tir\u00e9s des annales","text":"<ul> <li>Sujet z\u00e9ro 2021 - Exercice 3</li> <li>Am\u00e9rique du Nord 2021 sujet 1 - Exercice 4</li> <li>Centres \u00e9trangers 2021 sujet 1 - Exercice 3</li> <li>M\u00e9tropole Candidats Libres 2021 sujet 2 - Exercice 3</li> </ul>"},{"location":"terminale/06_algo_1/diviser_pour_regner/cours/","title":"S6 - Ch. 2 M\u00e9thode \"Diviser pour r\u00e9gner\"","text":""},{"location":"terminale/06_algo_1/diviser_pour_regner/cours/#1-le-principe","title":"1. Le principe","text":"<p>La m\u00e9thode \"diviser pour r\u00e9gner\" (divide and conquer en anglais) consiste \u00e0 diviser un probl\u00e8me complexe en plusieurs sous-probl\u00e8mes plus simples, puis \u00e0 r\u00e9soudre ces sous-probl\u00e8mes s\u00e9par\u00e9ment avant de les combiner pour obtenir la solution finale du probl\u00e8me initial. Cette m\u00e9thode permet souvent de simplifier les calculs et de trouver des solutions plus rapidement que si on essayait de r\u00e9soudre le probl\u00e8me dans son ensemble. Elle est utilis\u00e9e dans de nombreux domaines, tels que l'informatique, les math\u00e9matiques et les sciences de l'ing\u00e9nieur.</p> <p>Cette m\u00e9thode peut par exemple permettre de parall\u00e9liser le traitement des sous-probl\u00e8mes, ce qui peut acc\u00e9l\u00e9rer encore davantage la recherche de solutions.</p> <p>Les inconv\u00e9nients : la n\u00e9cessit\u00e9 de d\u00e9composer un probl\u00e8me complexe en sous-probl\u00e8mes, ce qui peut prendre du temps et n\u00e9cessiter une certaine expertise. De plus, il peut \u00eatre difficile de combiner les solutions des sous-probl\u00e8mes pour obtenir une solution finale pour le probl\u00e8me initial. En cons\u00e9quence, la m\u00e9thode \"diviser pour r\u00e9gner\" peut ne pas \u00eatre adapt\u00e9e \u00e0 tous les types de probl\u00e8mes et peut ne pas \u00eatre la plus efficace dans certains cas.</p>"},{"location":"terminale/06_algo_1/diviser_pour_regner/cours/#2-exemple","title":"2. Exemple","text":"<p>Nous avons d\u00e9j\u00e0 rencontr\u00e9 cette m\u00e9thode : recherche dichotomique dans une ABR et tous les algorithmes de type \"dichotomie\" (rencontr\u00e9s en math\u00e9matiques par exemple).</p> <p>L'algorithme de tri fusion (merge sort en anglais) est un algorithme de tri utilis\u00e9 pour trier des \u00e9l\u00e9ments dans un ordre croissant ou d\u00e9croissant. Il fonctionne en divisant r\u00e9cursivement la liste d'\u00e9l\u00e9ments \u00e0 trier en sous-listes plus petites jusqu'\u00e0 ce qu'il ne reste plus qu'une seule valeur dans chaque sous-liste. Ces sous-listes sont ensuite fusionn\u00e9es en une seule liste tri\u00e9e en comparant les valeurs de chaque sous-liste et en pla\u00e7ant les valeurs plus petites en premier.</p> <p>Il s'agit d'une utilisation classique de la m\u00e9thode \"diviser pour r\u00e9gner\" : \u00e0 chaque \u00e9tape, on appelle r\u00e9cursivement la m\u00eame fonction, mais avec une liste dont la taille a \u00e9t\u00e9 divis\u00e9e par deux.</p> <p>Voici une description de cet algorithme en pseudo-code :</p> Pseudo code<pre><code>fonction tri_fusion(liste : tableau d'entiers) -&gt; tableau d'entiers\n    si longueur(liste) &lt;= 1\n        retourner liste\n    sinon\n        milieu = longueur(liste) / 2\n        liste_gauche = tri_fusion(liste[1...milieu])\n        liste_droite = tri_fusion(liste[milieu+1...longueur(liste)])\n        retourner fusionner(liste_gauche, liste_droite)\n\nfonction fusionner(liste_gauche : tableau d'entiers, liste_droite : tableau d'entiers) -&gt; tableau d'entiers\n    // Initialiser les indices des sous-listes et de la liste originale\n    i = 0\n    j = 0\n    liste_fus = []\n\n    // Fusionner les deux sous-listes en comparant les \u00e9l\u00e9ments de chaque liste\n    tant que i &lt; longueur(liste_droite) et j &lt; longueur(liste_gauche)\n        si liste_droite[i] &lt;= liste_gauche[j]\n            ajouter liste_droite[i] \u00e0 liste_fus\n            i = i + 1\n        sinon\n            ajouter liste_gauche[j] \u00e0 liste_fus\n            j = j + 1\n\n    // Copier les \u00e9l\u00e9ments restants de la liste_droite (s'il y en a)\n    tant que i &lt; longueur(liste_droite)\n        ajouter liste_droite[i] \u00e0 liste_fus\n        i = i + 1\n\n    // Copier les \u00e9l\u00e9ments restants de la liste_gauche (s'il y en a)\n    tant que j &lt; longueur(liste_gauche)\n        ajouter liste_gauche[j] \u00e0 liste_fus\n        j = j + 1\n\n    // Retourner la liste fusionn\u00e9e\n    retourner liste_fus\n</code></pre> <p>Exercice</p> <p>D\u00e9rouler \u00e0 la main l'ex\u00e9cution de cet algorithme avec la liste [5, 2, 4, 6, 1, 3]. Pr\u00e9senter ce d\u00e9roulement sous forme d'un arbre.</p> <p>Pour utiliser cet algorithme, on peut appeler la fonction <code>tri_fusion</code> en lui passant la liste d'entiers \u00e0 trier.</p> <p>Impl\u00e9mentation en Python :</p> \ud83d\udc0d Script Python<pre><code>def tri_fusion(liste):\n    if len(liste) &lt;= 1:\n        return liste\n    else:\n        milieu = len(liste) // 2\n        liste_gauche = tri_fusion(liste[:milieu])\n        liste_droite = tri_fusion(liste[milieu:])\n        return fusionner(liste_gauche, liste_droite)\n\n\ndef fusionner(liste_gauche, liste_droite):\n    # Initialiser les indices des sous-listes et de la liste originale\n    i = 0\n    j = 0\n    liste_fus =  []\n\n    # Fusionner les deux sous-listes en comparant les \u00e9l\u00e9ments de chaque liste\n    while i &lt; len(liste_droite) and j &lt; len(liste_gauche):\n        if liste_droite[i] &lt;= liste_gauche[j]:\n            liste_fus.append(liste_droite[i])\n            i = i + 1\n        else:\n            liste_fus.append(liste_gauche[j])\n            j = j + 1\n    # Copier les \u00e9l\u00e9ments restants de la liste_droite (s'il y en a)\n    while i &lt; len(liste_droite):\n        liste_fus.append(liste_droite[i])\n        i = i + 1\n\n    # Copier les \u00e9l\u00e9ments restants de la liste_gauche (s'il y en a)\n    while j &lt; len(liste_gauche):\n        liste_fus.append(liste_gauche[j])\n        j = j + 1\n\n    # Retourner la liste fusionn\u00e9e\n    return liste_fus\n</code></pre> <p>Test du programme en console :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; liste = [5, 2, 4, 6, 1, 3]\n&gt;&gt;&gt; tri_fusion(liste)\n&gt;&gt;&gt; print(liste)\n[1, 2, 3, 4, 5, 6]\n</code></pre> <p>Visualisation de l'ex\u00e9cution avec Python Tutor : </p>"},{"location":"terminale/06_algo_1/diviser_pour_regner/cours/#complexite-de-lalgorithme","title":"Complexit\u00e9 de l'algorithme","text":"<p>L'aspect \"dichotomique\" de l'algorithme correspond \u00e0 une complexit\u00e9 en \\(\\log_2 n\\), o\u00f9 \\(n\\) est la taille de la liste \u00e0 trier. Cependant, la fonction de fusion de deux listes tri\u00e9es est, elle en \\(\\mathcal{O}(n)\\).</p> <p>Au final, on a donc le r\u00e9sultat suivant :</p> <p>Complexit\u00e9 de l'algorithme de tri fusion</p> <p>La complexit\u00e9 (temporelle) de l'algorithme de tri fusion est en \\(\\mathcal{O}(n\\log n)\\), o\u00f9 \\(n\\) est la taille de la liste \u00e0 trier.</p> <p>Il s'agit donc d'une complexit\u00e9 quasi-lin\u00e9aire.</p> <p>Comme nous l'avons vu dans les rappels d'algorithmique, une telle complexit\u00e9 est bien meilleure qu'une complexit\u00e9 quadratique et moins bonne qu'une complexit\u00e9 lin\u00e9aire, comme illustr\u00e9 ci-dessous.</p> <p></p> <p>Pour rappel, les algorithmes de tri \u00e9tudi\u00e9s en premi\u00e8re (tri par insertion et tri pas s\u00e9lection) sont de co\u00fbt quadratique dans le pire des cas.</p>"},{"location":"terminale/06_algo_1/diviser_pour_regner/exos/","title":"S6 - Ch. 2 M\u00e9thode \"Diviser pour r\u00e9gner\" - Exercices","text":""},{"location":"terminale/06_algo_1/diviser_pour_regner/exos/#exercices-tires-des-annales","title":"Exercices tir\u00e9s des annales","text":"<ul> <li>M\u00e9tropole Candidats Libres 2021 Sujet 1 - Exercice 5</li> <li>M\u00e9tropole 2021 Sujet 1 - Exercice 4</li> <li>M\u00e9tropole 2022 Sujet 1 - Exercice 4</li> </ul>"},{"location":"terminale/07_reseaux/","title":"S7-R\u00e9seaux","text":""},{"location":"terminale/07_reseaux/#programme-officiel","title":"Programme officiel","text":"Contenus Capacit\u00e9s attendues Commentaires Protocoles de routage. Identifier, suivant le protocole de routage utilis\u00e9, la route emprunt\u00e9e par un paquet. En mode d\u00e9branch\u00e9, les tables de routage \u00e9tant donn\u00e9es, on se r\u00e9f\u00e8re au nombre de sauts (protocole RIP) ou au co\u00fbt des routes (protocole OSPF). Le lien avec les algorithmes de recherche de chemin sur un graphe est mis en \u00e9vidence."},{"location":"terminale/07_reseaux/cours_routage/","title":"S7 - Ch. 1 Routage","text":""},{"location":"terminale/07_reseaux/cours_routage/#1-introduction-aux-protocoles-de-routage","title":"1. Introduction aux protocoles de routage","text":"<p>Les protocoles de routage sont des algorithmes utilis\u00e9s par les \u00e9quipements r\u00e9seau pour acheminer les donn\u00e9es d'un point \u00e0 un autre dans un r\u00e9seau informatique. Ils permettent de d\u00e9terminer la meilleure route \u00e0 suivre pour atteindre la destination finale et de transmettre les donn\u00e9es de mani\u00e8re efficace et fiable.</p> <p>Il existe plusieurs types de protocoles de routage, qui peuvent \u00eatre class\u00e9s selon leur mode de fonctionnement :</p> <ul> <li> <p>Les protocoles de routage statiques : dans ce cas, les routes sont configur\u00e9es manuellement par l'administrateur r\u00e9seau et ne sont pas modifi\u00e9es par la suite. Le protocole de routage statique est g\u00e9n\u00e9ralement utilis\u00e9 dans les petits r\u00e9seaux ou lorsque la topologie du r\u00e9seau est stable.</p> </li> <li> <p>Les protocoles de routage dynamiques : dans ce cas, les routes sont d\u00e9termin\u00e9es de mani\u00e8re automatique gr\u00e2ce \u00e0 l'\u00e9change de messages entre les \u00e9quipements r\u00e9seau. Les protocoles de routage dynamiques sont utilis\u00e9s dans les r\u00e9seaux de grande envergure ou lorsque la topologie du r\u00e9seau est souvent modifi\u00e9e.</p> </li> <li> <p>Les protocoles de routage hybrides : il s'agit d'une combinaison des protocoles de routage statiques et dynamiques, avec une utilisation mixte de routes configur\u00e9es manuellement et de routes d\u00e9termin\u00e9es de mani\u00e8re automatique.</p> </li> </ul> <p>Les protocoles de routage sont utilis\u00e9s dans tous les types de r\u00e9seaux, qu'il s'agisse de r\u00e9seaux locaux (LAN), de r\u00e9seaux \u00e9tendus (WAN) ou de r\u00e9seaux priv\u00e9s virtuels (VPN). Ils jouent un r\u00f4le crucial dans la communication entre diff\u00e9rents \u00e9quipements r\u00e9seau et dans la connectivit\u00e9 globale d'un r\u00e9seau.</p> <p>On s'int\u00e9resse ici seulement \u00e0 deux exemples de protocoles de routages dynamiques : le protocole RIP et le protocole OSPF.</p> <p>D\u00e9finition : protocole de routage</p> <p>Un protocole de routage est un algorithme utilis\u00e9 par les \u00e9quipements r\u00e9seau pour acheminer les donn\u00e9es d'un point \u00e0 un autre dans un r\u00e9seau informatique.</p>"},{"location":"terminale/07_reseaux/cours_routage/#2-protocoles-de-routage-dynamiques-generalites","title":"2. Protocoles de routage dynamiques : g\u00e9n\u00e9ralit\u00e9s","text":"<p>Le protocole de routage dynamique est un type de protocole de routage o\u00f9 les routes sont d\u00e9termin\u00e9es de mani\u00e8re automatique par les \u00e9quipements r\u00e9seau en \u00e9changeant des informations de routage entre eux. Cela signifie que les \u00e9quipements r\u00e9seau sont capables de mettre \u00e0 jour leurs tables de routage en fonction des changements dans la topologie du r\u00e9seau.</p> <p>D\u00e9finition : table de routage</p> <p>Une table de routage est une liste des routes configur\u00e9es sur un \u00e9quipement r\u00e9seau. Elle contient les informations de routage n\u00e9cessaires pour acheminer les donn\u00e9es vers une destination sp\u00e9cifique.</p> <p>Il existe plusieurs protocoles de routage dynamiques, tels que RIP (Routing Information Protocol) et OSPF (Open Shortest Path First). Chacun de ces protocoles utilise des algorithmes diff\u00e9rents pour d\u00e9terminer la route optimale \u00e0 suivre pour atteindre une destination. Par exemple, RIP utilise le nombre de sauts comme crit\u00e8re de s\u00e9lection, tandis que OSPF utilise le co\u00fbt de la route.</p> <p>Le protocole de routage dynamique pr\u00e9sente plusieurs avantages par rapport au protocole de routage statique :</p> <ul> <li> <p>Flexibilit\u00e9 : les \u00e9quipements r\u00e9seau sont capables de s'adapter aux changements de topologie du r\u00e9seau en mettant \u00e0 jour leurs tables de routage en temps r\u00e9el, ce qui permet une meilleure tol\u00e9rance aux erreurs et une meilleure robustesse.</p> </li> <li> <p>Scalabilit\u00e9 : les protocoles de routage dynamiques sont adapt\u00e9s aux r\u00e9seaux de grande envergure, car ils permettent une gestion automatis\u00e9e des routes dans tout le r\u00e9seau.</p> </li> <li> <p>Robustesse : en cas de probl\u00e8me sur une route, les protocoles de routage dynamiques peuvent trouver une route alternative pour atteindre la destination, ce qui r\u00e9duit les temps de panne.</p> </li> </ul>"},{"location":"terminale/07_reseaux/cours_routage/#3-zoom-sur-le-protocole-rip","title":"3. Zoom sur le protocole RIP","text":"<p>Le protocole RIP (Routing Information Protocol) est un protocole de routage dynamique qui utilise l'algorithme \u00e0 vecteur de distance pour d\u00e9terminer la route optimale \u00e0 suivre pour atteindre une destination. Dans le protocole RIP, chaque \u00e9quipement r\u00e9seau poss\u00e8de une table de routage qui contient la liste des destinations et le nombre de sauts (ou \"hops\") n\u00e9cessaires pour atteindre ces destinations. L'objectif est de minimiser le nombre de sauts pour atteindre une destination.</p> <p>Pour mettre \u00e0 jour ses informations de routage, un \u00e9quipement r\u00e9seau envoie p\u00e9riodiquement toutes les 30 secondes (par d\u00e9faut) un message de diffusion \u00e0 tous ses voisins, contenant la liste des routes qu'il conna\u00eet. Les \u00e9quipements r\u00e9seau voisins re\u00e7oivent ce message et mettent \u00e0 jour leurs propres tables de routage en fonction des informations re\u00e7ues. Si un \u00e9quipement r\u00e9seau re\u00e7oit une route plus courte pour atteindre une destination que celle enregistr\u00e9e dans sa table de routage, il met \u00e0 jour sa table de routage en cons\u00e9quence.</p> <p>Plus pr\u00e9cis\u00e9ment : </p> <p>Algorithme \u00e0 vecteur de distance</p> <ol> <li>Chaque \u00e9quipement r\u00e9seau maintient une table de routage compos\u00e9e d\u2019une adresse destination, de l\u2019adresse du routeur qui permet de l\u2019atteindre (passerelle ou gateway) depuis le routeur de la table de routage et de la distance (nombre de sauts) pour atteindre la destination via ce routeur.</li> <li>Chaque \u00e9quipement r\u00e9seau \u00e9change r\u00e9guli\u00e8rement un vecteur de distances avec ses voisins imm\u00e9diats. Il s'agit d'une liste des routes qu'il conna\u00eet, avec le nombre de sauts pour atteindre chaque destination.</li> <li>Lorsqu'un \u00e9quipement r\u00e9seau re\u00e7oit un vecteur de distance de l'un de ses voisins, il met \u00e0 jour sa propre table de routage en y ajoutant la distance (nombre de sauts) depuis son propre \u00e9quipement jusqu'au voisin. Si la distance est inf\u00e9rieure \u00e0 celle indiqu\u00e9e dans sa propre table de routage, l'\u00e9quipement r\u00e9seau met \u00e0 jour sa table de routage en cons\u00e9quence.</li> <li>Lorsqu'un \u00e9quipement r\u00e9seau souhaite envoyer un paquet \u00e0 une destination, il regarde dans sa table de routage et choisit la route qui n\u00e9cessite le moins de sauts pour atteindre la destination. Si plusieurs routes ont le m\u00eame nombre de sauts, l'\u00e9quipement r\u00e9seau en choisit une au hasard.</li> <li>Si l'\u00e9quipement r\u00e9seau ne trouve pas de route vers la destination dans sa table de routage, il envoie le paquet \u00e0 un \u00e9quipement r\u00e9seau \"par d\u00e9faut\" (g\u00e9n\u00e9ralement le routeur de l'op\u00e9rateur de r\u00e9seau), qui essaiera \u00e0 son tour de trouver une route vers la destination.</li> <li>Si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16.</li> </ol> <p>Exemple</p> <p></p> <p>Dans l\u2019exemple ci-dessus, le routeur A re\u00e7oit le vecteur transmis par le routeur B.</p> <ul> <li>Pour le routeur 11, la table de routage du routeur A contient d\u00e9j\u00e0 une distance \u00e0 0 donc cette entr\u00e9e de la table de routage reste inchang\u00e9e.</li> <li>Pour le routeur 27, la table de routage du routeur A contient une route avec une distance de 6. La distance de 2 incr\u00e9ment\u00e9e de 1, pour compter le routeur B qui sera en plus \u00e0 traverser, est plus int\u00e9ressante. L\u2019entr\u00e9e de la table de routage du r\u00e9seau 27 est mise \u00e0 jour avec une distance \u00e0 3 et le prochain routeur travers\u00e9 qui devient le routeur B.</li> <li>Pour le r\u00e9seau 30, la table de routage du routeur A ne contenait pas de route donc l\u2019entr\u00e9e est ajout\u00e9e avec l\u2019incr\u00e9mentation de la distance de 1 et le prochain routeur qui est alors B.</li> <li>Pour le r\u00e9seau 33, la table de routage du routeur A contient une route avec une distance de 4 donc la distance incr\u00e9ment\u00e9e de 1 n\u2019\u00e9tant pas inf\u00e9rieure \u00e0 4, la table de routage du routeur A n\u2019est pas mise \u00e0 jour.</li> <li>Pour le r\u00e9seau 35, la table de routage du routeur A contient une route avec une distance de 3 donc la distance incr\u00e9ment\u00e9e de 1 n\u2019\u00e9tant pas inf\u00e9rieure \u00e0 3, la table de routage du routeur A n\u2019est pas mise \u00e0 jour.</li> </ul> <p>Le protocole RIP a l'avantage d'\u00eatre simple \u00e0 configurer et \u00e0 utiliser, mais il pr\u00e9sente plusieurs inconv\u00e9nients :</p> <ul> <li>le protocole RIP est limit\u00e9 \u00e0 un maximum de 15 sauts pour atteindre une destination, ce qui le rend peu adapt\u00e9 aux r\u00e9seaux de grande envergure. C'est pour cette raison que la distance infinie (16) est utilis\u00e9e pour indiquer que la route n'est pas accessible.</li> <li>le protocole RIP ne tient pas compte de la charge du r\u00e9seau, ni de la qualit\u00e9 du lien. Il est donc possible que des routes moins optimales soient utilis\u00e9es, ce qui peut entra\u00eener des probl\u00e8mes de performance.</li> <li>avec ce protocole, les routeurs n'ont pas connaissance de la topologie du r\u00e9seau. Ils ne peuvent donc pas d\u00e9tecter les boucles de routage et peuvent donc \u00eatre amen\u00e9s \u00e0 envoyer des paquets en boucle.</li> </ul>"},{"location":"terminale/07_reseaux/cours_routage/#4-zoom-sur-le-protocole-ospf","title":"4. Zoom sur le protocole OSPF","text":""},{"location":"terminale/07_reseaux/cours_routage/#41-principe","title":"4.1. Principe","text":"<p>Le protocole OSPF (Open Shortest Path First) est un protocole de routage dynamique qui utilise l'algorithme \u00e0 \u00e9tat de lien pour d\u00e9terminer la route optimale \u00e0 suivre pour atteindre une destination. Dans le protocole OSPF, chaque \u00e9quipement r\u00e9seau poss\u00e8de une table de routage qui contient la liste des destinations et le co\u00fbt de la route pour atteindre ces destinations.</p> <p>Pour mettre \u00e0 jour ses informations de routage, un \u00e9quipement r\u00e9seau envoie p\u00e9riodiquement des messages \u00e0 ses voisins, contenant des informations sur les routes qu'il conna\u00eet. Les \u00e9quipements r\u00e9seau voisins re\u00e7oivent ces messages et mettent \u00e0 jour leurs propres tables de routage en fonction des informations re\u00e7ues. Si un \u00e9quipement r\u00e9seau re\u00e7oit une route plus courte pour atteindre une destination que celle enregistr\u00e9e dans sa table de routage, il met \u00e0 jour sa table de routage en cons\u00e9quence.</p> <p>Plus pr\u00e9cis\u00e9ment :</p> <p>Algorithme \u00e0 \u00e9tat de lien</p> <ol> <li>Chaque \u00e9quipement r\u00e9seau maintient une table de routage, qui indique le co\u00fbt de la route vers chaque r\u00e9seau connu. Le co\u00fbt de la route est g\u00e9n\u00e9ralement d\u00e9fini en fonction du type de lien utilis\u00e9 pour relier les \u00e9quipements r\u00e9seau (par exemple, un lien Ethernet a un co\u00fbt inf\u00e9rieur \u00e0 un lien Modem).</li> <li>Chaque \u00e9quipement r\u00e9seau \u00e9change r\u00e9guli\u00e8rement des informations d'\u00e9tat de lien avec ses voisins imm\u00e9diats. Ces informations comprennent le co\u00fbt de chaque lien et les r\u00e9seaux atteignables par chaque voisin.</li> <li>Lorsqu'un \u00e9quipement r\u00e9seau re\u00e7oit des informations d'\u00e9tat de lien d'un de ses voisins, il met \u00e0 jour sa propre table de routage en y ajoutant le co\u00fbt de la route depuis son propre \u00e9quipement jusqu'au voisin. Si le co\u00fbt est inf\u00e9rieur \u00e0 celui indiqu\u00e9 dans sa propre table de routage, l'\u00e9quipement r\u00e9seau met \u00e0 jour sa table de routage en cons\u00e9quence.</li> <li>Lorsqu'un \u00e9quipement r\u00e9seau souhaite envoyer un paquet \u00e0 une destination, il regarde dans sa table de routage et choisit la route qui a le co\u00fbt le plus faible pour atteindre la destination. Si plusieurs routes ont le m\u00eame co\u00fbt, l'\u00e9quipement r\u00e9seau en choisit une au hasard.</li> <li>Si l'\u00e9quipement r\u00e9seau ne trouve pas de route vers la destination dans sa table de routage, il envoie le paquet \u00e0 un \u00e9quipement r\u00e9seau \"par d\u00e9faut\" (g\u00e9n\u00e9ralement le routeur de l'op\u00e9rateur de r\u00e9seau), qui essaiera \u00e0 son tour de trouver une route vers la destination.</li> </ol> <p>Le protocole OSPF a l'avantage de s'adapter rapidement en cas de changements de topologie du r\u00e9seau, gr\u00e2ce \u00e0 son algorithme \u00e0 \u00e9tat de lien qui permet de mettre \u00e0 jour les informations de routage de mani\u00e8re cibl\u00e9e. Il est \u00e9galement adapt\u00e9 aux r\u00e9seaux de grande envergure.</p> <p>Dans ce protocole, chaque routeur poss\u00e8de la connaissance de la topologie du r\u00e9seau. Il est donc possible de d\u00e9tecter les boucles de routage et de les \u00e9viter.</p> <p>Ce protocole permet une gestion automatis\u00e9e des routes dans le r\u00e9seau et offre une meilleure tol\u00e9rance aux erreurs et une meilleure robustesse que le protocole RIP. Cependant, il n\u00e9cessite une configuration plus complexe et peut entra\u00eener une consommation de ressources sup\u00e9rieure.</p>"},{"location":"terminale/07_reseaux/cours_routage/#42-calcul-du-cout-dune-route","title":"4.2. Calcul du co\u00fbt d'une route","text":"<p>On peut classer les diff\u00e9rents types de liaisons en fonction de leur d\u00e9bit th\u00e9orique :</p> Type de liaison D\u00e9bit th\u00e9orique Modem 56 Kbit/s Bluetooth 3 Mbit/s Ethernet 10 Mbit/s Wifi 54 Mbit/s 4G 100 Mbit/s Fast Ethernet 100 Mbit/s FFTH (fibre) 10 Gbit/s 5G 20 Gbit/s <p>Le co\u00fbt d'une route est d\u00e9fini en fonction du d\u00e9bit th\u00e9orique de la liaison utilis\u00e9e pour relier les \u00e9quipements r\u00e9seau. Plus le d\u00e9bit est \u00e9lev\u00e9, plus le co\u00fbt de la route est faible.</p> <p>L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle au d\u00e9bit de transfert.</p> <p>Par exemple, si le d\u00e9bit \\(d\\) est exprim\u00e9 en \\(bits/s\\), on peut calculer le co\u00fbt de chaque liaison par la formule :</p> \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] <p>Cette formule de calcul peut \u00eatre diff\u00e9rente suivant les exercices et sera syst\u00e9matiquement redonn\u00e9e. La valeur du d\u00e9bit \u00e9tant au d\u00e9nominateur, la valeur du co\u00fbt sera inversement proportionnelle au d\u00e9bit.</p> <p>Avec cette convention, une route entre deux routeurs reli\u00e9s en Fast Ethernet (100 Mbits/s) aura un co\u00fbt de 1, une liaison wifi de 54 Mbits/s aura un co\u00fbt de 1,85 environ et une liaison fibre optique de 10 Gbits/s aura un co\u00fbt de 0,01.</p>"},{"location":"terminale/07_reseaux/cours_routage/#43-lien-avec-les-graphes","title":"4.3. Lien avec les graphes","text":"<p>Le protocole OSPF utilise un algorithme de routage qui s'appuie sur les graphes. En effet, le r\u00e9seau peut \u00eatre mod\u00e9lis\u00e9 par un graphe \u00e9tiquet\u00e9 et non orient\u00e9, o\u00f9 chaque routeur est un sommet et chaque lien est une ar\u00eate.</p> <p>Les \u00e9tiquettes des ar\u00eates sont les co\u00fbts des routes entre les routeurs.</p> <p>Pour calculer le plus court chemin du routeur en question \u00e0 toutes les destinations possibles, l\u2019algorithme utilis\u00e9 est celui de Dijkstra. Ainsi, chaque routeur a la vue des plus courts chemins en termes de co\u00fbts partant de lui-m\u00eame.</p> <p>Exemple : Un cas simple</p> <p>On consid\u00e8re le r\u00e9seau repr\u00e9sent\u00e9 par le graphe ci-dessous et la table d'\u00e9tat des liens commune \u00e0 tous les routeurs \u00e0 un instant donn\u00e9.</p> <p></p> <p>L\u2019algorithme de Dijkstra \u00e9value le co\u00fbt de chaque route entre A et D. La route A-B-C-D a un co\u00fbt de \\(1 + 1 + 2 = 4\\). La route A-E-D qui serait choisie par le protocole RIP a un co\u00fbt de \\(50 + 1 = 51\\) donc l\u2019algorithme de Dijkstra choisira la route A-B-C-D. </p> <p>Sur un r\u00e9seau de petite taille, la route choisie par l\u2019algorithme Dijkstra peut \u00eatre trouv\u00e9e \u00e0 la main comme dans l\u2019exemple ci-dessus.</p> <p>Pour les cas plus complexes, on utilise l'algorithme de Dijkstra. La vid\u00e9o ci-dessous permet d'en comprendre le fonctionnement.</p> <p>Exemple : Un cas plus complexe</p> <p>On consid\u00e8re un r\u00e9seau mod\u00e9lis\u00e9 par le graphe \u00e9tiquet\u00e9 ci-dessous :</p> <p></p> <p>Nous cherchons \u00e0 d\u00e9terminer le chemin le plus rapide entre R1 et R7. L'application graphonline permet de le faire visuellement via le menu Algorithmes / plus court chemin avec l'algorithme de Djisktra.</p> <p></p> <p>Contrairement \u00e0 RIP, le chemin qu'OSPF nous indiquera sera \\(R1 \\rightarrow R2 \\rightarrow R3 \\rightarrow R5 \\rightarrow R4 \\rightarrow R6 \\rightarrow R7\\). Ce chemin n'est clairement pas le plus efficace en termes de sauts mais est le plus rapide en termes de d\u00e9bit car il n'exploite pratiquement que des liaisons \u00e0 10 Gb/s.</p> <p>Application \"\u00e0 la main\" de l'algorithme de Dijkstra sur cet exemple. On utilise ici un calcul du co\u00fbt en utilisant la formule \\(c = \\frac{10^9}{d}\\) avec \\(d\\) le d\u00e9bit en \\(bits/s\\). Ainsi :</p> <ul> <li>1 Gb/s sera affect\u00e9 du poids 1</li> <li>10 Gb/s sera affect\u00e9 du poids 0.1</li> <li>100 Mb/s sera affect\u00e9 du poids 10</li> </ul> <p>Nous dressons un tableau. A chaque nouvelle ligne, on calcule le co\u00fbt total vers les destinations possibles et on ne retient que le plus petit (en gras) que l'on marque sur une nouvelle ligne.</p> <p>Pour emp\u00eacher les retours, une fois une destination choisie (en gras), on d\u00e9sactive tout le reste de la colonne (avec des x).</p> R1 R2 R3 R4 R5 R6 R7 Choix 0-R1 - - - - - - R1 (0) x 0,1-R1 1-R1 - - - - R2 (0,1) x x 0,2-R2 1,1-R2 - - - R3 (0,2) x x x - 0,3-R3 - - R5 (0,3) x x x 0,4-R5 x 1,3-R5 10,3-R5 R4 (0,4) x x x x x 0,5-R4 - R6 (0,5) x x x x x x 1,5-R6 R7 (1,5) <p>Dans le tableau, on indique des couples distance-origine : ainsi 0,5-R4 dans la colonne R6 signifie que R6 est \u00e0 une distance minimum de 0,5 du d\u00e9part en provenance de R4. On peut ainsi reconstituer l'itin\u00e9raire optimal en partant de R7 et en remontant \u00e0 l'envers en utilisant le champ origine :</p> \\[R1 \\rightarrow R2 \\rightarrow R3 \\rightarrow R5 \\rightarrow R4 \\rightarrow R6 \\rightarrow R7\\] <p>avec un poids total minimum de 1,5.</p> <p>Exercice</p> <p>On reprend le graphe ci-dessus, mais la liaison R4-R5 est maintenant indisponible. D\u00e9terminer le chemin le plus rapide entre R1 et R7 en appliquant l'algorithme de Dijkstra.</p>"},{"location":"terminale/07_reseaux/cours_routage/#conclusion","title":"Conclusion","text":"<p>Dans ce cours, nous avons \u00e9tudi\u00e9 les protocoles de routage, qui permettent de d\u00e9terminer comment acheminer les paquets de donn\u00e9es d'une source \u00e0 une destination \u00e0 travers un r\u00e9seau.</p> <p>Les protocoles de routage dynamique permettent une gestion automatis\u00e9e des routes dans le r\u00e9seau, en \u00e9changeant des informations de routage avec les \u00e9quipements voisins. Nous avons vu deux protocoles de routage dynamique courants : le protocole RIP (Routing Information Protocol), qui se base sur le nombre de sauts pour choisir la route la plus courte et le protocole OSPF (Open Shortest Path First), qui se base sur le co\u00fbt de la route pour choisir la route la plus courte.</p> <p>Le protocole OSPF est plus efficace que le protocole RIP : si une route choisie par le protocole RIP est plus courte en termes de sauts, elle peut contenir un lien avec une bande passante tr\u00e8s faible. Par contre, les calculs de plus courts chemins du protocole OSPF sont plus lourds et les formats de messages ainsi que les \u00e9changes sont plus complexes que le protocole RIP.</p> <p>Ce dernier n\u2019est plus utilis\u00e9 aujourd\u2019hui, mais il est relativement simple, ce qui permet de l\u2019\u00e9tudier en classe terminale</p> <p>Dans l'avenir, il est probable que les protocoles de routage \u00e9voluent pour s'adapter aux nouvelles technologies et aux besoins croissants en mati\u00e8re de connectivit\u00e9 et de mobilit\u00e9. Par exemple, les protocoles de routage pourront prendre en compte des consid\u00e9rations de qualit\u00e9 de service, de s\u00e9curit\u00e9 et de respect de l'environnement.</p>"},{"location":"terminale/07_reseaux/exos_routage/","title":"Routage - Exercices","text":""},{"location":"terminale/07_reseaux/exos_routage/#exercice-1","title":"Exercice 1","text":"<p>On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante :</p> <p></p> <ol> <li> <p>On suppose que l'on a ex\u00e9cut\u00e9 le protocole RIP sur ce r\u00e9seau. Compl\u00e9ter la table suivante, qui indique pour chaque machine la portion de la table de routage pour la destination G.</p> Machine Destination Passerelle Interface Distance A G B G C G D G E G F G </li> <li> <p>On suppose que le lien B-F tombe en panne. Mettre \u00e0 jour la table ci-dessus.</p> </li> </ol>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-2","title":"Exercice 2","text":"<p>On consid\u00e8re le r\u00e9seau repr\u00e9sent\u00e9 ci-dessous : </p> <p></p> <p>On utilise le protocole OSPF et on dispose des informations suivantes sur les d\u00e9bits : </p> <ul> <li>\u00e0 l'int\u00e9rieur du r\u00e9seau 192.168.0.0/25 : 1,544 Mb/s</li> <li>liaison Routeur_1 \\(\\rightarrow\\) Switch_1 : 100 Mb/s</li> <li>liaison Switch_1 \\(\\rightarrow\\) Routeur_2 : 2,048 Mb/s</li> <li>liaison Switch_1 \\(\\rightarrow\\) Routeur_3 : 100 Mb/s</li> <li>liaison Routeur_2 \\(\\rightarrow\\) Switch_2 : 1,544 Mb/s</li> <li>liaison Switch_3 \\(\\rightarrow\\) Routeur_3 et Routeur_4 : 10 Mb/s</li> <li>liaison Routeur_4 \\(\\rightarrow\\) Internet : 100 Mb/s</li> </ul> <p>Le d\u00e9bit de r\u00e9f\u00e9r\u00e9nce est de 100 Mb/s.</p> <ol> <li>Construire un graphe dont les sommets sont les routeurs et les switchs et les ar\u00eates sont les liaisons. On indiquera sur chaque ar\u00eate le co\u00fbt associ\u00e9.</li> <li>Appliquer l'algorithme de Dijkstra pour trouver le chemin le plus court entre la machine 192.168.0.101 et Internet.</li> </ol>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-3","title":"Exercice 3","text":"<p>2020, sujet 0</p> <p>On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante :</p> <p></p> <p>Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes :</p> <p></p> <p>Question 1</p> <ol> <li>Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru.</li> <li>D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP.</li> </ol> <p>Question 2</p> <p>Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP.</p>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-4","title":"Exercice 4","text":"<p>2021, sujet M\u00e9tropole 1</p> <p>On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6.</p> <p></p> <p>Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.</p> <p>On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant :</p> <p></p> <p>1/ Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2.</p> <p>1.a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier.</p> <p>1.b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2.</p> <p>2/ La liaison entre R1 et R2 est rompue.</p> <p>2.a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2.</p> <p>2.b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ?</p> <p>3/ On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant :</p> <p></p> <p>a. Le co\u00fbt C d\u2019une liaison est donn\u00e9 ici par la formule \\(C = \\frac{10^9}{BP}\\)</p> <p>o\u00f9 \\(BP\\) est la bande passante de la connexion en bps (bits par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant.</p> <p>b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF.</p> <p>c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF.</p>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-5","title":"Exercice 5","text":"<p>2021, sujet M\u00e9tropole 2</p> Figure 1 <p>La figure 1 ci-dessus repr\u00e9sente le sch\u00e9ma d\u2019un r\u00e9seau d\u2019entreprise. Il y figure deux r\u00e9seaux locaux L1 et L2. Ces deux r\u00e9seaux locaux sont interconnect\u00e9s par les routeurs R2, R3, R4 et R5. Le r\u00e9seau local L1 est constitu\u00e9 des PC portables P1 et P2 connect\u00e9s \u00e0 la passerelle R1 par le switch Sw1. Les serveurs S1 et S2 sont connect\u00e9s \u00e0 la passerelle R6 par le switch Sw2.</p> <p>Le tableau 1 suivant indique les adresses IPv4 des machines constituants le r\u00e9seau de l\u2019entreprise.</p> Tableau 1 : adresses IPv4 des machines <p>Rappels et notations</p> <p>Rappelons qu\u2019une adresse IP est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets. Dans le tableau 1, les valeurs des 4 octets ont \u00e9t\u00e9 converties en notation d\u00e9cimale.</p> <p>La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants de poids faibles repr\u00e9sentent la partie \u00ab machine \u00bb.</p> <p>Toutes les adresses des machines connect\u00e9es \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb.</p> <p>1/  1.a. Quelles sont les adresses des r\u00e9seaux locaux L1 et L2 ?</p> <p>1.b. Donner la plus petite et la plus grande adresse IP valides pouvant \u00eatre attribu\u00e9es \u00e0 un ordinateur portable ou un serveur sur chacun des r\u00e9seaux L1 et L2 sachant que l\u2019adresse du r\u00e9seau et l\u2019adresse de diffusion ne peuvent pas \u00eatre attribu\u00e9es \u00e0 une machine.</p> <p>1.c. Combien de machines peut-on connecter au maximum \u00e0 chacun des r\u00e9seaux locaux L1 et L2 ? </p> <p>2/  2.a. Expliquer l\u2019utilit\u00e9 d\u2019avoir plusieurs chemins possibles reliant les r\u00e9seaux L1 et L2.</p> <p>2.b. Quel est le chemin le plus court en nombre de sauts pour relier R1 et R6 ? Donner le nombre de sauts de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s.</p> <p>2.c. La bande passante d\u2019une liaison Ether (quantit\u00e9 d\u2019information qui peut \u00eatre transmise en bits/s) est de \\(10^7\\) bits/s et celle d\u2019une liaison FastEther est de \\(10^8\\) bits/s. Le co\u00fbt d\u2019une liaison est d\u00e9fini par \\(\\frac{10^8}{d}\\) , o\u00f9 \\(d\\) est sa bande passante en bits/s.</p> Tableau 2 : type des liaisons entre les routeurs <p>Quel est le chemin reliant R1 et R6 qui a le plus petit co\u00fbt ? Donner le co\u00fbt de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s.</p> <p>3/ Dans l\u2019annexe A figurent les tables de routages des routeurs R1, R2, R5 et R6 au d\u00e9marrage du r\u00e9seau. Indiquer sur votre copie ce qui doit figurer dans les lignes laiss\u00e9es vides des tables de routage des routeurs R5 et R6 pour que les \u00e9changes entre les ordinateurs des r\u00e9seaux L1 et L2 se fassent en empruntant le chemin le plus court en nombre de sauts.</p> <p></p>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-6","title":"Exercice 6","text":"<p>2021, sujet Am\u00e9rique du Nord</p> <p>Un constructeur automobile poss\u00e8de six sites de production qui \u00e9changent des documents entre eux. Les sites de production sont reli\u00e9s entre eux par six routeurs A, B, C, D, E et F. On donne ci-dessous les tables de routage des routeurs A \u00e0 F obtenues avec le protocole RIP.</p> <p></p> <ol> <li>D\u00e9terminer \u00e0 l'aide de ces tables le chemin emprunt\u00e9 par un paquet de donn\u00e9es envoy\u00e9 du routeur A vers le routeur F.</li> <li>On veut repr\u00e9senter sch\u00e9matiquement le r\u00e9seau de routeur \u00e0 partir des tables de routage.  Recopier sur la copie le sch\u00e9ma ci-dessous : </li> </ol> <p></p> <p>En s'appuyant sur les tables de routage, tracer les liaisons entre les routeurs.</p>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-7","title":"Exercice 7","text":"<p>2023, sujet 0a</p> <p>Nous allons \u00e9tudier les communications entre Bob et Alice. Ils communiquent au travers du r\u00e9seau ci-dessous dont le protocole de routage est le protocole OSPF qui minimise le co\u00fbt des communications :</p> Figure 1 : Plan du r\u00e9seau de communication entre Alice et Bob. <p>LAN : r\u00e9seau local ; WAN : r\u00e9seau \u00e9tendu ; R : routeur ; Sw : Switch</p> <p>Une adresse IPv4 est compos\u00e9e de quatre octets soit 32 bits. Une adresse de sous- r\u00e9seau avec la notation <code>/n</code> signifie que les <code>n</code> premiers bits de l\u2019adresse correspondent \u00e0 la partie \u00ab r\u00e9seau \u00bb et les suivants \u00e0 la partie \u00ab machine \u00bb.</p> <p>L\u2019adresse dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e adresse du r\u00e9seau.</p> <p>L\u2019adresse dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e adresse de diffusion.</p> <p>Ces adresses sont r\u00e9serv\u00e9es et ne peuvent pas \u00eatre attribu\u00e9es \u00e0 des machines. Le choix des routes emprunt\u00e9es par les paquets IP est uniquement bas\u00e9 sur le protocole OSPF. On prendra comme d\u00e9bit maximal de r\u00e9f\u00e9rence 10 000 Mbit/s.</p> <p>Le cout est alors calcul\u00e9 de la fa\u00e7on suivante :</p> \\[\\text{co\u00fbt} = \\frac{\\text{d\u00e9bit maximal de r\u00e9f\u00e9rence}}{\\text{d\u00e9bit du r\u00e9seau concern\u00e9}}\\] <ol> <li> <p>La configuration IP partielle ci-dessous a \u00e9t\u00e9 affich\u00e9e sur l\u2019un des ordinateurs :</p> <p><code>IP h\u00f4te : 172.16.2.3</code></p> <p><code>IP passerelle : 172.16.2.253</code></p> <p>Indiquer en justifiant si cette configuration appartient \u00e0 l\u2019ordinateur de Bob ou d\u2019Alice.</p> </li> <li> <p>Le r\u00e9seau WAN8 a un d\u00e9bit de 1 000 Mbit/s. Calculer le cout correspondant.</p> </li> <li> <p>On donne les tables de routage des routeurs R1 \u00e0 R5, dans lesquelles Pass. d\u00e9signe la passerelle (qui correspond au routeur suivant) :</p> Figure 2 : Tables de routage des routeurs R1 \u00e0 R5. <p>\u00c9crire sur votre copie la table de routage du routeur R6.</p> </li> <li> <p>Bob envoie un message \u00e0 Alice.</p> <p>\u00c9num\u00e9rer dans l\u2019ordre tous les routeurs par lesquels transitera ce message.</p> </li> <li> <p>Un routeur tombe en panne, le nouveau co\u00fbt pour la route entre Bob et Alice est de 111. D\u00e9terminer le nom du routeur en panne.</p> </li> </ol>"},{"location":"terminale/07_reseaux/exos_routage/#exercice-8","title":"Exercice 8","text":"<p>2023, sujet 0b</p> <p>On consid\u00e8re le r\u00e9seau ci-dessous dans lequel :</p> <ul> <li>les n\u0153uds A, B, C, D, E, F et G sont des routeurs,</li> <li>le type de liaison est pr\u00e9cis\u00e9 entre chaque routeur.</li> </ul> <p></p> <p>On rappelle que la bande passante des liaisons FTTH (fibre optique : Fiber To The Home) est de 10 Gbit/s et celle des liaisons FastEthernet de 100 Mbit/s.</p> <p>On s\u2019int\u00e9resse au protocole de routage OSPF. Le protocole OSPF est un protocole de routage qui cherche \u00e0 minimiser la somme des co\u00fbts des liaisons entre les routeurs emprunt\u00e9s par un paquet. Le co\u00fbt \\(\\mathcal{C}\\) d\u2019une liaison est donn\u00e9 par :</p> \\[\\mathcal{C}=\\frac{10^8}{d}\\] <p>o\u00f9 d est la bande passante en bit/s de la liaison.</p> <ol> <li>Calculer le co\u00fbt d\u2019une liaison de communication par la technologie FastEthernet.</li> <li>Le fichier <code>collections_timbres.csv</code> contenu dans une machine reli\u00e9e au routeur A doit \u00eatre envoy\u00e9 \u00e0 une machine reli\u00e9e au routeur G. D\u00e9terminer la route permettant de relier le routeur A au routeur G et minimisant la somme des co\u00fbts selon le protocole OSPF.</li> </ol>"},{"location":"terminale/07_reseaux/revisions_IP/","title":"Activit\u00e9 d'introduction : adressage IP, r\u00e9seaux, masques","text":"<p>Cette activit\u00e9 permet de (re)d\u00e9finir quelques notions facilitant la compr\u00e9hension du chapitre sur les protocoles de routage.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#adresse-ip","title":"Adresse IP","text":"<p>La plupart du temps lorsque l'on parle de r\u00e9seau, il s'agit en r\u00e9alit\u00e9 d'un sous-r\u00e9seau d'un r\u00e9seau plus grand (par exemple un sous-r\u00e9seau du r\u00e9seau mondial IP).</p> <p>Chacun de ses (sous-)r\u00e9seaux poss\u00e8de une adresse IP, appel\u00e9e adresse du (sous-)r\u00e9seau. Dans un (sous-)r\u00e9seau, il y a plusieurs machines que l'on appellent h\u00f4tes, poss\u00e9dant elles aussi une adresse IP d\u00e9pendant de celle du (sous-)r\u00e9seau.</p> <p>Une adresse IP (IPv4) est une suite de 32 bits (4 octets) exprim\u00e9e en d\u00e9cimales \u00e0 point, en s\u00e9parant chacun des octets par un point : <code>X1.X2.X3.X4</code> o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets.</p> <p>Exemple :</p> <ul> <li>Repr\u00e9sentation binaire : <code>11000001 00110111 11011101 00111110</code></li> <li>Repr\u00e9sentation d\u00e9cimale point\u00e9e : <code>193.55.221.62</code> (o\u00f9 <code>193</code> est la     valeur d\u00e9cimale de <code>11000001</code>, <code>55</code> celle de <code>00110111</code>, etc.)</li> </ul>"},{"location":"terminale/07_reseaux/revisions_IP/#structure-dune-adresse-ip-parties-reseau-et-hote","title":"Structure d'une adresse IP : parties r\u00e9seau et h\u00f4te","text":"<p>Pour chaque adresse, une partie des bits (les bits de poids fort, \u00e0 gauche) repr\u00e9sente la partie \u00ab r\u00e9seau \u00bb, et l'autre partie (les bits de poids faible, \u00e0 droite) repr\u00e9sente la partie \u00ab h\u00f4te \u00bb c'est-\u00e0-dire la machine du r\u00e9seau.</p> <p>Par exemple, si les 3 premiers octets repr\u00e9sentent la partie r\u00e9seau et le dernier la partie h\u00f4te, on obtient le d\u00e9coupage suivant :</p> R\u00e9seau H\u00f4te 11000001 00110111 11011101 00111110 193.55.221 62 <p>\u270d\ufe0f Q1 : Si la partie r\u00e9seau occupe les 3 premiers octets, quel est le nombre d'h\u00f4tes possibles pour le r\u00e9seau en question ?</p> <p>\u270d\ufe0f Q2 : Et si la partie r\u00e9seau occupe les 28 premiers bits ?</p>"},{"location":"terminale/07_reseaux/revisions_IP/#masque-de-sous-reseau","title":"Masque de sous-r\u00e9seau","text":"<p>Le m\u00e9canisme permettant de situer la limite en la partie r\u00e9seau et la partie h\u00f4te s'appelle le masque de sous-r\u00e9seau (en anglais : subnet mask). C'est aussi une suite de 32 bits :</p> <ul> <li>une s\u00e9rie continue de <code>1</code> qui fixe la partie r\u00e9seau (celle de     gauche)</li> <li>une s\u00e9rie continue de <code>0</code> qui correspond \u00e0 la partie h\u00f4te</li> </ul> <p>Exemple : Dans le cas o\u00f9 les 3 premiers octets repr\u00e9sentent la partie r\u00e9seau, alors le masque de sous-r\u00e9seau est <code>11111111.11111111.11111111.00000000</code> ou <code>255.255.255.0</code> en d\u00e9cimal.</p> <p>\u270d\ufe0f Q3 : Si la partie r\u00e9seau d'un sous-r\u00e9seau occupe les 28 permiers bits, donner le masque de sous-r\u00e9seau en notations binaire et d\u00e9cimale.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#notation-cidr","title":"Notation CIDR","text":"<p>Lorsque l'on donne l'adresse IP d'un (sous-)r\u00e9seau, il faut donc \u00e9galement donner le masque associ\u00e9. On pourrait le donner en notation binaire ou d\u00e9cimale, mais pour simplifier on donne g\u00e9n\u00e9ralement juste le nombre de bits correspondant \u00e0 la partie r\u00e9seau : <code>X1.X2.X3.X4 /n</code> signifie que les n premiers bits de poids forts de l'adresse IP repr\u00e9sentent la partie r\u00e9seau, les bits suivants de poids faibles repr\u00e9sentent la partie h\u00f4te.</p> <p>Cette notation simplifi\u00e9e s'appelle notation CIDR (Classless Inter-Domain Routing).</p> <p>Exemple : le masque de sous-r\u00e9seau <code>11111111.11111111.11111111.00000000</code> (ou <code>255.255.255.0</code>) s'\u00e9crit donc plus simplement <code>/24</code> car il y a 24 bits pour la partie r\u00e9seau.</p> <p>\u270d\ufe0f Q4 : D\u00e9terminer la notation CIDR pour un sous-r\u00e9seau dont le masque est 255.255.255.240.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#adresse-reseau","title":"Adresse r\u00e9seau","text":"<p>L'adresse r\u00e9seau permet de savoir si 2 machines peuvent communiquer entre elles (directement). Si ces 2 machines ont une adresse r\u00e9seau identique, alors elles appartiennent au m\u00eame r\u00e9seau et elles peuvent communiquer.</p> <p>Cette adresse r\u00e9seau est celle dont tous les bits de la partie h\u00f4te sont \u00e0 0, autrement dit l'adresse IP la plus \"basse\" du r\u00e9seau.</p> <p>Exemple : si <code>193.55.221.62</code> est une machine d'un r\u00e9seau dont le masque est <code>/24</code>, alors l'adresse du r\u00e9seau en question est :</p> <ul> <li><code>11000001 00110111 11011101 00000000</code> les 8 derniers bits pour     l'h\u00f4te ont \u00e9t\u00e9 mis \u00e0 z\u00e9ro</li> <li>en d\u00e9cimal cela donne <code>193.55.221.0</code>.</li> </ul> <p>Ainsi, le r\u00e9seau en question se note <code>193.55.221.0 /24</code>.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#adresse-de-diffusion","title":"Adresse de diffusion","text":"<p>L'adresse de diffusion ou broadcast est celle utilis\u00e9e pour envoyer des paquets \u00e0 toutes les machines du r\u00e9seau.</p> <p>Cette adresse de diffusion est celle dont les bits de la partie h\u00f4te sont \u00e0 1, autrement dit l'adresse IP la plus \"haute\" du r\u00e9seau.</p> <p>Exemple : Le r\u00e9seau <code>193.55.221.0 /24</code> a donc pour adresse de diffusion <code>11000001 00110111 11011101 11111111</code> ou <code>193.55.221.255</code> en d\u00e9cimal.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#plage-dadresses-machines","title":"Plage d'adresses machines","text":"<p>La plage d'adresses machines est l'ensemble des adresses que peut prendre une machine sur le r\u00e9seau. Comme l'adresse r\u00e9seau et l'adresse de diffusion sont d\u00e9j\u00e0 prises, il reste toutes les adresses entre les deux pour les machines du r\u00e9seau :</p> <ul> <li>la premi\u00e8re adresse possible pour une machine est donc celle qui     suit l'adresse r\u00e9seau</li> <li>la derni\u00e8re adresse possible pour une machine est donc celle qui     pr\u00e9c\u00e8de l'adresse de diffusion</li> </ul> <p>Exemple : Les machines sur le r\u00e9seau <code>193.55.221.0 /24</code> ont des adresses IP variant de <code>193.55.221.1</code> (la premi\u00e8re) \u00e0 <code>193.55.221.254</code> (la derni\u00e8re).</p> <p>\u270d\ufe0f Q5 : Une machine d'adresse IP <code>112.133.102.41</code> appartient \u00e0 un r\u00e9seau dont le masque est <code>/24</code> (c'est-\u00e0-dire <code>255.255.255.0</code>).</p> <ol> <li>Donner en notation binaire et en notation d\u00e9cimale, l'adresse     r\u00e9seau et l'adresse de diffusion du r\u00e9seau.</li> <li>Combien de machines peut-on connecter dans ce r\u00e9seau ? Quelle est     leur plage d'adresses ?</li> </ol> <p>\u270d\ufe0f Q6 : Combien de machines peut-on connecter sur un r\u00e9seau dont le masque est <code>255.255.240.0</code> ?</p> <p>\u270d\ufe0f Q7 : On installe 10 machines sur un r\u00e9seau local. L'adresse IP <code>172.16.29.35</code> avec le masque <code>255.255.255.240</code> (soit <code>/28</code>) est attribu\u00e9e \u00e0 une de ces machines.</p> <ol> <li>Combien d'h\u00f4tes peut-on placer dans le r\u00e9seau o\u00f9 est situ\u00e9e cette     machine ?</li> <li>Dans quel r\u00e9seau (pr\u00e9ciser l'adresse) sont situ\u00e9es ces machines ?</li> <li>Pour ce r\u00e9seau, donnez la premi\u00e8re et la derni\u00e8re adresse IP valide     pour ces machines.</li> <li>Quelle est l'adresse de diffusion (broadcast) pour ce r\u00e9seau ?</li> </ol>"},{"location":"terminale/07_reseaux/revisions_IP/#appartenance-a-un-meme-reseau","title":"Appartenance \u00e0 un m\u00eame r\u00e9seau","text":"<p>On a dit pr\u00e9c\u00e9demment que si 2 machines ont une adresse r\u00e9seau identique, alors elles appartiennent au m\u00eame r\u00e9seau et elles peuvent communiquer.</p> <p>Pour d\u00e9terminer l'adresse r\u00e9seau d'une adresse IP, il suffit d'appliquer l'op\u00e9rateur logique ET (ou AND en anglais) bit \u00e0 bit entre l'adresse IP et le masque de sous-r\u00e9seau.</p> <p>On rappelle l'op\u00e9rateur ET a pour table de v\u00e9rit\u00e9 :</p> x y x ET y 0 0 0 1 0 0 0 1 0 1 1 1 <p>Exemple : Pour d\u00e9terminer l'adresse r\u00e9seau de la machine d'adresse IP <code>193.55.221.62</code> avec le masque <code>255.255.255.0</code> :</p> Adresse IP (d'une machine) <code>11000001.00110111.11011101.00111110</code> 193.55.221.62 Masque <code>11111111.11111111.11111111.00000000</code> 255.255.255.0 Adresse r\u00e9seau <code>11000001.00110111.11011101.00000000</code> 193.55.221.0 <p>\u270d\ufe0f Q8 : Un r\u00e9seau local contient une machine d'adresse IP <code>192.168.0.1</code> avec le masque <code>/20</code>. La machine d'adresse IP <code>192.168.1.3</code> appartient-elle au m\u00eame r\u00e9seau ? Vous comparerez les adresses r\u00e9seaux de ces deux machines pour r\u00e9pondre.</p>"},{"location":"terminale/07_reseaux/revisions_IP/#partie-programmation","title":"\ud83d\udcbb Partie programmation","text":"<p>L'objectif de cette partie est d'\u00e9crire une fonction <code>meme_sous_reseau(ip_a, ip_b, masque)</code> qui renvoie un bool\u00e9en indiquant si les machines A et B font partie du m\u00eame sous-r\u00e9seau.</p> <p>Cette partie est \u00e0 traiter dans Capytale : https://capytale2.ac-paris.fr/web/c/aa58-1299451.</p> <p>On rappelle quelques instructions qui pourront s'av\u00e9rer utiles :</p> \ud83d\udc0d Script Python<pre><code>    &gt;&gt;&gt; bin(45)\n    '0b101101'\n    &gt;&gt;&gt; chaine = \"bonjour \u00e0 tous !\"\n    &gt;&gt;&gt; chaine.split(' ')  # on s\u00e9pare la cha\u00eene selon le caract\u00e8re espace\n    ['bonjour', '\u00e0', 'tous', '!']\n</code></pre> \ud83d\udc0d Script Python<pre><code>    def et_logique(bit1, bit2):\n\"\"\"\n        Renvoie le r\u00e9sultat de l'op\u00e9ration logique bit1 ET bit2.\n\n        Entr\u00e9es : deux string d'1 caract\u00e8re ('0' ou '1')\n        Sortie : string \n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_et_logique():\n        assert et_logique('0', '0') == '0'\n        assert et_logique('0', '1') == '0'\n        assert et_logique('1', '0') == '0'\n        assert et_logique('1', '1') == '1'\n\n\n    def entier_en_mot_binaire(entier, longueur_mot_binaire):\n\"\"\"\n        Renvoie un mot binaire correspondant \u00e0 l'entier.\n\n        Entr\u00e9es :\n            entier : int\n            longueur_mot_binaire : int de longueur sup\u00e9rieure ou \u00e9gale au nombre de bits de n\u00e9cessaires\n        pour convertir entier en base 2\n\n        Sortie : string de longueur longueur_mot_binaire            \n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_entier_en_mot_binaire():\n        assert entier_en_mot_binaire(1, 8) == '00000001'\n        assert entier_en_mot_binaire(192, 8) == '11000000'\n        assert entier_en_mot_binaire(168, 8) == '10101000'\n\n\n    def masque_en_mot_binaire(masque):\n\"\"\"\n        Renvoie la conversion du masque en un mot binaire.\n\n        Entr\u00e9e : masque (int)\n        Sortie : string de 32 caract\u00e8res\n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_masque_en_mot_binaire():\n        assert masque_en_mot_binaire(24) == '11111111111111111111111100000000'\n\n\n\n    def ip_en_liste(ip):\n\"\"\"\n        Renvoie une liste dont les \u00e9l\u00e9ments sont les 4 octets de l'adresse ip.\n\n        Entr\u00e9e : ip (string) \n        Sortie : liste d'entiers\n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_ip_en_liste():\n        assert ip_en_liste('192.168.0.1') == [192, 168, 0, 1]\n\n\n\n    def ip_en_mot_binaire(ip):\n\"\"\"\n        Renvoie la conversion d'une ip en un mot binaire.\n\n        Entr\u00e9e : string contenant une IP (ex \"192.168.0.1\")\n        Sortie : string de 32 caract\u00e8res\n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_ip_en_mot_binaire():\n        assert ip_en_mot_binaire(\"192.168.0.1\") == '11000000101010000000000000000001'\n\n\n\n    def adresse_reseau_ip(ip, masque):\n\"\"\"\n        Renvoie l'adresse r\u00e9seau de l'adresse ip avec le masque masque.\n\n        Entr\u00e9es :\n            ip : string contenant une IP (ex \"192.168.0.1\")\n            masque : entier du masque en notation CIDR (ex : 24)\n        Sortie : string de 32 caract\u00e8res    \n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n\n    def test_adresse_reseau_ip():\n        assert adresse_reseau_ip(\"192.168.0.1\", 24) == '11000000101010000000000000000000'\n        assert adresse_reseau_ip(\"192.168.1.3\", 24) == '11000000101010000000000100000000'\n        assert adresse_reseau_ip(\"192.168.0.1\", 20) == '11000000101010000000000000000000'\n        assert adresse_reseau_ip(\"192.168.1.3\", 20) == '11000000101010000000000000000000'\n\n\n\n    def meme_sous_reseau(ip_a, ip_b, masque):\n\"\"\"\n        Renvoie un bool\u00e9en indiquant si ip_a et ip_b sont dans un m\u00eame r\u00e9seau de masque masque.\n\n        Entr\u00e9es :\n        ip_a:  string contenant une IP (ex \"192.168.0.1\")\n        ip_b : string contenant une IP\n        masque : entier du masque en notation CIDR (ex : 24)\n        \"\"\"\n        # \u00e0 vous de jouer !\n        pass\n\n    def test_meme_sous_reseau():\n        assert meme_sous_reseau(\"192.168.0.1\", \"192.168.1.3\", 24) == False\n        assert meme_sous_reseau(\"192.168.0.1\", \"192.168.1.3\", 20) == True\n        assert meme_sous_reseau(\"192.168.0.1\", \"192.168.0.3\", 30) == True\n</code></pre> <p>Source : https://info-mounier.fr/terminale_nsi/archi_se_reseaux/ip_reseau_masque.php</p>"},{"location":"terminale/08_complements/","title":"08-Compl\u00e9ments","text":"<p>Vous trouverez dans cette section les \u00e9l\u00e9ments du programme qui ne sont pas au programme de l'\u00e9preuve \u00e9crite.</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-01/01_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-01/01_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-01/01_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\nresultat = {}\nfor bulletin in urne:\nif bulletin in resultat:\nresultat[bulletin] = resultat[bulletin] + 1\n        else:\nresultat[bulletin] = 1\nreturn resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\nif election[candidat] &gt; nmax :\nnmax = election[candidat]\nvainqueur = candidat #(2)\nliste_finale = [nom for nom in election if election[nom] == nmax]\nreturn liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-01/01_2/enonce/","title":"Enonce","text":"<p>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-02/02_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-02/02_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>indices_maxi</code> qui prend qui prend en param\u00e8tre une liste <code>tab</code>, non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-02/02_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def positif(pile):\npile_1 = list(pile)\npile_2 = []\nwhile pile_1 != []:\nx = pile_1.pop()\nif x &gt;= 0:\npile_2.append(x)\nwhile pile_2 != []:\nx = pile_2.pop()\npile_1.append(x)\nreturn pile_1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-02/02_2/enonce/","title":"Enonce","text":"<p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>liste_1 = list(liste)</code> fait une copie de <code>liste</code>ind\u00e9pendante de <code>liste</code>, que l\u2019expression <code>x = liste.pop()</code> enl\u00e8ve le sommet de la pile <code>liste</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>liste.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>liste</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>liste</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>liste</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-03/03_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-03/03_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, les nombres sont des entiers ou des flottants.</p> <p>\u00c9crire une fonction <code>moyenne</code> renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (<code>valeur</code>, <code>coefficient</code>) o\u00f9 <code>valeur</code> et <code>coefficient</code> sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie <code>None</code>, si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre></p> <p>Dans le premier exemple la moyenne est calcul\u00e9e par la formule :</p> <p>\\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\)</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-03/03_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\nliste_zoom = []\nfor elt in liste_depart:\nfor i in range(k):\nliste_zoom.append(elt)\nreturn liste_zoom\n\ndef zoomDessin(grille, k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom = []\n    for elt in grille:\nliste_zoom = zoomListe(elt, k)\nfor i in range(k):\ngrille_zoom.append(liste_zoom)\nreturn grille_zoom\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-03/03_2/enonce/","title":"Enonce","text":"<p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> <pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-04/04_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def a_doublon(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-04/04_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie <code>True</code> si la liste contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Par exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-04/04_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\nvoisins = voisinage(len(grille), ligne, colonne)\nfor l, c in voisins:\nif grille[l][c] != -1: # si ce n'est pas une bombe\ngrille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\ngrille[ligne][colonne] = -1 # place la bombe\nincremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\nreturn grille\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-04/04_2/enonce/","title":"Enonce","text":"<p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> \ud83d\udc0d Script Python<pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-05/05_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1,6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;=2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-05/05_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en python deux fonctions :</p> <ul> <li> <p><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de type <code>list</code> de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</p> </li> <li> <p><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de type <code>list</code> de <code>n</code> entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</p> </li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-05/05_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\nreturn len(image)\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\nreturn len(image[0])\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nL[i][j] = 255 - image[i][j]\nreturn L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nif image[i][j] &lt; seuil :\nL[i][j] = 0\nelse:\nL[i][j] = 1\nreturn L\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-05/05_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-06/06_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-06/06_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-06/06_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\nreturn sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\nmin_dist = distance(point, depart)\nfor i in range (1, len(tab)):\nif distance(tab[i], depart) &lt; min_dist:\npoint = tab[i]\nmin_dist = distance(tab[i], depart)\nreturn point\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-06/06_2/enonce/","title":"Enonce","text":"<p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>Compl\u00e9ter le code des fonctions <code>distance</code> et <code>plus_courte_distance</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-07/07_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-07/07_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-07/07_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\nreturn romains[nombre]\nelif romains[nombre[0]] &gt;= romains[nombre[1]]:\nreturn romains[nombre[0]] + traduire_romain(nombre[1:])\nelse:\nreturn traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-07/07_2/enonce/","title":"Enonce","text":"<p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-08/08_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-08/08_1/enonce/","title":"Enonce","text":"<p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-08/08_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\nfor element in tab:\nif element != '+' and element != '*':\np.empiler(element)\nelse:\nif element == '+':\nresultat = p.depiler() + p.depiler()\nelse:\nresultat = p.depiler() * p.depiler()\np.empiler(resultat)\nreturn p.depiler()\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-08/08_2/enonce/","title":"Enonce","text":"<p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-09/09_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-09/09_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-09/09_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\nm = (i + j) // 2\nif tab[m] &lt; n :\nreturn chercher(tab, n, m+1 , j)\nelif tab[m] &gt; n :\nreturn chercher(tab, n, i , m-1 )\nelse :\nreturn m\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-09/09_2/enonce/","title":"Enonce","text":"<p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-10/10_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-10/10_1/enonce/","title":"Enonce","text":"<p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-10/10_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\nif c == '(':\np.empiler(c)\nelif c == ')':\nif p.est_vide():\nreturn False\nelse:\np.depiler()\nreturn p.est_vide()\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-10/10_2/enonce/","title":"Enonce","text":"<p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-11/11_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    puissance = 0\n    total = 0\n    for i in range(len(tab)-1, -1, -1):\n        total += tab[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-11/11_1/enonce/","title":"Enonce","text":"<p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n\"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-11/11_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\nvaleur_insertion = tab[i]\n# la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\nj = i\n# tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\nwhile j &gt; 0 and valeur_insertion &lt; tab[j-1]:\ntab[j] = tab[j-1]\nj = j - 1\ntab[j] = valeur_insertion\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-11/11_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>tab</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  </p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-12/12_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(cle, a): \n    if a is None:\n        a = ABR(None, cle, None)\n    elif cle &gt; a.cle:\n        a.droit = ajoute(cle, a.droit)\n    else:\n        a.gauche = ajoute(cle, a.gauche)\n    return a\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-12/12_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la classe <code>ABR</code>, dont le constructeur est le suivant :</p> \ud83d\udc0d Script Python<pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</code></pre> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> \ud83d\udc0d Script Python<pre><code>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n</code></pre> <p>Dans tout le code, <code>None</code> correspondra \u00e0 un arbre vide.</p> <p>La classe <code>ABR</code> dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (<code>__repr__</code> ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>ajoute(cle, a)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>  , et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre <code>a</code> inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-12/12_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def empaqueterR(liste_masses, c):\nn = len(liste_masses)\nnb_boites = 0\nboites = [0]*n\nfor masse in liste_masses :\ni = 0\nwhile i &lt;= nb_boites and boites[i] + masse &gt; c:\ni = i + 1\n    if i == nb_boites + 1:\nnb_boites = nb_boites + 1\nboites[i] = boites[i] + masse\nreturn nb_boites + 1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-12/12_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-13/13_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a, tab):\n    nb = 0\n    for element in tab:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-13/13_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>tab</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-13/13_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\nrendu = []\na_rendre = somme_versee - somme_due\ni = len(pieces) - 1\nwhile a_rendre &gt; 0 :\nif pieces[i] &lt;= a_rendre :\nrendu.append(pieces[i])\na_rendre = a_rendre - pieces[i]\nelse :\ni = i - 1\nreturn rendu\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-13/13_2/enonce/","title":"Enonce","text":"<p>La fonction <code>rendu_monnaie</code> prend en param\u00e8tres deux nombres entiers positifs <code>somme_due</code> et <code>somme_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>somme_versee \u2013 somme_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces.</p> <p>La fonction <code>rendu_monnaie</code> renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-14/14_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n'''\n    renvoie l\u2019indice de la premi\u00e8re occurrence de\n    elt dans tab si elt est dans tab et -1 sinon. \n    '''\n    assert tab != [], \"le tableau est vide\"\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-14/14_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-14/14_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\ni = len(l) - 2\nwhile a &lt; l[i] and i &gt;= 0:\nl[i+1] = l[i]\nl[i] = a\ni = i - 1\nreturn l\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-14/14_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-15/15_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-15/15_1/enonce/","title":"Enonce","text":"<p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres un tableau <code>releve</code> des relev\u00e9s et un tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-15/15_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\nresult = ''\nfor caractere in chaine:\nresult = caractere + result\nreturn result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\nreturn chaine == inverse\ndef est_nbre_palindrome(nbre):\nchaine = str(nbre)\nreturn est_palindrome(chaine)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-15/15_2/enonce/","title":"Enonce","text":"<p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-16/16_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-16/16_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et une liste d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs de la liste <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-16/16_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\nif nom in dico_result:\nnotes = dico_result[nom]\ntotal_points = 0.\ntotal_coefficients = 0\nfor valeurs  in notes.values():\nnote, coefficient = valeurs\ntotal_points = total_points + note * coefficient\ntotal_coefficients = total_coefficients + coefficient\nreturn round( total_points / total_coefficients, 1 )\nelse:\n        return -1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-16/16_2/enonce/","title":"Enonce","text":"<p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-17/17_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-17/17_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne(liste_notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste <code>liste_notes</code>, non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-17/17_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\nfor k in range(1, n+1):\nligne_k = [1]\nfor i in range(1, k):\nligne_k.append(triangle[k-1][i-1] + triangle[k-1][i])\nligne_k.append(1)\ntriangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-17/17_2/enonce/","title":"Enonce","text":"<p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s prenant en param\u00e8tre un entier <code>n</code> sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne <code>n</code>. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable <code>triangle</code>.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-18/18_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n'''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans cette liste.\n    '''\n    assert tab != [], 'le tableau est vide'\n\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-18/18_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre une liste non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-18/18_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\nfor i in range(1,len(tab)):\nif i not in tab:\nreturn False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\nif ordre[0] != 1: # le premier n'est pas 1\nnb = nb + 1\n    i = 0\nwhile i &lt; n-1:\nif ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1\nnb = nb + 1\n        i = i + 1\nif ordre[n-1] != n: # le dernier n'est pas n\nnb = nb + 1\n    return nb\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-18/18_2/enonce/","title":"Enonce","text":"<p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-19/19_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-19/19_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-19/19_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\nfor c in message:\nif 'A' &lt;= c and c &lt;= 'Z':\nindice = (position_alphabet(c) + decalage) % 26\nresultat = resultat + ALPHABET[indice]\n        else:\nresultat = resultat + c\nreturn resultat\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-19/19_2/enonce/","title":"Enonce","text":"<p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n        return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-20/20_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1, d2):\nfor cle in d2:\n    if cle in d1:\n        d1[cle] += d2[cle]\n    else:\n        d1[cle] = d2[cle]\nreturn d1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-20/20_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-20/20_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\nn = 0\ncases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\nwhile len(cases_vues) &lt; nbre_cases:\nx = randint(1, 6)\ncase_en_cours = (case_en_cours + x) % nbre_cases\nif case_en_cours not in cases_vues:\ncases_vues.append(case_en_cours)\nn = n + 1\nreturn n\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-20/20_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nbre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-21/21_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-21/21_1/enonce/","title":"Enonce","text":"<p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-21/21_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\ns = ''\nif e.gauche is not None:\ns = '(' + s + expression_infixe(e.gauche)\ns = s + str(e.valeur)\nif e.droit is not None:\ns = s + expression_infixe(e.droit) + ')'\nreturn s\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-21/21_2/enonce/","title":"Enonce","text":"<p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-22/22_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def liste_puissances(a, n):\n    lst = [a]*n\n    for i in range(1, n):\n        lst[i] = a * lst[i-1]\n    return lst\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-22/22_1/enonce/","title":"Enonce","text":"<p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet $n fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en argument un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en argument un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-22/22_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\ncode_additionne = 0\nfor c in mot:\ncode_concatene = code_concatene + str(dico[c])\ncode_additionne = code_additionne + dico[c]\ncode_concatene = int(code_concatene)\nif code_concatene % code_additionne == 0:\nmot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-22/22_2/enonce/","title":"Enonce","text":"<p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-23/23_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-23/23_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-23/23_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\nreturn tab[g]\nelse:\nnombre_de_triplets = (d - g) // 3\nindice = g + 3 * (nombre_de_triplets // 2)\nif tab[indice] != tab[indice + 1] :\nreturn trouver_intrus(tab, g, indice)\nelse:\nreturn trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-23/23_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-24/24_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-24/24_1/enonce/","title":"Enonce","text":"<p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-24/24_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\nwhile i1 &lt; n1 and i2 &lt; n2 :\nif lst1[i1] &lt; lst2[i2]:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\nelse:\n            lst12[i] = lst2[i2]\ni2 = i2 + 1\ni += 1\n    while i1 &lt; n1:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\ni = i + 1\nwhile i2 &lt; n2:\nlst12[i] = lst2[i2]\ni2 = i2 + 1\ni = i + 1\nreturn lst12\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-24/24_2/enonce/","title":"Enonce","text":"<p>La fonction <code>fusion</code> prend deux listes <code>lst1</code>, <code>lst2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>lst12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction <code>fusion</code> est</p> \ud83d\udc0d Script Python<pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-25/25_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def enumere(L):\n    d = {}\n    for i in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-25/25_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre une liste <code>L</code> et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>L</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste <code>L</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-25/25_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n    un arbre binaire de recherche.\n\"\"\"\nif cle &lt; arbre.v:\nif arbre.fg is not None:\ninsere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\nif arbre.fd is not None:\ninsere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Arbre(5)\n&gt;&gt;&gt; insere(a, 2)\n&gt;&gt;&gt; insere(a, 7)\n&gt;&gt;&gt; insere(a, 3)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; insere(a, 1)\n&gt;&gt;&gt; insere(a, 4)\n&gt;&gt;&gt; insere(a, 6)\n&gt;&gt;&gt; insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-25/25_2/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-26/26_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-26/26_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-26/26_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-26/26_2/enonce/","title":"Enonce","text":"<p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-27/27_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-27/27_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-27/27_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\ndroite = len(tab) - 1\nwhile gauche &lt; droite :\n        if tab[gauche] == 0 :\ngauche = gauche + 1\nelse :\ntab[gauche], tab[droite] = tab[droite], tab[gauche]\ndroite = droite - 1\nreturn tab\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-27/27_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-28/28_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-28/28_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-28/28_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\nif tab = []:\nreturn False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\nif (x &lt; tab[0]) or (x &gt; tab[-1]):\nreturn False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m - 1\nreturn False, 3\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-28/28_2/enonce/","title":"Enonce","text":"<p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-29/29_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def taille(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + taille(a.fg) + taille(a.fd)\n\ndef hauteur(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + max(hauteur(a.fg), hauteur(a.fd))\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>a = Arbre(0)\na.fg = Arbre(1)\na.fd = Arbre(2)\na.fg.fg = Arbre(3)\na.fd.fg = Arbre(4)\na.fd.fd = Arbre(5)\na.fd.fg.fd = Arbre(6)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a)\n7\n&gt;&gt;&gt; hauteur(a)\n4\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-29/29_1/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : \ud83d\udc0d Script Python<pre><code>a = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.</p> <p>Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-29/29_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\nif indice &lt; nbre_elts:\nfor i in range(indice):\nL[i] = liste[i]\nL[indice] = element\nfor i in range(indice + 1, nbre_elts + 1):\nL[i] = liste[i-1]\nelse:\n        for i in range(nbre_elts):\nL[i] = liste[i]\nL[nbre_elts] = element \nreturn L\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-29/29_2/enonce/","title":"Enonce","text":"<p>La m\u00e9thode <code>insert</code> de la classe <code>list</code> permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un <code>indice</code> donn\u00e9.</p> <p>Le but de cet exercice est, sans utiliser cette m\u00e9thode, d\u2019\u00e9crire une fonction <code>ajoute</code> r\u00e9alisant cette insertion en produisant une nouvelle liste.</p> <p>Cette fonction <code>ajoute</code> prend en param\u00e8tres trois variables <code>indice</code>, <code>element</code> et <code>liste</code> et renvoie une liste <code>L</code> dans laquelle les \u00e9l\u00e9ments sont ceux de la liste <code>liste</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>. On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>liste</code> sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste <code>liste</code>, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans la liste <code>L</code>. Si <code>indice</code> est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste <code>liste</code>, l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans <code>L</code> apr\u00e8s tous les \u00e9l\u00e9ments de la liste <code>liste</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre></p> <p>Compl\u00e9ter et tester le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-30/30_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-30/30_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-30/30_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-30/30_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-31/31_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-31/31_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-31/31_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-31/31_2/enonce/","title":"Enonce","text":"<p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-32/32_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-32/32_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-32/32_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\nself.contenu = [Carte(c, v) for c in range(1, 5) for v in range(1, 14)]  \ndef get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\nassert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\nreturn self.contenu[pos]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-32/32_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>get_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-33/33_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-33/33_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-33/33_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\nfor k in range(N):\nimin = k\nfor i in range(k, N):\nif tab[i] &lt; tab[imin] :\nimin = i\ntab[k] , tab[imin] = tab[imin] , tab[k]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-33/33_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_selection</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>.</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-34/34_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-34/34_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-34/34_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\ni = 0\nj = len(tab) - 1\nwhile i != j :\n        if tab[i] == 0:\ni = i + 1\nelse :\n            valeur = tab[j]\ntab[j] = tab[i]\ntab[i] = valeur\nj = j - 1\nreturn tab\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-34/34_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> Zone de 0Zone non tri\u00e9eZone de 1 <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-35/35_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> \ud83d\udc0d Script Python<pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-35/35_1/enonce/","title":"Enonce","text":"<p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1])\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-35/35_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\nfor i in range(self.ordre):\nif self.somme_ligne(i) != s:\nreturn False\n#test de la somme de chaque colonne\nfor j in range(self.ordre):\nif self.somme_col(j) != s:\nreturn False\nreturn True\n</code></pre> <p>Tests avec :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-35/35_2/enonce/","title":"Enonce","text":"<p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-36/36_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-36/36_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre une liste de nombres entiers <code>tab</code> non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-36/36_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\nif M[i][j] == 1:\nM[i][j] = val\n\n    # l'element en haut fait partie de la composante\nif i-1 &gt;= 0 and M[i-1][j] == 1:\npropager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\nif i+1 &lt; len(M) and M[i+1][j] == 1:\npropager(M, i+1, j, val)\n# l'element \u00e0 gauche fait partie de la composante\nif j-1 and M[i][j-1] == 1:\npropager(M, i, j-1, val)\n# l'element \u00e0 droite fait partie de la composante\nif j+1 and M[i][j+1] == 1:\npropager(M, i, j+1, val)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-36/36_2/enonce/","title":"Enonce","text":"<p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et unevaleur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-37/37_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-37/37_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-37/37_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\nself.adresse = adresse\ndef liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\nreturn self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\ndef adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\nif self.liste_octet()[3] &lt; 254:\noctet_nouveau = self.liste_octet()[3] + 1\nreturn AdresseIP('192.168.0.' + str(octet_nouveau))\nelse:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-37/37_2/enonce/","title":"Enonce","text":"<p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-38/38_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-38/38_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-38/38_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\ndestinataire = plan[expediteur]\nnb_destinaires = 1\nwhile destinataire != expediteur:\ndestinataire = plan[destinataire]\nnb_destinaires += 1\nreturn nb_destinaires == len(plan)\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-38/38_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-39/39_1/correction/","title":"Correction","text":"<p>Version r\u00e9cursive :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version imp\u00e9rative : \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    a = 0\n    b = 1\n    for k in range(n-1):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre></p> <p>Version programmation dynamique :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-39/39_1/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premiers termes sont \u00e9gaux \u00e0 1,</li> <li>ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent.</li> </ul> <p>En math\u00e9matiques, on le formule ainsi :</p> <p>\\(U_1 = 1\\), \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\), par \\(U_{n+2} = U_{n+1} + U_n\\).</p> <p>Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-39/39_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\nmeilleurs_eleves =  []\nfor i in range(len(eleves)) :\nif notes[i] == note_maxi :\nmeilleurs_eleves.append(eleves[i])\nelif notes[i] &gt; note_maxi:\nnote_maxi = notes[i]\nmeilleurs_eleves = [i]\nreturn (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-39/39_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>pantheon</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>. Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction <code>pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> \ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-40/40_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-40/40_1/enonce/","title":"Enonce","text":"<p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-40/40_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\nif cle &lt; self.valeur:\n# on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\nself.gauche.inserer(cle)\nelse:\n                # on cr\u00e9e un fils gauche\nself.gauche = Noeud(cle)\nelif cle &gt; self.valeur:\n# on ins\u00e8re \u00e0 droite\nif self.droitExiste():\n# on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\nself.droit.inserer(cle)\nelse:\n                # on cr\u00e9e un fils droit\nself.droit = Noeud(cle)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-40/40_2/enonce/","title":"Enonce","text":"<p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-41/41_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-41/41_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans chaine.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-41/41_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\nreturn []\nv = valeurs[rang]\nif v &lt;= a_rendre :\nreturn [v] + rendu_glouton(a_rendre - v, rang)\nelse :\nreturn rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-41/41_2/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-42/42_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-42/42_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-42/42_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\nnb_mystere = randint(1,99)\nnb_test = int(input('Proposez un nombre entre 1 et 99 : '))\ncompteur = 1\nwhile nb_mystere != nb_test and compteur &lt; 10 :\ncompteur = compteur + 1\nif nb_mystere &gt; nb_test:\nnb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\nprint ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\nprint('Nombre d essais: ', compteur)\nelse:\nprint ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-42/42_2/enonce/","title":"Enonce","text":"<p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-43/43_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return [0]\n    # cas g\u00e9n\u00e9ral\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return b\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-43/43_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n</code></pre> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-43/43_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\nfor i in range(n-1,-1,-1):\nfor j in range(i):\nif T[j] &gt; T[j+1]:\ntemp = T[j]\nT[j] = T[j+1]\nT[j+1] = temp\n    return T\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-43/43_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier la liste <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre></p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-44/44_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-44/44_1/enonce/","title":"Enonce","text":"<p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-44/44_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\nfor i in range(2, n):\nif tab[i] == True:\npremiers.append(i)\nfor multiple in range(2*i, n, i):\ntab[multiple] = False\nreturn premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-44/44_2/enonce/","title":"Enonce","text":"<p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-45/45_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rangement_valeurs(notes_eval):\n    lst = [0]*11\n    for note in notes_eval:\n        lst[note] += 1\n    return lst\n\ndef notes_triees(effectifs_notes):\n    triees = []\n    for i in range(11):\n        if effectifs_notes[i] != 0:\n            for _ in range(effectifs_notes[i]):\n                triees.append(i)\n    return triees\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-45/45_1/enonce/","title":"Enonce","text":"<p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans une liste <code>notes_eval</code>.</p> <p>\u00c9crire une fonction <code>rangement_valeurs</code> prenant en param\u00e8tre la liste <code>notes_eval</code> et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-45/45_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\nif q == 0:\nreturn str(r)\n    else:\nreturn dec_to_bin(q) + str(r)\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\nelif nb_bin == '1':\nreturn 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\nbit_droit = 1\nreturn 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"terminale/EP2023/BNS_2023/23-NSI-45/45_2/enonce/","title":"Enonce","text":"<p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre>"},{"location":"terminale/includes/2022/files/chaine/","title":"Chaine","text":"\ud83d\udc0d Script Python<pre><code>s = ''\n</code></pre>"},{"location":"terminale/includes/2022/files/01_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"terminale/includes/2022/files/01_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p>"},{"location":"terminale/includes/2022/files/01_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre>"},{"location":"terminale/includes/2022/files/01_2/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code>. (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre).</p> <p>On cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1] # (1)\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> <ol> <li>Erreur dans l'\u00e9nonc\u00e9 officiel : <code>Pieces</code></li> </ol> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_glouton(68, [], 0) \n[50, 10, 5, 2, 1]\n&gt;&gt;&gt; rendu_glouton(291, [], 0) \n[100, 100, 50, 20, 20, 1]\n</code></pre>"},{"location":"terminale/includes/2022/files/02_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in tab:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"terminale/includes/2022/files/02_1/enonce/","title":"Enonce","text":"<p>Soit le couple (<code>note</code>,<code>coefficient</code>):</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p>Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>,<code>coefficient</code>).</p> <p>\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.</p> <p>Par exemple, l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p>"},{"location":"terminale/includes/2022/files/02_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1,n+1):\n        Ck = [1]\n        for i in range(1,k):\n            Ck.append(C[k-1][i-1]+C[k-1][i] )\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre>"},{"location":"terminale/includes/2022/files/02_2/enonce/","title":"Enonce","text":"<p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/03_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"terminale/includes/2022/files/03_1/enonce/","title":"Enonce","text":"<p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es assez petites n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre>"},{"location":"terminale/includes/2022/files/03_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    Classe impl\u00e9mentant un noeud d'arbre binaire disposant de 3\n    attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def est_une_feuille(self):\n'''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\ne = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\ndef expression_infixe(e):\n    s = ''\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(e.gauche)\n    s = s + str(e.valeur)\n    if e.droit is not None:\n        s = s + expression_infixe(e.droit) + ')'\n    return s\n</code></pre>"},{"location":"terminale/includes/2022/files/03_2/enonce/","title":"Enonce","text":"<p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212,\u00d7,\u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[3 \\times (8 + 7) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire. Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    Classe impl\u00e9mentant un noeud d'arbre binaire disposant de 3\n    attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def est_une_feuille(self):\n'''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s # (1)\n</code></pre> <ol> <li>Attention, l'\u00e9nonc\u00e9 original fait pr\u00e9c\u00e9der ce <code>return</code> d'un <code>if ...</code> qui a \u00e9t\u00e9 supprim\u00e9 ici. Il faudrait \u00e9crire <code>if True:</code>, ce qui est inutile...   </li> </ol>"},{"location":"terminale/includes/2022/files/04_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"terminale/includes/2022/files/04_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/04_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== 0 :\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == 1):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((i+1) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, i+1, j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((j-1) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, j-1, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((j+1) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, j+1, val)\n</code></pre>"},{"location":"terminale/includes/2022/files/04_2/enonce/","title":"Enonce","text":"<p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code>, deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M,2,1,3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None # (1)\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1): # (2)\n        propager(M, i, ..., val)\n</code></pre> <ol> <li>Dans l'\u00e9nonc\u00e9 original, il n'y a rien apr\u00e8s le <code>return</code>. </li> <li>Il faudrait \u00e9crire <code>len(M[0])</code> plut\u00f4t que  <code>len(M)</code>. (\u00e9quivalent ici car l'image est carr\u00e9e...)</li> </ol> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0,0,1,0],[0,1,0,1],[1,1,1,0],[0,1,1,0]]\n&gt;&gt;&gt; propager(M,2,1,3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/05_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    if tab == []:\n        return {'min': None, 'max': None}\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"terminale/includes/2022/files/05_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p>"},{"location":"terminale/includes/2022/files/05_2/correction/","title":"Correction","text":"<p>Attention, le code propos\u00e9 ne respecte pas les standards de notation :</p> <ul> <li>il ne faut pas de majuscules sur les noms des attributs</li> <li>la docstring se place \u00e0 l'int\u00e9rieur de la fonction et non au dessus.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        assert c in range(1, 5)\n        assert v in range(1, 14)\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        self.contenu = [Carte(couleur, valeur) for couleur in range(1, 5) for valeur in range(1, 14)]\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        assert pos in range(0, 52)\n        if 0 &lt;= pos &lt; len(self.contenu) :\n            return self.contenu[pos]\n</code></pre>"},{"location":"terminale/includes/2022/files/05_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous. Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        ??? = [ ??? for couleur in range(1, ???) for valeur in range( 1, ???)]\n\n\"\"\"Renvoie la Carte qui se trouve a\u00a0 la position donnee\"\"\"\n    def getCarteAt(self, pos):\n        if 0 &lt;= pos &lt; ??? :\n            return ???\n</code></pre> Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n  8 de coeur\n</code></pre>"},{"location":"terminale/includes/2022/files/06_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre>"},{"location":"terminale/includes/2022/files/06_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p>"},{"location":"terminale/includes/2022/files/06_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = 0\n    trouve = False\n    while i &lt; n-g+1 and trouve == False :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            j += 1\n        if j == g:\n            trouve = True\n        i += 1\n    return trouve\n</code></pre>"},{"location":"terminale/includes/2022/files/06_2/enonce/","title":"Enonce","text":"<p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon. Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>.</p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre></p>"},{"location":"terminale/includes/2022/files/07_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return ([0], 1)\n    # cas g\u00e9n\u00e9ral\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return (b, bits)\n</code></pre>"},{"location":"terminale/includes/2022/files/07_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>conv_bin</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie un couple (<code>b,bit)</code> o\u00f9 :</p> <ul> <li><code>b</code> est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de <code>n</code>;</li> <li><code>bit</code> correspond aux nombre de bits qui constituent <code>b</code>.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; conv_bin(9)\n([1,0,0,1],4)\n</code></pre></p> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p>"},{"location":"terminale/includes/2022/files/07_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n</code></pre>"},{"location":"terminale/includes/2022/files/07_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction <code>tri_bulles</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre>"},{"location":"terminale/includes/2022/files/08_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"terminale/includes/2022/files/08_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"terminale/includes/2022/files/08_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre>"},{"location":"terminale/includes/2022/files/08_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur <code>a</code> dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3,[1,2,4,5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(10,[1,2,7,12,14,25])\n[1, 2, 7, 10, 12, 14, 25]\n&gt;&gt;&gt; insere(1,[2,3,4])\n[1, 2, 3, 4]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/09_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def calcul(k):\n    valeurs = []\n    n = k\n    valeurs.append(n)\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        valeurs.append(n)\n    return valeurs\n</code></pre>"},{"location":"terminale/includes/2022/files/09_1/enonce/","title":"Enonce","text":"<p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :</p> <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p>Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :</p> <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p>On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>k</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>k</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/09_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = 0\n    for c in mot :\n        code_c = code_c + str(dico[c])\n        code_a = code_a + dico[c]\n    code_c = int(code_c)\n    if code_c % code_a == 0:\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre>"},{"location":"terminale/includes/2022/files/09_2/enonce/","title":"Enonce","text":"<p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/10_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def occurrence_lettres(phrase):\n    occ = {}\n    for caractere in phrase:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere] = 1\n    return occ\n</code></pre>"},{"location":"terminale/includes/2022/files/10_1/enonce/","title":"Enonce","text":"<p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :</p> <ul> <li>l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>\u00c9crire une fonction <code>occurrence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p>"},{"location":"terminale/includes/2022/files/10_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = L1[i1]\n            i1 = i1 + 1\n        else:\n            L12[i] = L2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = L1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        L12[i] = L2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return L12\n</code></pre>"},{"location":"terminale/includes/2022/files/10_2/enonce/","title":"Enonce","text":"<p>La fonction <code>fusion</code> prend deux listes <code>L1</code>, <code>L2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>L12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction est</p> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1,6,10],[0,7,8,9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"terminale/includes/2022/files/11_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"terminale/includes/2022/files/11_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>. Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p>"},{"location":"terminale/includes/2022/files/11_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for lettre in message:\n        if lettre in ALPHABET:\n            indice = (position_alphabet(lettre) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + lettre\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2022/files/11_2/enonce/","title":"Enonce","text":"<p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019\u2026) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve et <code>-1</code> sinon. La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !',4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !',-5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre>"},{"location":"terminale/includes/2022/files/12_1/correction/","title":"Correction","text":"<p>L'\u00e9nonc\u00e9 n'est pas tr\u00e8s clair quand il dit \u00abd'afficher 'erreur'\u00bb (ce qui suppose un <code>print</code> et non un <code>return</code>). Nous choississons donc dans ce cas de renvoyer <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('erreur')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2022/files/12_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code>   (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche 'erreur' si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p>"},{"location":"terminale/includes/2022/files/12_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i]== 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"terminale/includes/2022/files/12_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> Zone de 0Zone non tri\u00e9eZone de 1 <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p>"},{"location":"terminale/includes/2022/files/13_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre>"},{"location":"terminale/includes/2022/files/13_1/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro. Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/13_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre>"},{"location":"terminale/includes/2022/files/13_2/enonce/","title":"Enonce","text":"<p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :</p> <p>\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p>"},{"location":"terminale/includes/2022/files/14_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"terminale/includes/2022/files/14_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous. Programmer une fonction correspond qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n</code></pre>"},{"location":"terminale/includes/2022/files/14_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire plan correspondant\n    \u00e0 un plan d'envoi de messages entre N personnes A, B, C,\n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon.\n    '''\n    personne = 'A'\n    N = len(plan)\n    for i in range(N-1):\n        if plan[personne] == 'A':\n            return False\n        else:\n            personne = plan[personne]\n    return True\n\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\n\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\n\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\n\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"terminale/includes/2022/files/14_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 la m\u00eame personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Sur le plan d'envoi plan_a des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi plan_b ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <p>On part de la personne A et on inspecte les N \u2013 1 successeurs dans le plan d'envoi :</p> <ul> <li> <p>Si un de ces N \u2013 1 successeurs est A lui-m\u00eame, on a trouv\u00e9 un cycle de taille inf\u00e9rieure ou \u00e9gale \u00e0 N \u2013 1. Il y a donc au moins deux cycles et le plan d'envoi n'est pas cyclique.</p> </li> <li> <p>Si on ne retombe pas sur A lors de cette inspection, on a un unique cycle qui passe par toutes les personnes : le plan d'envoi est cyclique.</p> </li> </ul> <p>Compl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire plan correspondant\n    \u00e0 un plan d'envoi de messages entre N personnes A, B, C,\n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon.\n    '''\n    personne = 'A'\n    N = len(...)\n    for i in range(...):\n        if plan[...] == ...:\n            return ...\n        else:\n            personne = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre>"},{"location":"terminale/includes/2022/files/15_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/includes/2022/files/15_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p>"},{"location":"terminale/includes/2022/files/15_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"terminale/includes/2022/files/15_2/enonce/","title":"Enonce","text":"<p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre>"},{"location":"terminale/includes/2022/files/16_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre>"},{"location":"terminale/includes/2022/files/16_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p>"},{"location":"terminale/includes/2022/files/16_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = list(T)\n    T3 = []\n    while T2 != []:\n        x = T2.pop()\n        if x &gt;= 0:\n            T3.append(x)\n    T2 = [] # &lt;- NB : cette ligne est inutile\n    while T3 != []:\n        x = T3.pop()\n        T2.append(x)\n    print('T = ',T)\n    return T2\n</code></pre>"},{"location":"terminale/includes/2022/files/16_2/enonce/","title":"Enonce","text":"<p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>T1 = list(T)</code> fait une copie de <code>T</code>ind\u00e9pendante de <code>T</code>, que l\u2019expression <code>x = T.pop()</code> enl\u00e8ve le sommet de la pile <code>T</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>T.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>T</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>T</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>T</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\nT = [-1, 0, 5, -3, 4, -6, 10, 9, -8]\n[0, 5, 4, 10, 9]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/17_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"terminale/includes/2022/files/17_1/enonce/","title":"Enonce","text":"<p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n</code></pre>"},{"location":"terminale/includes/2022/files/17_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n''' Classe impl\u00e9mentant un noeud d'arbre binaire\n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit. '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n''' Classe impl\u00e9mentant une structure\n    d'arbre binaire de recherche. '''\n    def __init__(self):\n'''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n'''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n        \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(self.racine.valeur)\n            self.racine.droite.parcours(tab)\n            return tab\n\n    def insere(self, element):\n'''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else :\n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n'''\n        Renvoie True si element est pr\u00e9sent dans l'arbre\n        binaire et False sinon.\n        '''\n        if self.est_vide():\n            return False\n        else:\n            if element &lt; self.racine.valeur:\n                return self.racine.gauche.recherche(element)\n            elif element &gt; self.racine.valeur:\n                return self.racine.droite.recherche(element)\n            else:\n                return True\n</code></pre> <p> Cette mani\u00e8re de coder le parcours est maladroite car elle conduit \u00e0 ceci :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a.parcours()\n[1, 3, 7, 9, 9]\n&gt;&gt;&gt; a.parcours()\n[1, 3, 7, 9, 9, 1, 3, 7, 9, 9]\n</code></pre> <p>Comme le param\u00e8tre optionnel <code>tab</code> est un \u00e9l\u00e9ment mutable (de type <code>list</code> ), Python ne le r\u00e9initialise pas avant chaque appel de la fonction. Vous pouvez constater les cons\u00e9quences f\u00e2cheuses.</p> <p>Une solution pourrait \u00eatre d'\u00e9crire ceci : \ud83d\udc0d Script Python<pre><code>def parcours(self, tab = None):\n''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n    \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n    if tab is None:\n        tab = []\n    if self.est_vide():\n        return tab\n    else:\n        self.racine.gauche.parcours(tab)\n        tab.append(self.racine.valeur)\n        self.racine.droite.parcours(tab)\n        return tab\n</code></pre></p>"},{"location":"terminale/includes/2022/files/17_2/enonce/","title":"Enonce","text":"<p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n''' Classe impl\u00e9mentant un noeud d'arbre binaire\n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit. '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n''' Classe impl\u00e9mentant une structure\n    d'arbre binaire de recherche. '''\n    def __init__(self):\n'''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n'''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n        \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(...)\n            ...\n            return tab\n\n    def insere(self, element):\n'''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else :\n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n'''\n        Renvoie True si element est pr\u00e9sent dans l'arbre\n        binaire et False sinon.\n        '''\n        if self.est_vide():\n            return ...\n        else:\n            if element &lt; self.racine.valeur:\n                return ...\n            elif element &gt; self.racine.valeur:\n                return ...\n            else:\n                return ...\n</code></pre> <p>Compl\u00e9ter les fonctions r\u00e9cursives parcours et recherche afin qu'elles respectent leurs sp\u00e9cifications. </p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ABR()\n&gt;&gt;&gt; a.insere(7)\n&gt;&gt;&gt; a.insere(3)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.insere(1)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.parcours()\n[1,3, 7, 9, 9]\n\n&gt;&gt;&gt; a.recherche(4)\nFalse\n&gt;&gt;&gt; a.recherche(3)\nTrue\n</code></pre>"},{"location":"terminale/includes/2022/files/18_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"terminale/includes/2022/files/18_1/enonce/","title":"Enonce","text":"<p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p>"},{"location":"terminale/includes/2022/files/18_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre>"},{"location":"terminale/includes/2022/files/18_2/enonce/","title":"Enonce","text":"<p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre>"},{"location":"terminale/includes/2022/files/19_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2022/files/19_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p>"},{"location":"terminale/includes/2022/files/19_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or j &gt;= len(T) :\n        print('Erreur')\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if T[m] &lt; n :\n        return chercher(T, n, m + 1, j)\n    elif T[m] &gt; n :\n        return chercher(T, n, i, m - 1 )\n    else :\n        return m\n</code></pre>"},{"location":"terminale/includes/2022/files/19_2/enonce/","title":"Enonce","text":"<p>Soit <code>T</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier. La fonction <code>chercher</code>, donn\u00e9e \u00e0 la page suivante, doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet \u00e9ventuellement dans <code>T</code>, et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>T</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>La fonction <code>chercher</code> est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Le code de la fonction commence par v\u00e9rifier si <code>0 &lt;= i</code> et <code>j &lt; len(T)</code>. Si cette condition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche <code>\"Erreur\"</code> puis renvoie <code>None</code>.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> propos\u00e9e ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,10)\nErreur\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,5)\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],9,0,5)\n4\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],6,0,5)\n2\n</code></pre></p>"},{"location":"terminale/includes/2022/files/20_1/correction/","title":"Correction","text":"<p>Correction propos\u00e9e par Yves Laurent</p> \ud83d\udc0d Script Python<pre><code>def xor(tab1, tab2):\n\"\"\"\n\n    Parameters\n    ----------\n    tab1 : type(tab1) = list\n        Binaire 1\n    tab2 : type(tab1) = list\n        Binaire 2\n\n    Returns\n    -------\n    resultat : list\n        tab1 xor tab2.\n\n    \"\"\"\n    assert len(tab1) == len(tab2), \"pas la m\u00eame taille\"\n\n    resultat = []\n\n    taille = len(tab1)\n\n    for compteur in range(taille):\n        resultat.append(tab1[compteur]^tab2[compteur])\n\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2022/files/20_1/enonce/","title":"Enonce","text":"<p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents : 0 \u2295 0 = 0 , 0 \u2295 1 = 1 , 1 \u2295 0 = 1 , 1 \u2295 1 = 0  </p> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>xor</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction doit passer les tests suivants :</p> \ud83d\udc0d Script Python<pre><code>assert(xor(a, b) == [1, 1, 0, 1, 1, 0, 0, 1])\nassert(xor(c, d) == [1, 1, 1, 0])\n</code></pre>"},{"location":"terminale/includes/2022/files/20_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\n    for i in range(1, n):\n        if carre.somme_ligne(i) != s:\n            return False\n\n    #test de la somme de chaque colonne\n    for j in range(n):\n        if carre.somme_col(j) != s:\n            return False\n\n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[k][k] for k in range(n)]) != s:\n        return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n        return False\n    return s\n\nc1 = Carre([[1, 1],\n            [1, 1]])\n\nc2 = Carre([[2, 9, 4],\n            [7, 5, 3],\n            [6, 1, 8]])\n\nc3 = Carre([[4, 5, 16, 9],\n            [14, 7, 2, 11],\n            [3, 10, 15, 6],\n            [13, 12, 8, 1]])\n\nassert est_magique(c1) == 2\nassert est_magique(c2) == 15\nassert est_magique(c3) == False\n</code></pre>"},{"location":"terminale/includes/2022/files/20_2/enonce/","title":"Enonce","text":"<p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit magique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne et chaque diagonale sont \u00e9gales. Ainsi c2 et c3 sont magiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 2 pour c2 et 15 pour c3. c4 n\u2019est pas magique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 34 alors que celle de la derni\u00e8re colonne est \u00e9gale \u00e0 27.</p> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <p>Compl\u00e9ter la fonction <code>est_magique</code> qui prend en param\u00e8tre un carr\u00e9 et qui renvoie la valeur de la somme si ce carr\u00e9 est magique, <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\n    for i in range(..., ...):\n        if carre.somme_ligne(i) != s:\n            return ...\n\n    #test de la somme de chaque colonne\n    for j in range(n):\n        if ... != s:\n            return False\n\n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[...][...] for k in range(n)]) != s:\n        return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n        return False\n    return ...\n</code></pre> <p>Tester la fonction <code>est_magique</code> sur les carr\u00e9s c2, c3 et c4.</p>"},{"location":"terminale/includes/2022/files/21_1/correction/","title":"Correction","text":"<p>\u00c9nonc\u00e9 peu clair, on ne sait pas si <code>n1</code> et <code>n2</code> sont entiers naturels ou relatifs. Nous d\u00e9cidons qu'ils sont relatifs et donc qu'ils peuvent \u00eatre n\u00e9gatifs, auquel cas on utilise le fait que \\(5 \\times (-6)= - (5 \\times 6)\\). \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre></p>"},{"location":"terminale/includes/2022/files/21_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p>"},{"location":"terminale/includes/2022/files/21_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"terminale/includes/2022/files/21_2/enonce/","title":"Enonce","text":"<p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p>"},{"location":"terminale/includes/2022/files/22_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"terminale/includes/2022/files/22_1/enonce/","title":"Enonce","text":"<p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre>"},{"location":"terminale/includes/2022/files/22_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def crible(N):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(2, N):\n        if tab[i] == True:\n            premiers.append(i)\n            for multiple in range(2*i, N, i):\n                tab[multiple] = False\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre>"},{"location":"terminale/includes/2022/files/22_2/enonce/","title":"Enonce","text":"<p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre N fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de N bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier N strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que N.</p> \ud83d\udc0d Script Python<pre><code>def crible(N):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(..., N):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, N, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p>"},{"location":"terminale/includes/2022/files/23_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"terminale/includes/2022/files/23_1/enonce/","title":"Enonce","text":"<p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre>"},{"location":"terminale/includes/2022/files/23_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        print(element)\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre>"},{"location":"terminale/includes/2022/files/23_2/enonce/","title":"Enonce","text":"<p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre>"},{"location":"terminale/includes/2022/files/24_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"terminale/includes/2022/files/24_1/enonce/","title":"Enonce","text":"<p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre>"},{"location":"terminale/includes/2022/files/24_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n\n\nprint(parenthesage(\"((()())(()))\"))\nassert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</code></pre>"},{"location":"terminale/includes/2022/files/24_2/enonce/","title":"Enonce","text":"<p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene ch de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon. Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible !) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n\nassert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p>"},{"location":"terminale/includes/2022/files/25_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"terminale/includes/2022/files/25_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table animaux ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre>"},{"location":"terminale/includes/2022/files/25_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"terminale/includes/2022/files/25_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Compl\u00e9ter la fonction ci-dessous qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n    tab v\u00e9rifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre>"},{"location":"terminale/includes/2022/files/26_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def RechercheMin(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"terminale/includes/2022/files/26_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>RechercheMin</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; RechercheMin([5])\n0\n&gt;&gt;&gt; RechercheMin([2, 4, 1])\n2\n&gt;&gt;&gt; RechercheMin([5, 3, 2, 2, 4])\n2\n</code></pre></p>"},{"location":"terminale/includes/2022/files/26_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = len(tab) - 1\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = i + 1\n        else :\n            tab[i], tab[j] = tab[j], tab[i]\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"terminale/includes/2022/files/26_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre>"},{"location":"terminale/includes/2022/files/27_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre>"},{"location":"terminale/includes/2022/files/27_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud. On pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont <code>''</code>, le fils gauche seulement est <code>''</code>, le fils droit seulement est <code>''</code>, aucun des deux fils n\u2019est <code>''</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p>"},{"location":"terminale/includes/2022/files/27_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(len(tab)-1, 0, -1):\n        imax = 0\n        for i in range(0, k):\n            if tab[i] &gt; tab[imax] :\n                imax = i\n        if tab[imax] &gt; tab[k] :\n            tab[k], tab[imax] = tab[imax], tab[k] \n    return tab\n</code></pre>"},{"location":"terminale/includes/2022/files/27_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt depuis le d\u00e9but du tableau tous les \u00e9l\u00e9ments non rang\u00e9s et on place en derni\u00e8re position le plus grand \u00e9l\u00e9ment.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus grand \u00e9l\u00e9ment avec le dernier.</li> </ul> <p>Le tableau devient <code>t = [41, 25, 21, 18, 12, 6, 55]</code></p> <ul> <li>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le dernier, on permute le plus grand \u00e9l\u00e9ment trouv\u00e9 avec l'avant dernier.</li> </ul> <p>Le tableau devient : <code>t = [6, 25, 21, 18, 12, 41, 55]</code> </p> <p>Et ainsi de suite. La code de la fonction <code>tri_iteratif</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(..., 0 ,-1):\n        imax = ...\n        for i in range(0, ...):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[imax] &gt; ... :\n            ..., tab[imax] = tab[imax], ...\n    return tab\n</code></pre> <p>Compl\u00e9ter le code qui doit donner :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_iteratif([41, 55, 21, 18, 12, 6, 25])\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et <code>b</code>.</p>"},{"location":"terminale/includes/2022/files/28_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2022/files/28_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p>"},{"location":"terminale/includes/2022/files/28_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"terminale/includes/2022/files/28_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>dec_to_bin</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>\ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>dec_to_bin</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(83)\n'1010011'\n&gt;&gt;&gt; dec_to_bin(127)\n'1111111'\n</code></pre></p>"},{"location":"terminale/includes/2022/files/29_1/correction/","title":"Correction","text":"<p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/29_1/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonacci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre>"},{"location":"terminale/includes/2022/files/29_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n\n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre>"},{"location":"terminale/includes/2022/files/29_2/enonce/","title":"Enonce","text":"<p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre>"},{"location":"terminale/includes/2022/files/30_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"terminale/includes/2022/files/30_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre>"},{"location":"terminale/includes/2022/files/30_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rom_to_dec(nombre):\n\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n    if len(nombre) == 1:\n        return dico[nombre]\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n        ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:] # (1)\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + rom_to_dec(nombre_droite)\n        else:\n            return rom_to_dec(nombre_droite) - dico[nombre[0]]\n\nassert rom_to_dec(\"CXLII\") == 142\n</code></pre> <ol> <li>Le slicing utilis\u00e9 ici n'est officiellement pas au programme en NSI...</li> </ol>"},{"location":"terminale/includes/2022/files/30_2/enonce/","title":"Enonce","text":"<p>Les chiffres romains sont un syst\u00e8me ancien d\u2019\u00e9criture des nombres.</p> <p>Les chiffres romains sont: I, V, X, L, C, D, et M. Ces symboles repr\u00e9sentent respectivement 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>Lorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une valeur sup\u00e9rieure ou \u00e9gale \u00e0 celui de droite, le nombre s\u2019obtient en additionnant le caract\u00e8re de gauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.</p> <p>Ainsi, \"XVI\" est le nombre 16 car X + VI = 10 + 6.</p> <p>Lorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une valeur strictement inf\u00e9rieure \u00e0 celui de droite, le nombre s\u2019obtient en retranchant le caract\u00e8re de gauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.</p> <p>Ainsi, \"CDIII\" est le nombre 403 car DIII \u2013 C = 503 \u2013 100.</p> <p>On dispose d\u2019un dictionnaire <code>dico</code>, \u00e0 compl\u00e9ter, o\u00f9 les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et o\u00f9 les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale.</p> <p>On souhaite cr\u00e9er une fonction r\u00e9cursive <code>rom_to_dec</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res (non vide) repr\u00e9sentant un nombre \u00e9crit en chiffres romains et renvoyant le nombre associ\u00e9 en \u00e9criture d\u00e9cimale :</p> \ud83d\udc0d Script Python<pre><code>def rom_to_dec(nombre):\n\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, ...}\n    if len(nombre) == 1:\n        return ...\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n         ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:]\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + ...\n        else:\n            return ...\n\nassert rom_to_dec(\"CXLII\") == 142\n</code></pre>"},{"location":"terminale/includes/2022/files/31_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a, t):\n    nb = 0\n    for element in t:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/includes/2022/files/31_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>t</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>t</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5,[])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5,[-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p>"},{"location":"terminale/includes/2022/files/31_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = s_versee - s_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre>"},{"location":"terminale/includes/2022/files/31_2/enonce/","title":"Enonce","text":"<p>La fonction <code>rendu_monnaie_centimes</code> prend en param\u00e8tres deux nombres entiers positifs <code>s_due</code> et<code>s_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>s_versee \u2013 s_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. La fonction renvoie la liste des pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en centimes d\u2019euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie_centimes(452, 500)</code> renverra <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> centimes soit <code>20 + 20 + 5 + 2 + 1</code>. Le code de la fonction est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code pour qu'il donne : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie_centimes(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie_centimes(112,500)\n[200, 100, 50, 20, 10, 5, 2, 1]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/32_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre>"},{"location":"terminale/includes/2022/files/32_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"terminale/includes/2022/files/32_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse\n\n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n\n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"terminale/includes/2022/files/32_2/enonce/","title":"Enonce","text":"<p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4. On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p>"},{"location":"terminale/includes/2022/files/33_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"terminale/includes/2022/files/33_1/enonce/","title":"Enonce","text":"<p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(T):\n\"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p>"},{"location":"terminale/includes/2022/files/33_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if L == []:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,-1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre>"},{"location":"terminale/includes/2022/files/33_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n        # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n        # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n        # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/34_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o,','p','q','r','s','t','u','v','w','x','y','z']\n\ndef occurrence_max(chaine):\n    occurence = [0] *  26\n    for i in range(26):\n        compteur = 0\n        for caractere in chaine:\n            if caractere == alphabet[i]:\n                compteur += 1\n        occurence[i] = compteur\n    ind_max = 0\n    for i in range(26):\n        if occurence[i] &gt; occurence[ind_max]:\n            ind_max = i\n    return alphabet[ind_max]\n</code></pre>"},{"location":"terminale/includes/2022/files/34_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>occurrence_max</code> prenant en param\u00e8tres une cha\u00eene de caract\u00e8res <code>chaine</code> et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient que des lettres en minuscules sans accent. On pourra s\u2019aider du tableau</p> <p><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']</code></p> <p>et du tableau <code>occurrence</code> de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans <code>occurrence[i]</code> le nombre d\u2019apparitions de <code>alphabet[i]</code> dans la chaine. Puis on calculera l\u2019indice <code>k</code> d\u2019un maximum du tableau <code>occurrence</code> et on affichera <code>alphabet[k]</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch = 'je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique'\n&gt;&gt;&gt; occurrence_max(ch)\n\u2018e\u2019\n</code></pre></p>"},{"location":"terminale/includes/2022/files/34_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n'''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255-image[i][j]\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L    \n</code></pre>"},{"location":"terminale/includes/2022/files/34_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques. La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Compl\u00e9ter le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n'''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L    \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img = [[20, 34, 254, 145, 6], [23, 124, 287, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, -32, 30, 186], [58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(negatif(img),120)\n[[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0]]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/35_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2022/files/35_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p>"},{"location":"terminale/includes/2022/files/35_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False, 1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False, 3\n</code></pre>"},{"location":"terminale/includes/2022/files/35_2/enonce/","title":"Enonce","text":"<p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre>"},{"location":"terminale/includes/2022/files/36_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"terminale/includes/2022/files/36_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p>"},{"location":"terminale/includes/2022/files/36_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    assert int(point1[0]) == point1[0], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point1[1]) == point1[1], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point2[0]) == point2[0], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point2[1]) == point2[1], \"coordonn\u00e9e non enti\u00e8re\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre>"},{"location":"terminale/includes/2022/files/36_2/enonce/","title":"Enonce","text":"<p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>On dispose d'une fonction <code>distance</code> et d'une fonction <code>plus_courte_distance</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions.</p>"},{"location":"terminale/includes/2022/files/37_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"terminale/includes/2022/files/37_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre>"},{"location":"terminale/includes/2022/files/37_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax :\n            nmax = election[candidat]\n            vainqueur = candidat #(2)\n    liste_finale = [nom for nom in election if election[nom] == nmax]\n    return liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol>"},{"location":"terminale/includes/2022/files/37_2/enonce/","title":"Enonce","text":"<p>Chaque soir, les auditeurs d\u2019une radio votent en ligne pour leur artiste favori. Ces votes sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3} # (1)\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> <ol> <li>Attention, ceci est le bon r\u00e9sultat, le pdf officiel est erron\u00e9.</li> </ol>"},{"location":"terminale/includes/2022/files/38_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"terminale/includes/2022/files/38_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1,52,6,-9,12])\n[-9, 1, 6, 12, 52]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/38_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"terminale/includes/2022/files/38_2/enonce/","title":"Enonce","text":"<p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>. Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre>"},{"location":"terminale/includes/2022/files/39_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2022/files/39_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne</code> prenant en param\u00e8tres une liste d\u2019entiers et qui renvoie la moyenne des valeurs de cette liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([10,20,30,40,60,110])\n45.0\n</code></pre></p>"},{"location":"terminale/includes/2022/files/39_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre>"},{"location":"terminale/includes/2022/files/39_2/enonce/","title":"Enonce","text":"<p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> <pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre>"},{"location":"terminale/includes/2022/files/40_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    tab_indices = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            tab_indices.append(i)\n    return tab_indices        \n</code></pre>"},{"location":"terminale/includes/2022/files/40_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p>"},{"location":"terminale/includes/2022/files/40_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n\ndef moyenne(nom):\n    if nom in resultats:\n        notes = resultats[nom]\n        total_points = 0\n        total_coefficients = 0\n        for valeurs in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"terminale/includes/2022/files/40_2/enonce/","title":"Enonce","text":"<p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"terminale/includes/2023/files/01_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre>"},{"location":"terminale/includes/2023/files/01_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre>"},{"location":"terminale/includes/2023/files/01_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\nresultat = {}\nfor bulletin in urne:\nif bulletin in resultat:\nresultat[bulletin] = resultat[bulletin] + 1\n        else:\nresultat[bulletin] = 1\nreturn resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\nif election[candidat] &gt; nmax :\nnmax = election[candidat]\nvainqueur = candidat #(2)\nliste_finale = [nom for nom in election if election[nom] == nmax]\nreturn liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol>"},{"location":"terminale/includes/2023/files/01_2/enonce/","title":"Enonce","text":"<p>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre>"},{"location":"terminale/includes/2023/files/02_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"terminale/includes/2023/files/02_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>indices_maxi</code> qui prend qui prend en param\u00e8tre une liste <code>tab</code>, non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p>"},{"location":"terminale/includes/2023/files/02_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def positif(pile):\npile_1 = list(pile)\npile_2 = []\nwhile pile_1 != []:\nx = pile_1.pop()\nif x &gt;= 0:\npile_2.append(x)\nwhile pile_2 != []:\nx = pile_2.pop()\npile_1.append(x)\nreturn pile_1\n</code></pre>"},{"location":"terminale/includes/2023/files/02_2/enonce/","title":"Enonce","text":"<p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>liste_1 = list(liste)</code> fait une copie de <code>liste</code>ind\u00e9pendante de <code>liste</code>, que l\u2019expression <code>x = liste.pop()</code> enl\u00e8ve le sommet de la pile <code>liste</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>liste.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>liste</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>liste</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>liste</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/03_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"terminale/includes/2023/files/03_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, les nombres sont des entiers ou des flottants.</p> <p>\u00c9crire une fonction <code>moyenne</code> renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (<code>valeur</code>, <code>coefficient</code>) o\u00f9 <code>valeur</code> et <code>coefficient</code> sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie <code>None</code>, si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre></p> <p>Dans le premier exemple la moyenne est calcul\u00e9e par la formule :</p> <p>\\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\)</p>"},{"location":"terminale/includes/2023/files/03_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\nliste_zoom = []\nfor elt in liste_depart:\nfor i in range(k):\nliste_zoom.append(elt)\nreturn liste_zoom\n\ndef zoomDessin(grille, k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom = []\n    for elt in grille:\nliste_zoom = zoomListe(elt, k)\nfor i in range(k):\ngrille_zoom.append(liste_zoom)\nreturn grille_zoom\n</code></pre>"},{"location":"terminale/includes/2023/files/03_2/enonce/","title":"Enonce","text":"<p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> <pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre>"},{"location":"terminale/includes/2023/files/04_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def a_doublon(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"terminale/includes/2023/files/04_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie <code>True</code> si la liste contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Par exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre>"},{"location":"terminale/includes/2023/files/04_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\nvoisins = voisinage(len(grille), ligne, colonne)\nfor l, c in voisins:\nif grille[l][c] != -1: # si ce n'est pas une bombe\ngrille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\ngrille[ligne][colonne] = -1 # place la bombe\nincremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\nreturn grille\n</code></pre>"},{"location":"terminale/includes/2023/files/04_2/enonce/","title":"Enonce","text":"<p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> \ud83d\udc0d Script Python<pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"terminale/includes/2023/files/05_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1,6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;=2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"terminale/includes/2023/files/05_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en python deux fonctions :</p> <ul> <li> <p><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de type <code>list</code> de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</p> </li> <li> <p><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de type <code>list</code> de <code>n</code> entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</p> </li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre>"},{"location":"terminale/includes/2023/files/05_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\nreturn len(image)\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\nreturn len(image[0])\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nL[i][j] = 255 - image[i][j]\nreturn L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nif image[i][j] &lt; seuil :\nL[i][j] = 0\nelse:\nL[i][j] = 1\nreturn L\n</code></pre>"},{"location":"terminale/includes/2023/files/05_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre>"},{"location":"terminale/includes/2023/files/06_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"terminale/includes/2023/files/06_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p>"},{"location":"terminale/includes/2023/files/06_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\nreturn sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\nmin_dist = distance(point, depart)\nfor i in range (1, len(tab)):\nif distance(tab[i], depart) &lt; min_dist:\npoint = tab[i]\nmin_dist = distance(tab[i], depart)\nreturn point\n</code></pre>"},{"location":"terminale/includes/2023/files/06_2/enonce/","title":"Enonce","text":"<p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>Compl\u00e9ter le code des fonctions <code>distance</code> et <code>plus_courte_distance</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre>"},{"location":"terminale/includes/2023/files/07_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"terminale/includes/2023/files/07_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre>"},{"location":"terminale/includes/2023/files/07_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\nreturn romains[nombre]\nelif romains[nombre[0]] &gt;= romains[nombre[1]]:\nreturn romains[nombre[0]] + traduire_romain(nombre[1:])\nelse:\nreturn traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"terminale/includes/2023/files/07_2/enonce/","title":"Enonce","text":"<p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre>"},{"location":"terminale/includes/2023/files/08_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"terminale/includes/2023/files/08_1/enonce/","title":"Enonce","text":"<p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre>"},{"location":"terminale/includes/2023/files/08_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\nfor element in tab:\nif element != '+' and element != '*':\np.empiler(element)\nelse:\nif element == '+':\nresultat = p.depiler() + p.depiler()\nelse:\nresultat = p.depiler() * p.depiler()\np.empiler(resultat)\nreturn p.depiler()\n</code></pre>"},{"location":"terminale/includes/2023/files/08_2/enonce/","title":"Enonce","text":"<p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre>"},{"location":"terminale/includes/2023/files/09_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2023/files/09_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p>"},{"location":"terminale/includes/2023/files/09_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\nm = (i + j) // 2\nif tab[m] &lt; n :\nreturn chercher(tab, n, m+1 , j)\nelif tab[m] &gt; n :\nreturn chercher(tab, n, i , m-1 )\nelse :\nreturn m\n</code></pre>"},{"location":"terminale/includes/2023/files/09_2/enonce/","title":"Enonce","text":"<p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p>"},{"location":"terminale/includes/2023/files/10_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"terminale/includes/2023/files/10_1/enonce/","title":"Enonce","text":"<p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre>"},{"location":"terminale/includes/2023/files/10_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\nif c == '(':\np.empiler(c)\nelif c == ')':\nif p.est_vide():\nreturn False\nelse:\np.depiler()\nreturn p.est_vide()\n</code></pre>"},{"location":"terminale/includes/2023/files/10_2/enonce/","title":"Enonce","text":"<p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre>"},{"location":"terminale/includes/2023/files/11_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    puissance = 0\n    total = 0\n    for i in range(len(tab)-1, -1, -1):\n        total += tab[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"terminale/includes/2023/files/11_1/enonce/","title":"Enonce","text":"<p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n\"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p>"},{"location":"terminale/includes/2023/files/11_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\nvaleur_insertion = tab[i]\n# la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\nj = i\n# tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\nwhile j &gt; 0 and valeur_insertion &lt; tab[j-1]:\ntab[j] = tab[j-1]\nj = j - 1\ntab[j] = valeur_insertion\n</code></pre>"},{"location":"terminale/includes/2023/files/11_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>tab</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  </p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/12_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(cle, a): \n    if a is None:\n        a = ABR(None, cle, None)\n    elif cle &gt; a.cle:\n        a.droit = ajoute(cle, a.droit)\n    else:\n        a.gauche = ajoute(cle, a.gauche)\n    return a\n</code></pre>"},{"location":"terminale/includes/2023/files/12_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la classe <code>ABR</code>, dont le constructeur est le suivant :</p> \ud83d\udc0d Script Python<pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</code></pre> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> \ud83d\udc0d Script Python<pre><code>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n</code></pre> <p>Dans tout le code, <code>None</code> correspondra \u00e0 un arbre vide.</p> <p>La classe <code>ABR</code> dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (<code>__repr__</code> ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>ajoute(cle, a)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>  , et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre <code>a</code> inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre>"},{"location":"terminale/includes/2023/files/12_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def empaqueterR(liste_masses, c):\nn = len(liste_masses)\nnb_boites = 0\nboites = [0]*n\nfor masse in liste_masses :\ni = 0\nwhile i &lt;= nb_boites and boites[i] + masse &gt; c:\ni = i + 1\n    if i == nb_boites + 1:\nnb_boites = nb_boites + 1\nboites[i] = boites[i] + masse\nreturn nb_boites + 1\n</code></pre>"},{"location":"terminale/includes/2023/files/12_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre></p>"},{"location":"terminale/includes/2023/files/13_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a, tab):\n    nb = 0\n    for element in tab:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/includes/2023/files/13_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>tab</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p>"},{"location":"terminale/includes/2023/files/13_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\nrendu = []\na_rendre = somme_versee - somme_due\ni = len(pieces) - 1\nwhile a_rendre &gt; 0 :\nif pieces[i] &lt;= a_rendre :\nrendu.append(pieces[i])\na_rendre = a_rendre - pieces[i]\nelse :\ni = i - 1\nreturn rendu\n</code></pre>"},{"location":"terminale/includes/2023/files/13_2/enonce/","title":"Enonce","text":"<p>La fonction <code>rendu_monnaie</code> prend en param\u00e8tres deux nombres entiers positifs <code>somme_due</code> et <code>somme_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>somme_versee \u2013 somme_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces.</p> <p>La fonction <code>rendu_monnaie</code> renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/14_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n'''\n    renvoie l\u2019indice de la premi\u00e8re occurrence de\n    elt dans tab si elt est dans tab et -1 sinon. \n    '''\n    assert tab != [], \"le tableau est vide\"\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"terminale/includes/2023/files/14_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"terminale/includes/2023/files/14_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\ni = len(l) - 2\nwhile a &lt; l[i] and i &gt;= 0:\nl[i+1] = l[i]\nl[i] = a\ni = i - 1\nreturn l\n</code></pre>"},{"location":"terminale/includes/2023/files/14_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/15_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"terminale/includes/2023/files/15_1/enonce/","title":"Enonce","text":"<p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres un tableau <code>releve</code> des relev\u00e9s et un tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p>"},{"location":"terminale/includes/2023/files/15_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\nresult = ''\nfor caractere in chaine:\nresult = caractere + result\nreturn result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\nreturn chaine == inverse\ndef est_nbre_palindrome(nbre):\nchaine = str(nbre)\nreturn est_palindrome(chaine)\n</code></pre>"},{"location":"terminale/includes/2023/files/15_2/enonce/","title":"Enonce","text":"<p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre>"},{"location":"terminale/includes/2023/files/16_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"terminale/includes/2023/files/16_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et une liste d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs de la liste <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre>"},{"location":"terminale/includes/2023/files/16_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\nif nom in dico_result:\nnotes = dico_result[nom]\ntotal_points = 0.\ntotal_coefficients = 0\nfor valeurs  in notes.values():\nnote, coefficient = valeurs\ntotal_points = total_points + note * coefficient\ntotal_coefficients = total_coefficients + coefficient\nreturn round( total_points / total_coefficients, 1 )\nelse:\n        return -1\n</code></pre>"},{"location":"terminale/includes/2023/files/16_2/enonce/","title":"Enonce","text":"<p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"terminale/includes/2023/files/17_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"terminale/includes/2023/files/17_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne(liste_notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste <code>liste_notes</code>, non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p>"},{"location":"terminale/includes/2023/files/17_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\nfor k in range(1, n+1):\nligne_k = [1]\nfor i in range(1, k):\nligne_k.append(triangle[k-1][i-1] + triangle[k-1][i])\nligne_k.append(1)\ntriangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"terminale/includes/2023/files/17_2/enonce/","title":"Enonce","text":"<p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s prenant en param\u00e8tre un entier <code>n</code> sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne <code>n</code>. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable <code>triangle</code>.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/18_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n'''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans cette liste.\n    '''\n    assert tab != [], 'le tableau est vide'\n\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"terminale/includes/2023/files/18_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre une liste non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre>"},{"location":"terminale/includes/2023/files/18_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\nfor i in range(1,len(tab)):\nif i not in tab:\nreturn False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\nif ordre[0] != 1: # le premier n'est pas 1\nnb = nb + 1\n    i = 0\nwhile i &lt; n-1:\nif ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1\nnb = nb + 1\n        i = i + 1\nif ordre[n-1] != n: # le dernier n'est pas n\nnb = nb + 1\n    return nb\n</code></pre>"},{"location":"terminale/includes/2023/files/18_2/enonce/","title":"Enonce","text":"<p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre>"},{"location":"terminale/includes/2023/files/19_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"terminale/includes/2023/files/19_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p>"},{"location":"terminale/includes/2023/files/19_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\nfor c in message:\nif 'A' &lt;= c and c &lt;= 'Z':\nindice = (position_alphabet(c) + decalage) % 26\nresultat = resultat + ALPHABET[indice]\n        else:\nresultat = resultat + c\nreturn resultat\n</code></pre>"},{"location":"terminale/includes/2023/files/19_2/enonce/","title":"Enonce","text":"<p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n        return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre>"},{"location":"terminale/includes/2023/files/20_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1, d2):\nfor cle in d2:\n    if cle in d1:\n        d1[cle] += d2[cle]\n    else:\n        d1[cle] = d2[cle]\nreturn d1\n</code></pre>"},{"location":"terminale/includes/2023/files/20_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre>"},{"location":"terminale/includes/2023/files/20_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\nn = 0\ncases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\nwhile len(cases_vues) &lt; nbre_cases:\nx = randint(1, 6)\ncase_en_cours = (case_en_cours + x) % nbre_cases\nif case_en_cours not in cases_vues:\ncases_vues.append(case_en_cours)\nn = n + 1\nreturn n\n</code></pre>"},{"location":"terminale/includes/2023/files/20_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nbre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre>"},{"location":"terminale/includes/2023/files/21_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"terminale/includes/2023/files/21_1/enonce/","title":"Enonce","text":"<p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre>"},{"location":"terminale/includes/2023/files/21_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\ns = ''\nif e.gauche is not None:\ns = '(' + s + expression_infixe(e.gauche)\ns = s + str(e.valeur)\nif e.droit is not None:\ns = s + expression_infixe(e.droit) + ')'\nreturn s\n</code></pre>"},{"location":"terminale/includes/2023/files/21_2/enonce/","title":"Enonce","text":"<p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre>"},{"location":"terminale/includes/2023/files/22_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def liste_puissances(a, n):\n    lst = [a]*n\n    for i in range(1, n):\n        lst[i] = a * lst[i-1]\n    return lst\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"terminale/includes/2023/files/22_1/enonce/","title":"Enonce","text":"<p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet $n fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en argument un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en argument un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre>"},{"location":"terminale/includes/2023/files/22_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\ncode_additionne = 0\nfor c in mot:\ncode_concatene = code_concatene + str(dico[c])\ncode_additionne = code_additionne + dico[c]\ncode_concatene = int(code_concatene)\nif code_concatene % code_additionne == 0:\nmot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"terminale/includes/2023/files/22_2/enonce/","title":"Enonce","text":"<p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p>"},{"location":"terminale/includes/2023/files/23_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"terminale/includes/2023/files/23_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre>"},{"location":"terminale/includes/2023/files/23_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\nreturn tab[g]\nelse:\nnombre_de_triplets = (d - g) // 3\nindice = g + 3 * (nombre_de_triplets // 2)\nif tab[indice] != tab[indice + 1] :\nreturn trouver_intrus(tab, g, indice)\nelse:\nreturn trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"terminale/includes/2023/files/23_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre>"},{"location":"terminale/includes/2023/files/24_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"terminale/includes/2023/files/24_1/enonce/","title":"Enonce","text":"<p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p>"},{"location":"terminale/includes/2023/files/24_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\nwhile i1 &lt; n1 and i2 &lt; n2 :\nif lst1[i1] &lt; lst2[i2]:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\nelse:\n            lst12[i] = lst2[i2]\ni2 = i2 + 1\ni += 1\n    while i1 &lt; n1:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\ni = i + 1\nwhile i2 &lt; n2:\nlst12[i] = lst2[i2]\ni2 = i2 + 1\ni = i + 1\nreturn lst12\n</code></pre>"},{"location":"terminale/includes/2023/files/24_2/enonce/","title":"Enonce","text":"<p>La fonction <code>fusion</code> prend deux listes <code>lst1</code>, <code>lst2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>lst12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction <code>fusion</code> est</p> \ud83d\udc0d Script Python<pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"terminale/includes/2023/files/25_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def enumere(L):\n    d = {}\n    for i in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre>"},{"location":"terminale/includes/2023/files/25_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre une liste <code>L</code> et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>L</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste <code>L</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre>"},{"location":"terminale/includes/2023/files/25_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n    un arbre binaire de recherche.\n\"\"\"\nif cle &lt; arbre.v:\nif arbre.fg is not None:\ninsere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\nif arbre.fd is not None:\ninsere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Arbre(5)\n&gt;&gt;&gt; insere(a, 2)\n&gt;&gt;&gt; insere(a, 7)\n&gt;&gt;&gt; insere(a, 3)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; insere(a, 1)\n&gt;&gt;&gt; insere(a, 4)\n&gt;&gt;&gt; insere(a, 6)\n&gt;&gt;&gt; insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"terminale/includes/2023/files/25_2/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre>"},{"location":"terminale/includes/2023/files/26_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2023/files/26_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre>"},{"location":"terminale/includes/2023/files/26_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"terminale/includes/2023/files/26_2/enonce/","title":"Enonce","text":"<p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p>"},{"location":"terminale/includes/2023/files/27_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"terminale/includes/2023/files/27_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n</code></pre></p>"},{"location":"terminale/includes/2023/files/27_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\ndroite = len(tab) - 1\nwhile gauche &lt; droite :\n        if tab[gauche] == 0 :\ngauche = gauche + 1\nelse :\ntab[gauche], tab[droite] = tab[droite], tab[gauche]\ndroite = droite - 1\nreturn tab\n</code></pre>"},{"location":"terminale/includes/2023/files/27_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente</p>"},{"location":"terminale/includes/2023/files/28_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2023/files/28_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p>"},{"location":"terminale/includes/2023/files/28_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\nif tab = []:\nreturn False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\nif (x &lt; tab[0]) or (x &gt; tab[-1]):\nreturn False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m - 1\nreturn False, 3\n</code></pre>"},{"location":"terminale/includes/2023/files/28_2/enonce/","title":"Enonce","text":"<p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre>"},{"location":"terminale/includes/2023/files/29_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def taille(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + taille(a.fg) + taille(a.fd)\n\ndef hauteur(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + max(hauteur(a.fg), hauteur(a.fd))\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>a = Arbre(0)\na.fg = Arbre(1)\na.fd = Arbre(2)\na.fg.fg = Arbre(3)\na.fd.fg = Arbre(4)\na.fd.fd = Arbre(5)\na.fd.fg.fd = Arbre(6)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a)\n7\n&gt;&gt;&gt; hauteur(a)\n4\n</code></pre>"},{"location":"terminale/includes/2023/files/29_1/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : \ud83d\udc0d Script Python<pre><code>a = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.</p> <p>Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p>"},{"location":"terminale/includes/2023/files/29_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\nif indice &lt; nbre_elts:\nfor i in range(indice):\nL[i] = liste[i]\nL[indice] = element\nfor i in range(indice + 1, nbre_elts + 1):\nL[i] = liste[i-1]\nelse:\n        for i in range(nbre_elts):\nL[i] = liste[i]\nL[nbre_elts] = element \nreturn L\n</code></pre>"},{"location":"terminale/includes/2023/files/29_2/enonce/","title":"Enonce","text":"<p>La m\u00e9thode <code>insert</code> de la classe <code>list</code> permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un <code>indice</code> donn\u00e9.</p> <p>Le but de cet exercice est, sans utiliser cette m\u00e9thode, d\u2019\u00e9crire une fonction <code>ajoute</code> r\u00e9alisant cette insertion en produisant une nouvelle liste.</p> <p>Cette fonction <code>ajoute</code> prend en param\u00e8tres trois variables <code>indice</code>, <code>element</code> et <code>liste</code> et renvoie une liste <code>L</code> dans laquelle les \u00e9l\u00e9ments sont ceux de la liste <code>liste</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>. On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>liste</code> sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste <code>liste</code>, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans la liste <code>L</code>. Si <code>indice</code> est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste <code>liste</code>, l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans <code>L</code> apr\u00e8s tous les \u00e9l\u00e9ments de la liste <code>liste</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre></p> <p>Compl\u00e9ter et tester le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre>"},{"location":"terminale/includes/2023/files/30_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2023/files/30_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p>"},{"location":"terminale/includes/2023/files/30_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"terminale/includes/2023/files/30_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p>"},{"location":"terminale/includes/2023/files/31_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"terminale/includes/2023/files/31_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p>"},{"location":"terminale/includes/2023/files/31_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"terminale/includes/2023/files/31_2/enonce/","title":"Enonce","text":"<p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre>"},{"location":"terminale/includes/2023/files/32_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"terminale/includes/2023/files/32_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre>"},{"location":"terminale/includes/2023/files/32_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\nself.contenu = [Carte(c, v) for c in range(1, 5) for v in range(1, 14)]  \ndef get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\nassert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\nreturn self.contenu[pos]\n</code></pre>"},{"location":"terminale/includes/2023/files/32_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>get_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre>"},{"location":"terminale/includes/2023/files/33_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre>"},{"location":"terminale/includes/2023/files/33_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p>"},{"location":"terminale/includes/2023/files/33_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\nfor k in range(N):\nimin = k\nfor i in range(k, N):\nif tab[i] &lt; tab[imin] :\nimin = i\ntab[k] , tab[imin] = tab[imin] , tab[k]\n</code></pre>"},{"location":"terminale/includes/2023/files/33_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_selection</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>.</p>"},{"location":"terminale/includes/2023/files/34_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"terminale/includes/2023/files/34_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p>"},{"location":"terminale/includes/2023/files/34_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\ni = 0\nj = len(tab) - 1\nwhile i != j :\n        if tab[i] == 0:\ni = i + 1\nelse :\n            valeur = tab[j]\ntab[j] = tab[i]\ntab[i] = valeur\nj = j - 1\nreturn tab\n</code></pre>"},{"location":"terminale/includes/2023/files/34_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> Zone de 0Zone non tri\u00e9eZone de 1 <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p>"},{"location":"terminale/includes/2023/files/35_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> \ud83d\udc0d Script Python<pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"terminale/includes/2023/files/35_1/enonce/","title":"Enonce","text":"<p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1])\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n</code></pre>"},{"location":"terminale/includes/2023/files/35_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\nfor i in range(self.ordre):\nif self.somme_ligne(i) != s:\nreturn False\n#test de la somme de chaque colonne\nfor j in range(self.ordre):\nif self.somme_col(j) != s:\nreturn False\nreturn True\n</code></pre> <p>Tests avec :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"terminale/includes/2023/files/35_2/enonce/","title":"Enonce","text":"<p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre>"},{"location":"terminale/includes/2023/files/36_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"terminale/includes/2023/files/36_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre une liste de nombres entiers <code>tab</code> non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/36_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\nif M[i][j] == 1:\nM[i][j] = val\n\n    # l'element en haut fait partie de la composante\nif i-1 &gt;= 0 and M[i-1][j] == 1:\npropager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\nif i+1 &lt; len(M) and M[i+1][j] == 1:\npropager(M, i+1, j, val)\n# l'element \u00e0 gauche fait partie de la composante\nif j-1 and M[i][j-1] == 1:\npropager(M, i, j-1, val)\n# l'element \u00e0 droite fait partie de la composante\nif j+1 and M[i][j+1] == 1:\npropager(M, i, j+1, val)\n</code></pre>"},{"location":"terminale/includes/2023/files/36_2/enonce/","title":"Enonce","text":"<p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et unevaleur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/37_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre>"},{"location":"terminale/includes/2023/files/37_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p>"},{"location":"terminale/includes/2023/files/37_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\nself.adresse = adresse\ndef liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\nreturn self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\ndef adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\nif self.liste_octet()[3] &lt; 254:\noctet_nouveau = self.liste_octet()[3] + 1\nreturn AdresseIP('192.168.0.' + str(octet_nouveau))\nelse:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"terminale/includes/2023/files/37_2/enonce/","title":"Enonce","text":"<p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p>"},{"location":"terminale/includes/2023/files/38_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"terminale/includes/2023/files/38_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre>"},{"location":"terminale/includes/2023/files/38_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\ndestinataire = plan[expediteur]\nnb_destinaires = 1\nwhile destinataire != expediteur:\ndestinataire = plan[destinataire]\nnb_destinaires += 1\nreturn nb_destinaires == len(plan)\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"terminale/includes/2023/files/38_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre>"},{"location":"terminale/includes/2023/files/39_1/correction/","title":"Correction","text":"<p>Version r\u00e9cursive :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version imp\u00e9rative : \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    a = 0\n    b = 1\n    for k in range(n-1):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre></p> <p>Version programmation dynamique :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre>"},{"location":"terminale/includes/2023/files/39_1/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premiers termes sont \u00e9gaux \u00e0 1,</li> <li>ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent.</li> </ul> <p>En math\u00e9matiques, on le formule ainsi :</p> <p>\\(U_1 = 1\\), \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\), par \\(U_{n+2} = U_{n+1} + U_n\\).</p> <p>Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre>"},{"location":"terminale/includes/2023/files/39_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\nmeilleurs_eleves =  []\nfor i in range(len(eleves)) :\nif notes[i] == note_maxi :\nmeilleurs_eleves.append(eleves[i])\nelif notes[i] &gt; note_maxi:\nnote_maxi = notes[i]\nmeilleurs_eleves = [i]\nreturn (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"terminale/includes/2023/files/39_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>pantheon</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>. Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction <code>pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> \ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre>"},{"location":"terminale/includes/2023/files/40_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"terminale/includes/2023/files/40_1/enonce/","title":"Enonce","text":"<p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre>"},{"location":"terminale/includes/2023/files/40_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\nif cle &lt; self.valeur:\n# on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\nself.gauche.inserer(cle)\nelse:\n                # on cr\u00e9e un fils gauche\nself.gauche = Noeud(cle)\nelif cle &gt; self.valeur:\n# on ins\u00e8re \u00e0 droite\nif self.droitExiste():\n# on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\nself.droit.inserer(cle)\nelse:\n                # on cr\u00e9e un fils droit\nself.droit = Noeud(cle)\n</code></pre>"},{"location":"terminale/includes/2023/files/40_2/enonce/","title":"Enonce","text":"<p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre>"},{"location":"terminale/includes/2023/files/41_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"terminale/includes/2023/files/41_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans chaine.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p>"},{"location":"terminale/includes/2023/files/41_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\nreturn []\nv = valeurs[rang]\nif v &lt;= a_rendre :\nreturn [v] + rendu_glouton(a_rendre - v, rang)\nelse :\nreturn rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"terminale/includes/2023/files/41_2/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre>"},{"location":"terminale/includes/2023/files/42_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"terminale/includes/2023/files/42_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/42_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\nnb_mystere = randint(1,99)\nnb_test = int(input('Proposez un nombre entre 1 et 99 : '))\ncompteur = 1\nwhile nb_mystere != nb_test and compteur &lt; 10 :\ncompteur = compteur + 1\nif nb_mystere &gt; nb_test:\nnb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\nprint ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\nprint('Nombre d essais: ', compteur)\nelse:\nprint ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"terminale/includes/2023/files/42_2/enonce/","title":"Enonce","text":"<p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre>"},{"location":"terminale/includes/2023/files/43_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return [0]\n    # cas g\u00e9n\u00e9ral\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return b\n</code></pre>"},{"location":"terminale/includes/2023/files/43_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n</code></pre> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p>"},{"location":"terminale/includes/2023/files/43_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\nfor i in range(n-1,-1,-1):\nfor j in range(i):\nif T[j] &gt; T[j+1]:\ntemp = T[j]\nT[j] = T[j+1]\nT[j+1] = temp\n    return T\n</code></pre>"},{"location":"terminale/includes/2023/files/43_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier la liste <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre></p>"},{"location":"terminale/includes/2023/files/44_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"terminale/includes/2023/files/44_1/enonce/","title":"Enonce","text":"<p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre>"},{"location":"terminale/includes/2023/files/44_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\nfor i in range(2, n):\nif tab[i] == True:\npremiers.append(i)\nfor multiple in range(2*i, n, i):\ntab[multiple] = False\nreturn premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre>"},{"location":"terminale/includes/2023/files/44_2/enonce/","title":"Enonce","text":"<p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p>"},{"location":"terminale/includes/2023/files/45_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rangement_valeurs(notes_eval):\n    lst = [0]*11\n    for note in notes_eval:\n        lst[note] += 1\n    return lst\n\ndef notes_triees(effectifs_notes):\n    triees = []\n    for i in range(11):\n        if effectifs_notes[i] != 0:\n            for _ in range(effectifs_notes[i]):\n                triees.append(i)\n    return triees\n</code></pre>"},{"location":"terminale/includes/2023/files/45_1/enonce/","title":"Enonce","text":"<p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans une liste <code>notes_eval</code>.</p> <p>\u00c9crire une fonction <code>rangement_valeurs</code> prenant en param\u00e8tre la liste <code>notes_eval</code> et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre>"},{"location":"terminale/includes/2023/files/45_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\nif q == 0:\nreturn str(r)\n    else:\nreturn dec_to_bin(q) + str(r)\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\nelif nb_bin == '1':\nreturn 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\nbit_droit = 1\nreturn 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"terminale/includes/2023/files/45_2/enonce/","title":"Enonce","text":"<p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre>"},{"location":"xtra/end_REM/","title":"end REM","text":"<p>Z</p>"},{"location":"xtra/start_REM/","title":"start REM","text":"<p>A</p>"},{"location":"tags-index/","title":"Tags","text":"<p>Liste des tags utilis\u00e9s sur ce site :</p>"}]}